
FND.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  000003b4  00000448  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000003b4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000003  0080010a  0080010a  00000452  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000452  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000484  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000080  00000000  00000000  000004c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000c28  00000000  00000000  00000544  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009fa  00000000  00000000  0000116c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000058b  00000000  00000000  00001b66  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000104  00000000  00000000  000020f4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004a0  00000000  00000000  000021f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000002fe  00000000  00000000  00002698  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  00002996  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	63 c1       	rjmp	.+710    	; 0x308 <__vector_16>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e4 eb       	ldi	r30, 0xB4	; 180
  a0:	f3 e0       	ldi	r31, 0x03	; 3
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	aa 30       	cpi	r26, 0x0A	; 10
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	aa e0       	ldi	r26, 0x0A	; 10
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	ad 30       	cpi	r26, 0x0D	; 13
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	4b d1       	rcall	.+662    	; 0x35a <main>
  c4:	75 c1       	rjmp	.+746    	; 0x3b0 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <FND_init>:


uint16_t fndData = 0;

void FND_init(){
	FND_DIGIT_DDR	|= ((1<<FND_DIGIT_4)|(1<<FND_DIGIT_3)|(1<<FND_DIGIT_2)|(1<<FND_DIGIT_1)); 
  c8:	82 b1       	in	r24, 0x02	; 2
  ca:	80 6f       	ori	r24, 0xF0	; 240
  cc:	82 b9       	out	0x02, r24	; 2
	FND_DATA_DDR	= 0xff;
  ce:	8f ef       	ldi	r24, 0xFF	; 255
  d0:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
  d4:	08 95       	ret

000000d6 <FND_dispNum>:
}

void FND_dispNum(uint16_t fndNum){
  d6:	cf 93       	push	r28
  d8:	df 93       	push	r29
  da:	cd b7       	in	r28, 0x3d	; 61
  dc:	de b7       	in	r29, 0x3e	; 62
  de:	2a 97       	sbiw	r28, 0x0a	; 10
  e0:	0f b6       	in	r0, 0x3f	; 63
  e2:	f8 94       	cli
  e4:	de bf       	out	0x3e, r29	; 62
  e6:	0f be       	out	0x3f, r0	; 63
  e8:	cd bf       	out	0x3d, r28	; 61
  ea:	ac 01       	movw	r20, r24
	
	uint8_t fndFont[] = {0x3f,0x06,0x5b,0x4f,0x66,0x6d,0x7d,0x07,0x7f,0x6f};
  ec:	8a e0       	ldi	r24, 0x0A	; 10
  ee:	e0 e0       	ldi	r30, 0x00	; 0
  f0:	f1 e0       	ldi	r31, 0x01	; 1
  f2:	de 01       	movw	r26, r28
  f4:	11 96       	adiw	r26, 0x01	; 1
  f6:	01 90       	ld	r0, Z+
  f8:	0d 92       	st	X+, r0
  fa:	8a 95       	dec	r24
  fc:	e1 f7       	brne	.-8      	; 0xf6 <FND_dispNum+0x20>
	
	static uint8_t fndDigitState = 0;
	
	fndDigitState = (fndDigitState+1)%4;
  fe:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <__data_end>
 102:	90 e0       	ldi	r25, 0x00	; 0
 104:	01 96       	adiw	r24, 0x01	; 1
 106:	83 70       	andi	r24, 0x03	; 3
 108:	90 78       	andi	r25, 0x80	; 128
 10a:	99 23       	and	r25, r25
 10c:	24 f4       	brge	.+8      	; 0x116 <FND_dispNum+0x40>
 10e:	01 97       	sbiw	r24, 0x01	; 1
 110:	8c 6f       	ori	r24, 0xFC	; 252
 112:	9f 6f       	ori	r25, 0xFF	; 255
 114:	01 96       	adiw	r24, 0x01	; 1
 116:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__data_end>
	switch (fndDigitState)
 11a:	81 30       	cpi	r24, 0x01	; 1
 11c:	09 f4       	brne	.+2      	; 0x120 <FND_dispNum+0x4a>
 11e:	46 c0       	rjmp	.+140    	; 0x1ac <FND_dispNum+0xd6>
 120:	38 f0       	brcs	.+14     	; 0x130 <FND_dispNum+0x5a>
 122:	82 30       	cpi	r24, 0x02	; 2
 124:	09 f4       	brne	.+2      	; 0x128 <FND_dispNum+0x52>
 126:	7a c0       	rjmp	.+244    	; 0x21c <FND_dispNum+0x146>
 128:	83 30       	cpi	r24, 0x03	; 3
 12a:	09 f4       	brne	.+2      	; 0x12e <FND_dispNum+0x58>
 12c:	ad c0       	rjmp	.+346    	; 0x288 <FND_dispNum+0x1b2>
 12e:	d8 c0       	rjmp	.+432    	; 0x2e0 <FND_dispNum+0x20a>
	{
		case 0:
		PORTE |= ((1<<7)|(1<<6)|(1<<5)|(1<<4));
 130:	83 b1       	in	r24, 0x03	; 3
 132:	80 6f       	ori	r24, 0xF0	; 240
 134:	83 b9       	out	0x03, r24	; 3
		PORTF = fndFont[fndNum/1000%10];
 136:	9a 01       	movw	r18, r20
 138:	36 95       	lsr	r19
 13a:	27 95       	ror	r18
 13c:	36 95       	lsr	r19
 13e:	27 95       	ror	r18
 140:	36 95       	lsr	r19
 142:	27 95       	ror	r18
 144:	a5 ec       	ldi	r26, 0xC5	; 197
 146:	b0 e2       	ldi	r27, 0x20	; 32
 148:	24 d1       	rcall	.+584    	; 0x392 <__umulhisi3>
 14a:	ac 01       	movw	r20, r24
 14c:	52 95       	swap	r21
 14e:	42 95       	swap	r20
 150:	4f 70       	andi	r20, 0x0F	; 15
 152:	45 27       	eor	r20, r21
 154:	5f 70       	andi	r21, 0x0F	; 15
 156:	45 27       	eor	r20, r21
 158:	9a 01       	movw	r18, r20
 15a:	ad ec       	ldi	r26, 0xCD	; 205
 15c:	bc ec       	ldi	r27, 0xCC	; 204
 15e:	19 d1       	rcall	.+562    	; 0x392 <__umulhisi3>
 160:	96 95       	lsr	r25
 162:	87 95       	ror	r24
 164:	96 95       	lsr	r25
 166:	87 95       	ror	r24
 168:	96 95       	lsr	r25
 16a:	87 95       	ror	r24
 16c:	9c 01       	movw	r18, r24
 16e:	22 0f       	add	r18, r18
 170:	33 1f       	adc	r19, r19
 172:	88 0f       	add	r24, r24
 174:	99 1f       	adc	r25, r25
 176:	88 0f       	add	r24, r24
 178:	99 1f       	adc	r25, r25
 17a:	88 0f       	add	r24, r24
 17c:	99 1f       	adc	r25, r25
 17e:	82 0f       	add	r24, r18
 180:	93 1f       	adc	r25, r19
 182:	9a 01       	movw	r18, r20
 184:	28 1b       	sub	r18, r24
 186:	39 0b       	sbc	r19, r25
 188:	e1 e0       	ldi	r30, 0x01	; 1
 18a:	f0 e0       	ldi	r31, 0x00	; 0
 18c:	ec 0f       	add	r30, r28
 18e:	fd 1f       	adc	r31, r29
 190:	e2 0f       	add	r30, r18
 192:	f3 1f       	adc	r31, r19
 194:	80 81       	ld	r24, Z
 196:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
		PORTE = ~(1<<4);
 19a:	8f ee       	ldi	r24, 0xEF	; 239
 19c:	83 b9       	out	0x03, r24	; 3
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 19e:	8f e9       	ldi	r24, 0x9F	; 159
 1a0:	9f e0       	ldi	r25, 0x0F	; 15
 1a2:	01 97       	sbiw	r24, 0x01	; 1
 1a4:	f1 f7       	brne	.-4      	; 0x1a2 <FND_dispNum+0xcc>
 1a6:	00 c0       	rjmp	.+0      	; 0x1a8 <FND_dispNum+0xd2>
 1a8:	00 00       	nop
 1aa:	9a c0       	rjmp	.+308    	; 0x2e0 <FND_dispNum+0x20a>
		_delay_ms(1);
		break;
		
		case 1:
		PORTE |= ((1<<7)|(1<<6)|(1<<5)|(1<<4));
 1ac:	83 b1       	in	r24, 0x03	; 3
 1ae:	80 6f       	ori	r24, 0xF0	; 240
 1b0:	83 b9       	out	0x03, r24	; 3
		PORTF = fndFont[fndNum/100%10];
 1b2:	9a 01       	movw	r18, r20
 1b4:	36 95       	lsr	r19
 1b6:	27 95       	ror	r18
 1b8:	36 95       	lsr	r19
 1ba:	27 95       	ror	r18
 1bc:	ab e7       	ldi	r26, 0x7B	; 123
 1be:	b4 e1       	ldi	r27, 0x14	; 20
 1c0:	e8 d0       	rcall	.+464    	; 0x392 <__umulhisi3>
 1c2:	ac 01       	movw	r20, r24
 1c4:	56 95       	lsr	r21
 1c6:	47 95       	ror	r20
 1c8:	9a 01       	movw	r18, r20
 1ca:	ad ec       	ldi	r26, 0xCD	; 205
 1cc:	bc ec       	ldi	r27, 0xCC	; 204
 1ce:	e1 d0       	rcall	.+450    	; 0x392 <__umulhisi3>
 1d0:	96 95       	lsr	r25
 1d2:	87 95       	ror	r24
 1d4:	96 95       	lsr	r25
 1d6:	87 95       	ror	r24
 1d8:	96 95       	lsr	r25
 1da:	87 95       	ror	r24
 1dc:	9c 01       	movw	r18, r24
 1de:	22 0f       	add	r18, r18
 1e0:	33 1f       	adc	r19, r19
 1e2:	88 0f       	add	r24, r24
 1e4:	99 1f       	adc	r25, r25
 1e6:	88 0f       	add	r24, r24
 1e8:	99 1f       	adc	r25, r25
 1ea:	88 0f       	add	r24, r24
 1ec:	99 1f       	adc	r25, r25
 1ee:	82 0f       	add	r24, r18
 1f0:	93 1f       	adc	r25, r19
 1f2:	9a 01       	movw	r18, r20
 1f4:	28 1b       	sub	r18, r24
 1f6:	39 0b       	sbc	r19, r25
 1f8:	e1 e0       	ldi	r30, 0x01	; 1
 1fa:	f0 e0       	ldi	r31, 0x00	; 0
 1fc:	ec 0f       	add	r30, r28
 1fe:	fd 1f       	adc	r31, r29
 200:	e2 0f       	add	r30, r18
 202:	f3 1f       	adc	r31, r19
 204:	80 81       	ld	r24, Z
 206:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
		PORTE = ~(1<<5);
 20a:	8f ed       	ldi	r24, 0xDF	; 223
 20c:	83 b9       	out	0x03, r24	; 3
 20e:	8f e9       	ldi	r24, 0x9F	; 159
 210:	9f e0       	ldi	r25, 0x0F	; 15
 212:	01 97       	sbiw	r24, 0x01	; 1
 214:	f1 f7       	brne	.-4      	; 0x212 <FND_dispNum+0x13c>
 216:	00 c0       	rjmp	.+0      	; 0x218 <FND_dispNum+0x142>
 218:	00 00       	nop
 21a:	62 c0       	rjmp	.+196    	; 0x2e0 <FND_dispNum+0x20a>
		_delay_ms(1);
		break;
		case 2:
		PORTE |= ((1<<7)|(1<<6)|(1<<5)|(1<<4));
 21c:	83 b1       	in	r24, 0x03	; 3
 21e:	80 6f       	ori	r24, 0xF0	; 240
		PORTF = fndFont[fndNum/10%10];
 220:	83 b9       	out	0x03, r24	; 3
 222:	9a 01       	movw	r18, r20
 224:	ad ec       	ldi	r26, 0xCD	; 205
 226:	bc ec       	ldi	r27, 0xCC	; 204
 228:	b4 d0       	rcall	.+360    	; 0x392 <__umulhisi3>
 22a:	ac 01       	movw	r20, r24
 22c:	56 95       	lsr	r21
 22e:	47 95       	ror	r20
 230:	56 95       	lsr	r21
 232:	47 95       	ror	r20
 234:	56 95       	lsr	r21
 236:	47 95       	ror	r20
 238:	9a 01       	movw	r18, r20
 23a:	ab d0       	rcall	.+342    	; 0x392 <__umulhisi3>
 23c:	96 95       	lsr	r25
 23e:	87 95       	ror	r24
 240:	96 95       	lsr	r25
 242:	87 95       	ror	r24
 244:	96 95       	lsr	r25
 246:	87 95       	ror	r24
 248:	9c 01       	movw	r18, r24
 24a:	22 0f       	add	r18, r18
 24c:	33 1f       	adc	r19, r19
 24e:	88 0f       	add	r24, r24
 250:	99 1f       	adc	r25, r25
 252:	88 0f       	add	r24, r24
 254:	99 1f       	adc	r25, r25
 256:	88 0f       	add	r24, r24
 258:	99 1f       	adc	r25, r25
 25a:	82 0f       	add	r24, r18
 25c:	93 1f       	adc	r25, r19
 25e:	9a 01       	movw	r18, r20
 260:	28 1b       	sub	r18, r24
 262:	39 0b       	sbc	r19, r25
 264:	e1 e0       	ldi	r30, 0x01	; 1
 266:	f0 e0       	ldi	r31, 0x00	; 0
 268:	ec 0f       	add	r30, r28
 26a:	fd 1f       	adc	r31, r29
 26c:	e2 0f       	add	r30, r18
 26e:	f3 1f       	adc	r31, r19
 270:	80 81       	ld	r24, Z
 272:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
		PORTE = ~(1<<6);
 276:	8f eb       	ldi	r24, 0xBF	; 191
 278:	83 b9       	out	0x03, r24	; 3
 27a:	8f e9       	ldi	r24, 0x9F	; 159
 27c:	9f e0       	ldi	r25, 0x0F	; 15
 27e:	01 97       	sbiw	r24, 0x01	; 1
 280:	f1 f7       	brne	.-4      	; 0x27e <FND_dispNum+0x1a8>
 282:	00 c0       	rjmp	.+0      	; 0x284 <FND_dispNum+0x1ae>
 284:	00 00       	nop
 286:	2c c0       	rjmp	.+88     	; 0x2e0 <FND_dispNum+0x20a>
		_delay_ms(1);
		break;
		case 3:
		PORTE |= ((1<<7)|(1<<6)|(1<<5)|(1<<4));
 288:	83 b1       	in	r24, 0x03	; 3
 28a:	80 6f       	ori	r24, 0xF0	; 240
		PORTF = fndFont[fndNum%10];
 28c:	83 b9       	out	0x03, r24	; 3
 28e:	9a 01       	movw	r18, r20
 290:	ad ec       	ldi	r26, 0xCD	; 205
 292:	bc ec       	ldi	r27, 0xCC	; 204
 294:	7e d0       	rcall	.+252    	; 0x392 <__umulhisi3>
 296:	96 95       	lsr	r25
 298:	87 95       	ror	r24
 29a:	96 95       	lsr	r25
 29c:	87 95       	ror	r24
 29e:	96 95       	lsr	r25
 2a0:	87 95       	ror	r24
 2a2:	9c 01       	movw	r18, r24
 2a4:	22 0f       	add	r18, r18
 2a6:	33 1f       	adc	r19, r19
 2a8:	88 0f       	add	r24, r24
 2aa:	99 1f       	adc	r25, r25
 2ac:	88 0f       	add	r24, r24
 2ae:	99 1f       	adc	r25, r25
 2b0:	88 0f       	add	r24, r24
 2b2:	99 1f       	adc	r25, r25
 2b4:	82 0f       	add	r24, r18
 2b6:	93 1f       	adc	r25, r19
 2b8:	9a 01       	movw	r18, r20
 2ba:	28 1b       	sub	r18, r24
 2bc:	39 0b       	sbc	r19, r25
 2be:	e1 e0       	ldi	r30, 0x01	; 1
 2c0:	f0 e0       	ldi	r31, 0x00	; 0
 2c2:	ec 0f       	add	r30, r28
 2c4:	fd 1f       	adc	r31, r29
 2c6:	e2 0f       	add	r30, r18
 2c8:	f3 1f       	adc	r31, r19
 2ca:	80 81       	ld	r24, Z
 2cc:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
		PORTE = ~(1<<7);
 2d0:	8f e7       	ldi	r24, 0x7F	; 127
 2d2:	83 b9       	out	0x03, r24	; 3
 2d4:	8f e9       	ldi	r24, 0x9F	; 159
 2d6:	9f e0       	ldi	r25, 0x0F	; 15
 2d8:	01 97       	sbiw	r24, 0x01	; 1
 2da:	f1 f7       	brne	.-4      	; 0x2d8 <FND_dispNum+0x202>
 2dc:	00 c0       	rjmp	.+0      	; 0x2de <FND_dispNum+0x208>
 2de:	00 00       	nop
		_delay_ms(1);
		break;
	}
	
}
 2e0:	2a 96       	adiw	r28, 0x0a	; 10
 2e2:	0f b6       	in	r0, 0x3f	; 63
 2e4:	f8 94       	cli
 2e6:	de bf       	out	0x3e, r29	; 62
 2e8:	0f be       	out	0x3f, r0	; 63
 2ea:	cd bf       	out	0x3d, r28	; 61
 2ec:	df 91       	pop	r29
 2ee:	cf 91       	pop	r28
 2f0:	08 95       	ret

000002f2 <FND_setFndData>:

void FND_setFndData(uint16_t data){
	fndData = data;
 2f2:	90 93 0c 01 	sts	0x010C, r25	; 0x80010c <fndData+0x1>
 2f6:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <fndData>
 2fa:	08 95       	ret

000002fc <FND_ISR_Process>:
}

void FND_ISR_Process(){
	FND_dispNum(fndData);
 2fc:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <fndData>
 300:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <fndData+0x1>
 304:	e8 ce       	rjmp	.-560    	; 0xd6 <FND_dispNum>
 306:	08 95       	ret

00000308 <__vector_16>:
#include <util/delay.h>
#include <avr/interrupt.h>
#include "driver/FND/FND.h"
#include "periph/TIM/TIM.h"

ISR(TIMER0_OVF_vect){
 308:	1f 92       	push	r1
 30a:	0f 92       	push	r0
 30c:	0f b6       	in	r0, 0x3f	; 63
 30e:	0f 92       	push	r0
 310:	11 24       	eor	r1, r1
 312:	0b b6       	in	r0, 0x3b	; 59
 314:	0f 92       	push	r0
 316:	2f 93       	push	r18
 318:	3f 93       	push	r19
 31a:	4f 93       	push	r20
 31c:	5f 93       	push	r21
 31e:	6f 93       	push	r22
 320:	7f 93       	push	r23
 322:	8f 93       	push	r24
 324:	9f 93       	push	r25
 326:	af 93       	push	r26
 328:	bf 93       	push	r27
 32a:	ef 93       	push	r30
 32c:	ff 93       	push	r31
	FND_ISR_Process();
 32e:	e6 df       	rcall	.-52     	; 0x2fc <FND_ISR_Process>
	TCNT0 = 130;
 330:	82 e8       	ldi	r24, 0x82	; 130
 332:	82 bf       	out	0x32, r24	; 50
}
 334:	ff 91       	pop	r31
 336:	ef 91       	pop	r30
 338:	bf 91       	pop	r27
 33a:	af 91       	pop	r26
 33c:	9f 91       	pop	r25
 33e:	8f 91       	pop	r24
 340:	7f 91       	pop	r23
 342:	6f 91       	pop	r22
 344:	5f 91       	pop	r21
 346:	4f 91       	pop	r20
 348:	3f 91       	pop	r19
 34a:	2f 91       	pop	r18
 34c:	0f 90       	pop	r0
 34e:	0b be       	out	0x3b, r0	; 59
 350:	0f 90       	pop	r0
 352:	0f be       	out	0x3f, r0	; 63
 354:	0f 90       	pop	r0
 356:	1f 90       	pop	r1
 358:	18 95       	reti

0000035a <main>:

int main(void)
{

	FND_init();
 35a:	b6 de       	rcall	.-660    	; 0xc8 <FND_init>
	TIM0_init();
 35c:	11 d0       	rcall	.+34     	; 0x380 <TIM0_init>
 35e:	78 94       	sei
	sei();
 360:	80 e0       	ldi	r24, 0x00	; 0

	uint16_t counter =0;
 362:	90 e0       	ldi	r25, 0x00	; 0
 364:	ec 01       	movw	r28, r24
	
	while (1)
	{
		FND_setFndData(counter++);
 366:	21 96       	adiw	r28, 0x01	; 1
 368:	c4 df       	rcall	.-120    	; 0x2f2 <FND_setFndData>
 36a:	2f ef       	ldi	r18, 0xFF	; 255
 36c:	83 ed       	ldi	r24, 0xD3	; 211
 36e:	90 e3       	ldi	r25, 0x30	; 48
 370:	21 50       	subi	r18, 0x01	; 1
 372:	80 40       	sbci	r24, 0x00	; 0
 374:	90 40       	sbci	r25, 0x00	; 0
 376:	e1 f7       	brne	.-8      	; 0x370 <main+0x16>
 378:	00 c0       	rjmp	.+0      	; 0x37a <main+0x20>
 37a:	00 00       	nop
 37c:	ce 01       	movw	r24, r28
 37e:	f2 cf       	rjmp	.-28     	; 0x364 <main+0xa>

00000380 <TIM0_init>:
﻿#include "TIM.h"

void TIM0_init(){
	
	TCCR0 |= ((1<<CS02)|(0<<CS01)|(1<<CS00)); //128 preScaler
 380:	83 b7       	in	r24, 0x33	; 51
 382:	85 60       	ori	r24, 0x05	; 5
 384:	83 bf       	out	0x33, r24	; 51
	TIMSK |= (1<<TOIE0);					  //TIMSK Timer/counter
 386:	87 b7       	in	r24, 0x37	; 55
 388:	81 60       	ori	r24, 0x01	; 1
 38a:	87 bf       	out	0x37, r24	; 55
	TCNT0=130;
 38c:	82 e8       	ldi	r24, 0x82	; 130
 38e:	82 bf       	out	0x32, r24	; 50
 390:	08 95       	ret

00000392 <__umulhisi3>:
 392:	a2 9f       	mul	r26, r18
 394:	b0 01       	movw	r22, r0
 396:	b3 9f       	mul	r27, r19
 398:	c0 01       	movw	r24, r0
 39a:	a3 9f       	mul	r26, r19
 39c:	70 0d       	add	r23, r0
 39e:	81 1d       	adc	r24, r1
 3a0:	11 24       	eor	r1, r1
 3a2:	91 1d       	adc	r25, r1
 3a4:	b2 9f       	mul	r27, r18
 3a6:	70 0d       	add	r23, r0
 3a8:	81 1d       	adc	r24, r1
 3aa:	11 24       	eor	r1, r1
 3ac:	91 1d       	adc	r25, r1
 3ae:	08 95       	ret

000003b0 <_exit>:
 3b0:	f8 94       	cli

000003b2 <__stop_program>:
 3b2:	ff cf       	rjmp	.-2      	; 0x3b2 <__stop_program>
