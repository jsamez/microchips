
ClockMachine_OOP.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000002a  00800100  00000f8c  00001020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000f8c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000019  0080012a  0080012a  0000104a  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000104a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000010a8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000288  00000000  00000000  000010e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001f93  00000000  00000000  00001370  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000011b4  00000000  00000000  00003303  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001278  00000000  00000000  000044b7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000004f0  00000000  00000000  00005730  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000008ca  00000000  00000000  00005c20  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000ae5  00000000  00000000  000064ea  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001c8  00000000  00000000  00006fcf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	7a c0       	rjmp	.+244    	; 0x11a <__vector_9>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	43 c0       	rjmp	.+134    	; 0xc8 <__vector_16>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ec e8       	ldi	r30, 0x8C	; 140
  a0:	ff e0       	ldi	r31, 0x0F	; 15
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	aa 32       	cpi	r26, 0x2A	; 42
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	aa e2       	ldi	r26, 0x2A	; 42
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a3 34       	cpi	r26, 0x43	; 67
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	f8 d3       	rcall	.+2032   	; 0x8b4 <main>
  c4:	61 c7       	rjmp	.+3778   	; 0xf88 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <__vector_16>:
﻿#include "apMain.h"

ISR(TIMER0_OVF_vect){
  c8:	1f 92       	push	r1
  ca:	0f 92       	push	r0
  cc:	0f b6       	in	r0, 0x3f	; 63
  ce:	0f 92       	push	r0
  d0:	11 24       	eor	r1, r1
  d2:	0b b6       	in	r0, 0x3b	; 59
  d4:	0f 92       	push	r0
  d6:	2f 93       	push	r18
  d8:	3f 93       	push	r19
  da:	4f 93       	push	r20
  dc:	5f 93       	push	r21
  de:	6f 93       	push	r22
  e0:	7f 93       	push	r23
  e2:	8f 93       	push	r24
  e4:	9f 93       	push	r25
  e6:	af 93       	push	r26
  e8:	bf 93       	push	r27
  ea:	ef 93       	push	r30
  ec:	ff 93       	push	r31
	FND_ISR_Process();
  ee:	39 d3       	rcall	.+1650   	; 0x762 <FND_ISR_Process>
	TCNT0=130;
  f0:	82 e8       	ldi	r24, 0x82	; 130
  f2:	82 bf       	out	0x32, r24	; 50
}
  f4:	ff 91       	pop	r31
  f6:	ef 91       	pop	r30
  f8:	bf 91       	pop	r27
  fa:	af 91       	pop	r26
  fc:	9f 91       	pop	r25
  fe:	8f 91       	pop	r24
 100:	7f 91       	pop	r23
 102:	6f 91       	pop	r22
 104:	5f 91       	pop	r21
 106:	4f 91       	pop	r20
 108:	3f 91       	pop	r19
 10a:	2f 91       	pop	r18
 10c:	0f 90       	pop	r0
 10e:	0b be       	out	0x3b, r0	; 59
 110:	0f 90       	pop	r0
 112:	0f be       	out	0x3f, r0	; 63
 114:	0f 90       	pop	r0
 116:	1f 90       	pop	r1
 118:	18 95       	reti

0000011a <__vector_9>:
ISR(TIMER2_COMP_vect){
 11a:	1f 92       	push	r1
 11c:	0f 92       	push	r0
 11e:	0f b6       	in	r0, 0x3f	; 63
 120:	0f 92       	push	r0
 122:	11 24       	eor	r1, r1
 124:	0b b6       	in	r0, 0x3b	; 59
 126:	0f 92       	push	r0
 128:	2f 93       	push	r18
 12a:	3f 93       	push	r19
 12c:	4f 93       	push	r20
 12e:	5f 93       	push	r21
 130:	6f 93       	push	r22
 132:	7f 93       	push	r23
 134:	8f 93       	push	r24
 136:	9f 93       	push	r25
 138:	af 93       	push	r26
 13a:	bf 93       	push	r27
 13c:	ef 93       	push	r30
 13e:	ff 93       	push	r31
	StopWatch_incMilisec();
 140:	11 d1       	rcall	.+546    	; 0x364 <StopWatch_incMilisec>
}
 142:	ff 91       	pop	r31
 144:	ef 91       	pop	r30
 146:	bf 91       	pop	r27
 148:	af 91       	pop	r26
 14a:	9f 91       	pop	r25
 14c:	8f 91       	pop	r24
 14e:	7f 91       	pop	r23
 150:	6f 91       	pop	r22
 152:	5f 91       	pop	r21
 154:	4f 91       	pop	r20
 156:	3f 91       	pop	r19
 158:	2f 91       	pop	r18
 15a:	0f 90       	pop	r0
 15c:	0b be       	out	0x3b, r0	; 59
 15e:	0f 90       	pop	r0
 160:	0f be       	out	0x3f, r0	; 63
 162:	0f 90       	pop	r0
 164:	1f 90       	pop	r1
 166:	18 95       	reti

00000168 <apMain_init>:

void apMain_init(){
	
	Listener_init();
 168:	0c d0       	rcall	.+24     	; 0x182 <Listener_init>
	StopWatch_init();
 16a:	eb d0       	rcall	.+470    	; 0x342 <StopWatch_init>
	Presenter_init();
 16c:	44 d0       	rcall	.+136    	; 0x1f6 <Presenter_init>
	TIM0_init();
 16e:	e6 d3       	rcall	.+1996   	; 0x93c <TIM0_init>
 170:	ee d3       	rcall	.+2012   	; 0x94e <TIM2_init>
	TIM2_init();
 172:	78 94       	sei
	sei();
 174:	80 e0       	ldi	r24, 0x00	; 0
	Model_getStopWatchData(STOP);
 176:	90 e0       	ldi	r25, 0x00	; 0
 178:	38 c0       	rjmp	.+112    	; 0x1ea <Model_getStopWatchData>
 17a:	08 95       	ret

0000017c <apMain_execute>:
 17c:	34 d0       	rcall	.+104    	; 0x1e6 <Listener_eventCheck>
 17e:	83 c1       	rjmp	.+774    	; 0x486 <Service_Run>
	
}

void apMain_execute(){
	Listener_eventCheck();
	Service_Run();
 180:	08 95       	ret

00000182 <Listener_init>:
 182:	20 e0       	ldi	r18, 0x00	; 0
﻿#include "Listener.h"

button_t btnRunStop,btnReset;

void Listener_init(){
	Button_init(&btnRunStop,&DDRA,&PINA,0);
 184:	49 e3       	ldi	r20, 0x39	; 57
 186:	50 e0       	ldi	r21, 0x00	; 0
 188:	6a e3       	ldi	r22, 0x3A	; 58
 18a:	70 e0       	ldi	r23, 0x00	; 0
 18c:	84 e3       	ldi	r24, 0x34	; 52
 18e:	91 e0       	ldi	r25, 0x01	; 1
 190:	99 d1       	rcall	.+818    	; 0x4c4 <Button_init>
	Button_init(&btnReset,&DDRA,&PINA,1);
 192:	21 e0       	ldi	r18, 0x01	; 1
 194:	49 e3       	ldi	r20, 0x39	; 57
 196:	50 e0       	ldi	r21, 0x00	; 0
 198:	6a e3       	ldi	r22, 0x3A	; 58
 19a:	70 e0       	ldi	r23, 0x00	; 0
 19c:	8e e2       	ldi	r24, 0x2E	; 46
 19e:	91 e0       	ldi	r25, 0x01	; 1
 1a0:	91 c1       	rjmp	.+802    	; 0x4c4 <Button_init>
 1a2:	08 95       	ret

000001a4 <Listener_StopWatchEvent>:
}

void Listener_StopWatchEvent(){
	
	uint8_t StopWatchState;
	StopWatchState = Model_getStopWatchData();
 1a4:	22 d0       	rcall	.+68     	; 0x1ea <Model_getStopWatchData>
	
	switch(StopWatchState)
 1a6:	81 30       	cpi	r24, 0x01	; 1
 1a8:	99 f0       	breq	.+38     	; 0x1d0 <Listener_StopWatchEvent+0x2c>
 1aa:	18 f0       	brcs	.+6      	; 0x1b2 <Listener_StopWatchEvent+0xe>
 1ac:	82 30       	cpi	r24, 0x02	; 2
 1ae:	c1 f0       	breq	.+48     	; 0x1e0 <Listener_StopWatchEvent+0x3c>
 1b0:	08 95       	ret
	{
		case STOP:
		if (button_getstate(&btnRunStop) == ACT_RELEASED)
 1b2:	84 e3       	ldi	r24, 0x34	; 52
 1b4:	91 e0       	ldi	r25, 0x01	; 1
 1b6:	93 d1       	rcall	.+806    	; 0x4de <button_getstate>
 1b8:	81 30       	cpi	r24, 0x01	; 1
		{
			StopWatchState = RUN;
			Model_setStopWatchData(StopWatchState);
 1ba:	11 f4       	brne	.+4      	; 0x1c0 <Listener_StopWatchEvent+0x1c>
 1bc:	19 c0       	rjmp	.+50     	; 0x1f0 <Model_setStopWatchData>
		}
		else if (button_getstate(&btnReset) == ACT_RELEASED){
 1be:	08 95       	ret
 1c0:	8e e2       	ldi	r24, 0x2E	; 46
 1c2:	91 e0       	ldi	r25, 0x01	; 1
 1c4:	8c d1       	rcall	.+792    	; 0x4de <button_getstate>
 1c6:	81 30       	cpi	r24, 0x01	; 1
			StopWatchState = RESET;
			Model_setStopWatchData(StopWatchState);
 1c8:	69 f4       	brne	.+26     	; 0x1e4 <Listener_StopWatchEvent+0x40>
 1ca:	82 e0       	ldi	r24, 0x02	; 2
 1cc:	11 c0       	rjmp	.+34     	; 0x1f0 <Model_setStopWatchData>
		}
		break;
		
		case RUN:
		if (button_getstate(&btnRunStop) == ACT_RELEASED)
 1ce:	08 95       	ret
 1d0:	84 e3       	ldi	r24, 0x34	; 52
 1d2:	91 e0       	ldi	r25, 0x01	; 1
 1d4:	84 d1       	rcall	.+776    	; 0x4de <button_getstate>
		{
			StopWatchState = STOP;
			Model_setStopWatchData(StopWatchState);
 1d6:	81 30       	cpi	r24, 0x01	; 1
 1d8:	29 f4       	brne	.+10     	; 0x1e4 <Listener_StopWatchEvent+0x40>
 1da:	80 e0       	ldi	r24, 0x00	; 0
 1dc:	09 c0       	rjmp	.+18     	; 0x1f0 <Model_setStopWatchData>
		break;
		
		case RESET:
		{
			StopWatchState = STOP;
			Model_setStopWatchData(StopWatchState);
 1de:	08 95       	ret
 1e0:	80 e0       	ldi	r24, 0x00	; 0
 1e2:	06 c0       	rjmp	.+12     	; 0x1f0 <Model_setStopWatchData>
 1e4:	08 95       	ret

000001e6 <Listener_eventCheck>:
	Button_init(&btnReset,&DDRA,&PINA,1);
}

void Listener_eventCheck(){
	
	Listener_StopWatchEvent();
 1e6:	de cf       	rjmp	.-68     	; 0x1a4 <Listener_StopWatchEvent>
 1e8:	08 95       	ret

000001ea <Model_getStopWatchData>:
uint8_t StopWatchStateData;

uint8_t Model_getStopWatchData()
{
	return StopWatchStateData;
}
 1ea:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <StopWatchStateData>
 1ee:	08 95       	ret

000001f0 <Model_setStopWatchData>:

void Model_setStopWatchData(uint8_t state)
{
	StopWatchStateData = state;
 1f0:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <StopWatchStateData>
 1f4:	08 95       	ret

000001f6 <Presenter_init>:
﻿#include "Presenter.h"

void Presenter_init(){
	FND_init();
 1f6:	9e d1       	rcall	.+828    	; 0x534 <FND_init>
	LCD_init();
 1f8:	07 c3       	rjmp	.+1550   	; 0x808 <LCD_init>
 1fa:	08 95       	ret

000001fc <Presenter_dispStopWatchData>:
 1fc:	af 92       	push	r10
}


void Presenter_dispStopWatchData(uint8_t hour, uint8_t min, uint8_t sec, uint16_t milisec)
{
 1fe:	bf 92       	push	r11
 200:	df 92       	push	r13
 202:	ef 92       	push	r14
 204:	ff 92       	push	r15
 206:	0f 93       	push	r16
 208:	1f 93       	push	r17
 20a:	cf 93       	push	r28
 20c:	df 93       	push	r29
 20e:	cd b7       	in	r28, 0x3d	; 61
 210:	de b7       	in	r29, 0x3e	; 62
 212:	6e 97       	sbiw	r28, 0x1e	; 30
 214:	0f b6       	in	r0, 0x3f	; 63
 216:	f8 94       	cli
 218:	de bf       	out	0x3e, r29	; 62
 21a:	0f be       	out	0x3f, r0	; 63
 21c:	cd bf       	out	0x3d, r28	; 61
 21e:	d8 2e       	mov	r13, r24
 220:	f6 2e       	mov	r15, r22
 222:	e4 2e       	mov	r14, r20
 224:	89 01       	movw	r16, r18
	uint16_t stopwatch_data;
	
	stopwatch_data = (min%10*1000)+(sec*10)+(milisec/100%10);
 226:	8d ec       	ldi	r24, 0xCD	; 205
 228:	68 9f       	mul	r22, r24
 22a:	81 2d       	mov	r24, r1
 22c:	11 24       	eor	r1, r1
 22e:	86 95       	lsr	r24
 230:	86 95       	lsr	r24
 232:	86 95       	lsr	r24
 234:	88 0f       	add	r24, r24
 236:	98 2f       	mov	r25, r24
 238:	99 0f       	add	r25, r25
 23a:	99 0f       	add	r25, r25
 23c:	89 0f       	add	r24, r25
 23e:	46 2f       	mov	r20, r22
 240:	48 1b       	sub	r20, r24
 242:	88 ee       	ldi	r24, 0xE8	; 232
 244:	93 e0       	ldi	r25, 0x03	; 3
 246:	48 9f       	mul	r20, r24
 248:	90 01       	movw	r18, r0
 24a:	49 9f       	mul	r20, r25
 24c:	30 0d       	add	r19, r0
 24e:	11 24       	eor	r1, r1
 250:	8e 2d       	mov	r24, r14
 252:	90 e0       	ldi	r25, 0x00	; 0
 254:	ac 01       	movw	r20, r24
 256:	44 0f       	add	r20, r20
 258:	55 1f       	adc	r21, r21
 25a:	88 0f       	add	r24, r24
 25c:	99 1f       	adc	r25, r25
 25e:	88 0f       	add	r24, r24
 260:	99 1f       	adc	r25, r25
 262:	88 0f       	add	r24, r24
 264:	99 1f       	adc	r25, r25
 266:	84 0f       	add	r24, r20
 268:	95 1f       	adc	r25, r21
 26a:	a9 01       	movw	r20, r18
 26c:	48 0f       	add	r20, r24
 26e:	59 1f       	adc	r21, r25
 270:	98 01       	movw	r18, r16
 272:	36 95       	lsr	r19
 274:	27 95       	ror	r18
 276:	36 95       	lsr	r19
 278:	27 95       	ror	r18
 27a:	ab e7       	ldi	r26, 0x7B	; 123
 27c:	b4 e1       	ldi	r27, 0x14	; 20
 27e:	86 d3       	rcall	.+1804   	; 0x98c <__umulhisi3>
 280:	fc 01       	movw	r30, r24
 282:	f6 95       	lsr	r31
 284:	e7 95       	ror	r30
 286:	9f 01       	movw	r18, r30
 288:	ad ec       	ldi	r26, 0xCD	; 205
 28a:	bc ec       	ldi	r27, 0xCC	; 204
 28c:	7f d3       	rcall	.+1790   	; 0x98c <__umulhisi3>
 28e:	96 95       	lsr	r25
 290:	87 95       	ror	r24
 292:	96 95       	lsr	r25
 294:	87 95       	ror	r24
 296:	96 95       	lsr	r25
 298:	87 95       	ror	r24
 29a:	9c 01       	movw	r18, r24
 29c:	22 0f       	add	r18, r18
 29e:	33 1f       	adc	r19, r19
 2a0:	88 0f       	add	r24, r24
 2a2:	99 1f       	adc	r25, r25
 2a4:	88 0f       	add	r24, r24
 2a6:	99 1f       	adc	r25, r25
 2a8:	88 0f       	add	r24, r24
 2aa:	99 1f       	adc	r25, r25
 2ac:	82 0f       	add	r24, r18
 2ae:	93 1f       	adc	r25, r19
 2b0:	9f 01       	movw	r18, r30
 2b2:	28 1b       	sub	r18, r24
 2b4:	39 0b       	sbc	r19, r25
 2b6:	c9 01       	movw	r24, r18
	FND_setFndData(stopwatch_data);
 2b8:	84 0f       	add	r24, r20
 2ba:	95 1f       	adc	r25, r21
 2bc:	4d d2       	rcall	.+1178   	; 0x758 <FND_setFndData>
	
	char buff[30];
	
	sprintf(buff,"Stop Watch");
 2be:	8b e0       	ldi	r24, 0x0B	; 11
 2c0:	eb e0       	ldi	r30, 0x0B	; 11
 2c2:	f1 e0       	ldi	r31, 0x01	; 1
 2c4:	9e 01       	movw	r18, r28
 2c6:	2f 5f       	subi	r18, 0xFF	; 255
 2c8:	3f 4f       	sbci	r19, 0xFF	; 255
 2ca:	59 01       	movw	r10, r18
 2cc:	d9 01       	movw	r26, r18
 2ce:	01 90       	ld	r0, Z+
 2d0:	0d 92       	st	X+, r0
 2d2:	8a 95       	dec	r24
 2d4:	e1 f7       	brne	.-8      	; 0x2ce <Presenter_dispStopWatchData+0xd2>
	LCD_writeStringXY(0,3,buff);
 2d6:	a9 01       	movw	r20, r18
 2d8:	63 e0       	ldi	r22, 0x03	; 3
 2da:	80 e0       	ldi	r24, 0x00	; 0
 2dc:	e2 d2       	rcall	.+1476   	; 0x8a2 <LCD_writeStringXY>
	sprintf(buff,"%02d:%02d:%02d:%02d",hour,min,sec,milisec/10);
 2de:	98 01       	movw	r18, r16
 2e0:	ad ec       	ldi	r26, 0xCD	; 205
 2e2:	bc ec       	ldi	r27, 0xCC	; 204
 2e4:	53 d3       	rcall	.+1702   	; 0x98c <__umulhisi3>
 2e6:	96 95       	lsr	r25
 2e8:	87 95       	ror	r24
 2ea:	96 95       	lsr	r25
 2ec:	87 95       	ror	r24
 2ee:	96 95       	lsr	r25
 2f0:	87 95       	ror	r24
 2f2:	9f 93       	push	r25
 2f4:	8f 93       	push	r24
 2f6:	1f 92       	push	r1
 2f8:	ef 92       	push	r14
 2fa:	1f 92       	push	r1
 2fc:	ff 92       	push	r15
 2fe:	1f 92       	push	r1
 300:	df 92       	push	r13
 302:	86 e1       	ldi	r24, 0x16	; 22
 304:	91 e0       	ldi	r25, 0x01	; 1
 306:	9f 93       	push	r25
 308:	8f 93       	push	r24
 30a:	bf 92       	push	r11
 30c:	af 92       	push	r10
 30e:	61 d3       	rcall	.+1730   	; 0x9d2 <sprintf>
	LCD_writeStringXY(1,2,buff);
 310:	a5 01       	movw	r20, r10
 312:	62 e0       	ldi	r22, 0x02	; 2
 314:	81 e0       	ldi	r24, 0x01	; 1
 316:	c5 d2       	rcall	.+1418   	; 0x8a2 <LCD_writeStringXY>
 318:	0f b6       	in	r0, 0x3f	; 63
 31a:	f8 94       	cli
 31c:	de bf       	out	0x3e, r29	; 62
 31e:	0f be       	out	0x3f, r0	; 63
 320:	cd bf       	out	0x3d, r28	; 61
 322:	6e 96       	adiw	r28, 0x1e	; 30
 324:	0f b6       	in	r0, 0x3f	; 63
 326:	f8 94       	cli
 328:	de bf       	out	0x3e, r29	; 62
 32a:	0f be       	out	0x3f, r0	; 63
 32c:	cd bf       	out	0x3d, r28	; 61
 32e:	df 91       	pop	r29
 330:	cf 91       	pop	r28
 332:	1f 91       	pop	r17
 334:	0f 91       	pop	r16
 336:	ff 90       	pop	r15
 338:	ef 90       	pop	r14
 33a:	df 90       	pop	r13
 33c:	bf 90       	pop	r11
 33e:	af 90       	pop	r10
 340:	08 95       	ret

00000342 <StopWatch_init>:
uint16_t milisec;
uint16_t sec, min, hour;

void StopWatch_init(){
	
	milisec = 0;
 342:	10 92 3c 01 	sts	0x013C, r1	; 0x80013c <milisec+0x1>
 346:	10 92 3b 01 	sts	0x013B, r1	; 0x80013b <milisec>
	sec = 0;
 34a:	10 92 42 01 	sts	0x0142, r1	; 0x800142 <sec+0x1>
 34e:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <sec>
	min = 0;
 352:	10 92 40 01 	sts	0x0140, r1	; 0x800140 <min+0x1>
 356:	10 92 3f 01 	sts	0x013F, r1	; 0x80013f <min>
	hour = 0;
 35a:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <hour+0x1>
 35e:	10 92 3d 01 	sts	0x013D, r1	; 0x80013d <hour>
 362:	08 95       	ret

00000364 <StopWatch_incMilisec>:
}

void StopWatch_incMilisec(){
	uint8_t StopWatchState;
	
	StopWatchState=Model_getStopWatchData();
 364:	42 df       	rcall	.-380    	; 0x1ea <Model_getStopWatchData>
	
	if (StopWatchState == RUN){
 366:	81 30       	cpi	r24, 0x01	; 1
 368:	09 f0       	breq	.+2      	; 0x36c <StopWatch_incMilisec+0x8>
 36a:	8c c0       	rjmp	.+280    	; 0x484 <__LOCK_REGION_LENGTH__+0x84>
		milisec = (milisec+1)%1000;
 36c:	40 91 3b 01 	lds	r20, 0x013B	; 0x80013b <milisec>
 370:	50 91 3c 01 	lds	r21, 0x013C	; 0x80013c <milisec+0x1>
 374:	4f 5f       	subi	r20, 0xFF	; 255
 376:	5f 4f       	sbci	r21, 0xFF	; 255
 378:	9a 01       	movw	r18, r20
 37a:	36 95       	lsr	r19
 37c:	27 95       	ror	r18
 37e:	36 95       	lsr	r19
 380:	27 95       	ror	r18
 382:	36 95       	lsr	r19
 384:	27 95       	ror	r18
 386:	a5 ec       	ldi	r26, 0xC5	; 197
 388:	b0 e2       	ldi	r27, 0x20	; 32
 38a:	00 d3       	rcall	.+1536   	; 0x98c <__umulhisi3>
 38c:	92 95       	swap	r25
 38e:	82 95       	swap	r24
 390:	8f 70       	andi	r24, 0x0F	; 15
 392:	89 27       	eor	r24, r25
 394:	9f 70       	andi	r25, 0x0F	; 15
 396:	89 27       	eor	r24, r25
 398:	68 ee       	ldi	r22, 0xE8	; 232
 39a:	73 e0       	ldi	r23, 0x03	; 3
 39c:	86 9f       	mul	r24, r22
 39e:	90 01       	movw	r18, r0
 3a0:	87 9f       	mul	r24, r23
 3a2:	30 0d       	add	r19, r0
 3a4:	96 9f       	mul	r25, r22
 3a6:	30 0d       	add	r19, r0
 3a8:	11 24       	eor	r1, r1
 3aa:	ca 01       	movw	r24, r20
 3ac:	82 1b       	sub	r24, r18
 3ae:	93 0b       	sbc	r25, r19
 3b0:	90 93 3c 01 	sts	0x013C, r25	; 0x80013c <milisec+0x1>
 3b4:	80 93 3b 01 	sts	0x013B, r24	; 0x80013b <milisec>
	}
	else return;
	
	if(milisec)return;
 3b8:	89 2b       	or	r24, r25
 3ba:	09 f0       	breq	.+2      	; 0x3be <StopWatch_incMilisec+0x5a>
 3bc:	63 c0       	rjmp	.+198    	; 0x484 <__LOCK_REGION_LENGTH__+0x84>
	
	sec = (sec +1)%60;
 3be:	40 91 41 01 	lds	r20, 0x0141	; 0x800141 <sec>
 3c2:	50 91 42 01 	lds	r21, 0x0142	; 0x800142 <sec+0x1>
 3c6:	4f 5f       	subi	r20, 0xFF	; 255
 3c8:	5f 4f       	sbci	r21, 0xFF	; 255
 3ca:	9a 01       	movw	r18, r20
 3cc:	a9 e8       	ldi	r26, 0x89	; 137
 3ce:	b8 e8       	ldi	r27, 0x88	; 136
 3d0:	dd d2       	rcall	.+1466   	; 0x98c <__umulhisi3>
 3d2:	96 95       	lsr	r25
 3d4:	87 95       	ror	r24
 3d6:	92 95       	swap	r25
 3d8:	82 95       	swap	r24
 3da:	8f 70       	andi	r24, 0x0F	; 15
 3dc:	89 27       	eor	r24, r25
 3de:	9f 70       	andi	r25, 0x0F	; 15
 3e0:	89 27       	eor	r24, r25
 3e2:	6c e3       	ldi	r22, 0x3C	; 60
 3e4:	68 9f       	mul	r22, r24
 3e6:	90 01       	movw	r18, r0
 3e8:	69 9f       	mul	r22, r25
 3ea:	30 0d       	add	r19, r0
 3ec:	11 24       	eor	r1, r1
 3ee:	ca 01       	movw	r24, r20
 3f0:	82 1b       	sub	r24, r18
 3f2:	93 0b       	sbc	r25, r19
 3f4:	90 93 42 01 	sts	0x0142, r25	; 0x800142 <sec+0x1>
 3f8:	80 93 41 01 	sts	0x0141, r24	; 0x800141 <sec>
	if (sec) return;
 3fc:	89 2b       	or	r24, r25
 3fe:	09 f0       	breq	.+2      	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
 400:	41 c0       	rjmp	.+130    	; 0x484 <__LOCK_REGION_LENGTH__+0x84>
	
	min = (min +1)%60;
 402:	40 91 3f 01 	lds	r20, 0x013F	; 0x80013f <min>
 406:	50 91 40 01 	lds	r21, 0x0140	; 0x800140 <min+0x1>
 40a:	4f 5f       	subi	r20, 0xFF	; 255
 40c:	5f 4f       	sbci	r21, 0xFF	; 255
 40e:	9a 01       	movw	r18, r20
 410:	bd d2       	rcall	.+1402   	; 0x98c <__umulhisi3>
 412:	96 95       	lsr	r25
 414:	87 95       	ror	r24
 416:	92 95       	swap	r25
 418:	82 95       	swap	r24
 41a:	8f 70       	andi	r24, 0x0F	; 15
 41c:	89 27       	eor	r24, r25
 41e:	9f 70       	andi	r25, 0x0F	; 15
 420:	89 27       	eor	r24, r25
 422:	6c e3       	ldi	r22, 0x3C	; 60
 424:	68 9f       	mul	r22, r24
 426:	90 01       	movw	r18, r0
 428:	69 9f       	mul	r22, r25
 42a:	30 0d       	add	r19, r0
 42c:	11 24       	eor	r1, r1
 42e:	ca 01       	movw	r24, r20
 430:	82 1b       	sub	r24, r18
 432:	93 0b       	sbc	r25, r19
 434:	90 93 40 01 	sts	0x0140, r25	; 0x800140 <min+0x1>
 438:	80 93 3f 01 	sts	0x013F, r24	; 0x80013f <min>
	if(min) return;
 43c:	89 2b       	or	r24, r25
 43e:	11 f5       	brne	.+68     	; 0x484 <__LOCK_REGION_LENGTH__+0x84>
	
	hour = (hour +1) %24;
 440:	40 91 3d 01 	lds	r20, 0x013D	; 0x80013d <hour>
 444:	50 91 3e 01 	lds	r21, 0x013E	; 0x80013e <hour+0x1>
 448:	4f 5f       	subi	r20, 0xFF	; 255
 44a:	5f 4f       	sbci	r21, 0xFF	; 255
 44c:	9a 01       	movw	r18, r20
 44e:	ab ea       	ldi	r26, 0xAB	; 171
 450:	ba ea       	ldi	r27, 0xAA	; 170
 452:	9c d2       	rcall	.+1336   	; 0x98c <__umulhisi3>
 454:	92 95       	swap	r25
 456:	82 95       	swap	r24
 458:	8f 70       	andi	r24, 0x0F	; 15
 45a:	89 27       	eor	r24, r25
 45c:	9f 70       	andi	r25, 0x0F	; 15
 45e:	89 27       	eor	r24, r25
 460:	9c 01       	movw	r18, r24
 462:	22 0f       	add	r18, r18
 464:	33 1f       	adc	r19, r19
 466:	82 0f       	add	r24, r18
 468:	93 1f       	adc	r25, r19
 46a:	88 0f       	add	r24, r24
 46c:	99 1f       	adc	r25, r25
 46e:	88 0f       	add	r24, r24
 470:	99 1f       	adc	r25, r25
 472:	88 0f       	add	r24, r24
 474:	99 1f       	adc	r25, r25
 476:	9a 01       	movw	r18, r20
 478:	28 1b       	sub	r18, r24
 47a:	39 0b       	sbc	r19, r25
 47c:	30 93 3e 01 	sts	0x013E, r19	; 0x80013e <hour+0x1>
 480:	20 93 3d 01 	sts	0x013D, r18	; 0x80013d <hour>
 484:	08 95       	ret

00000486 <Service_Run>:


void Service_Run(){
	
	uint8_t StopWatchState;
	StopWatchState = Model_getStopWatchData();
 486:	b1 de       	rcall	.-670    	; 0x1ea <Model_getStopWatchData>
	
	if(StopWatchState == RESET){
 488:	82 30       	cpi	r24, 0x02	; 2
 48a:	81 f4       	brne	.+32     	; 0x4ac <Service_Run+0x26>
		milisec = 0;
 48c:	10 92 3c 01 	sts	0x013C, r1	; 0x80013c <milisec+0x1>
 490:	10 92 3b 01 	sts	0x013B, r1	; 0x80013b <milisec>
		sec = 0;
 494:	10 92 42 01 	sts	0x0142, r1	; 0x800142 <sec+0x1>
 498:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <sec>
		min = 0;
 49c:	10 92 40 01 	sts	0x0140, r1	; 0x800140 <min+0x1>
 4a0:	10 92 3f 01 	sts	0x013F, r1	; 0x80013f <min>
		hour = 0;
 4a4:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <hour+0x1>
 4a8:	10 92 3d 01 	sts	0x013D, r1	; 0x80013d <hour>
	}
	Presenter_dispStopWatchData(hour,min,sec,milisec);
 4ac:	20 91 3b 01 	lds	r18, 0x013B	; 0x80013b <milisec>
 4b0:	30 91 3c 01 	lds	r19, 0x013C	; 0x80013c <milisec+0x1>
 4b4:	40 91 41 01 	lds	r20, 0x0141	; 0x800141 <sec>
 4b8:	60 91 3f 01 	lds	r22, 0x013F	; 0x80013f <min>
 4bc:	80 91 3d 01 	lds	r24, 0x013D	; 0x80013d <hour>
 4c0:	9d ce       	rjmp	.-710    	; 0x1fc <Presenter_dispStopWatchData>
 4c2:	08 95       	ret

000004c4 <Button_init>:
﻿#include "button.h"


void Button_init(button_t *btn, volatile uint8_t *ddr, volatile uint8_t *pin, uint8_t pinnum){
 4c4:	fc 01       	movw	r30, r24
 4c6:	cb 01       	movw	r24, r22
	btn ->DDR =ddr;
 4c8:	71 83       	std	Z+1, r23	; 0x01
 4ca:	60 83       	st	Z, r22
	btn->PIN = pin;
 4cc:	53 83       	std	Z+3, r21	; 0x03
 4ce:	42 83       	std	Z+2, r20	; 0x02
	btn->pinNum = pinnum;
 4d0:	25 83       	std	Z+5, r18	; 0x05
	btn->pS = 1;
 4d2:	31 e0       	ldi	r19, 0x01	; 1
 4d4:	34 83       	std	Z+4, r19	; 0x04
	Gpio_initPin(ddr,1,pinnum);
 4d6:	42 2f       	mov	r20, r18
 4d8:	61 e0       	ldi	r22, 0x01	; 1
 4da:	f8 c1       	rjmp	.+1008   	; 0x8cc <Gpio_initPin>
 4dc:	08 95       	ret

000004de <button_getstate>:
	
}

uint8_t button_getstate(button_t *btn){
 4de:	fc 01       	movw	r30, r24
	
	uint8_t curState = *btn->PIN &(1<<btn->pinNum);
 4e0:	a2 81       	ldd	r26, Z+2	; 0x02
 4e2:	b3 81       	ldd	r27, Z+3	; 0x03
 4e4:	8c 91       	ld	r24, X
 4e6:	21 e0       	ldi	r18, 0x01	; 1
 4e8:	30 e0       	ldi	r19, 0x00	; 0
 4ea:	05 80       	ldd	r0, Z+5	; 0x05
 4ec:	02 c0       	rjmp	.+4      	; 0x4f2 <button_getstate+0x14>
 4ee:	22 0f       	add	r18, r18
 4f0:	33 1f       	adc	r19, r19
 4f2:	0a 94       	dec	r0
 4f4:	e2 f7       	brpl	.-8      	; 0x4ee <button_getstate+0x10>
 4f6:	28 23       	and	r18, r24
	if ((curState == 0) &&(btn->pS = 1)){
 4f8:	59 f4       	brne	.+22     	; 0x510 <button_getstate+0x32>
 4fa:	81 e0       	ldi	r24, 0x01	; 1
 4fc:	84 83       	std	Z+4, r24	; 0x04
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 4fe:	8f e3       	ldi	r24, 0x3F	; 63
 500:	9c e9       	ldi	r25, 0x9C	; 156
 502:	01 97       	sbiw	r24, 0x01	; 1
 504:	f1 f7       	brne	.-4      	; 0x502 <button_getstate+0x24>
 506:	00 c0       	rjmp	.+0      	; 0x508 <button_getstate+0x2a>
 508:	00 00       	nop
		_delay_ms(10);
		btn->pS = PUSHED;
 50a:	14 82       	std	Z+4, r1	; 0x04
		
		
		return ACT_PUSHED;
 50c:	80 e0       	ldi	r24, 0x00	; 0
 50e:	08 95       	ret
	}
	else if ((curState != 0 )&&(btn->pS == 0)){
 510:	22 23       	and	r18, r18
 512:	61 f0       	breq	.+24     	; 0x52c <button_getstate+0x4e>
 514:	84 81       	ldd	r24, Z+4	; 0x04
 516:	81 11       	cpse	r24, r1
 518:	0b c0       	rjmp	.+22     	; 0x530 <button_getstate+0x52>
 51a:	8f e3       	ldi	r24, 0x3F	; 63
 51c:	9c e9       	ldi	r25, 0x9C	; 156
 51e:	01 97       	sbiw	r24, 0x01	; 1
 520:	f1 f7       	brne	.-4      	; 0x51e <button_getstate+0x40>
 522:	00 c0       	rjmp	.+0      	; 0x524 <button_getstate+0x46>
 524:	00 00       	nop
		_delay_ms(10);
		btn->pS = RELEASED;
 526:	81 e0       	ldi	r24, 0x01	; 1
 528:	84 83       	std	Z+4, r24	; 0x04
		return ACT_RELEASED;
 52a:	08 95       	ret
	}
	
	return ACT_NONE;
 52c:	82 e0       	ldi	r24, 0x02	; 2
 52e:	08 95       	ret
 530:	82 e0       	ldi	r24, 0x02	; 2
 532:	08 95       	ret

00000534 <FND_init>:

void FND_colonON(){
	fndColonFlag = 1;
}
void FND_colonOFF(){
	fndColonFlag = 0;
 534:	82 b1       	in	r24, 0x02	; 2
 536:	80 6f       	ori	r24, 0xF0	; 240
 538:	82 b9       	out	0x02, r24	; 2
 53a:	8f ef       	ldi	r24, 0xFF	; 255
 53c:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
 540:	08 95       	ret

00000542 <FND_dispNum>:
}

void FND_dispNum(uint16_t fndNum){
 542:	0f 93       	push	r16
 544:	1f 93       	push	r17
 546:	cf 93       	push	r28
 548:	df 93       	push	r29
 54a:	cd b7       	in	r28, 0x3d	; 61
 54c:	de b7       	in	r29, 0x3e	; 62
 54e:	2b 97       	sbiw	r28, 0x0b	; 11
 550:	0f b6       	in	r0, 0x3f	; 63
 552:	f8 94       	cli
 554:	de bf       	out	0x3e, r29	; 62
 556:	0f be       	out	0x3f, r0	; 63
 558:	cd bf       	out	0x3d, r28	; 61
 55a:	8c 01       	movw	r16, r24
	
	uint8_t fndFont[] = {0x3f,0x06,0x5b,0x4f,0x66,0x6d,0x7d,0x07,0x7f,0x6f,0x80};
 55c:	8b e0       	ldi	r24, 0x0B	; 11
 55e:	e0 e0       	ldi	r30, 0x00	; 0
 560:	f1 e0       	ldi	r31, 0x01	; 1
 562:	de 01       	movw	r26, r28
 564:	11 96       	adiw	r26, 0x01	; 1
 566:	01 90       	ld	r0, Z+
 568:	0d 92       	st	X+, r0
 56a:	8a 95       	dec	r24
 56c:	e1 f7       	brne	.-8      	; 0x566 <FND_dispNum+0x24>
	
	static uint8_t fndDigitState = 0;
	
	fndDigitState = (fndDigitState+1)%5;
 56e:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <__data_end>
 572:	90 e0       	ldi	r25, 0x00	; 0
 574:	01 96       	adiw	r24, 0x01	; 1
 576:	65 e0       	ldi	r22, 0x05	; 5
 578:	70 e0       	ldi	r23, 0x00	; 0
 57a:	f5 d1       	rcall	.+1002   	; 0x966 <__divmodhi4>
 57c:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <__data_end>
	
	switch (fndDigitState)
 580:	82 30       	cpi	r24, 0x02	; 2
 582:	09 f4       	brne	.+2      	; 0x586 <FND_dispNum+0x44>
 584:	78 c0       	rjmp	.+240    	; 0x676 <FND_dispNum+0x134>
 586:	30 f4       	brcc	.+12     	; 0x594 <FND_dispNum+0x52>
 588:	88 23       	and	r24, r24
 58a:	59 f0       	breq	.+22     	; 0x5a2 <FND_dispNum+0x60>
 58c:	81 30       	cpi	r24, 0x01	; 1
 58e:	09 f4       	brne	.+2      	; 0x592 <FND_dispNum+0x50>
 590:	40 c0       	rjmp	.+128    	; 0x612 <FND_dispNum+0xd0>
 592:	d7 c0       	rjmp	.+430    	; 0x742 <FND_dispNum+0x200>
 594:	83 30       	cpi	r24, 0x03	; 3
 596:	09 f4       	brne	.+2      	; 0x59a <FND_dispNum+0x58>
 598:	9e c0       	rjmp	.+316    	; 0x6d6 <FND_dispNum+0x194>
 59a:	84 30       	cpi	r24, 0x04	; 4
 59c:	09 f4       	brne	.+2      	; 0x5a0 <FND_dispNum+0x5e>
 59e:	c2 c0       	rjmp	.+388    	; 0x724 <FND_dispNum+0x1e2>
 5a0:	d0 c0       	rjmp	.+416    	; 0x742 <FND_dispNum+0x200>
	{
		case 0:
		PORTE |= ((1<<7)|(1<<6)|(1<<5)|(1<<4));
 5a2:	83 b1       	in	r24, 0x03	; 3
 5a4:	80 6f       	ori	r24, 0xF0	; 240
 5a6:	83 b9       	out	0x03, r24	; 3
		PORTF = fndFont[fndNum/1000%10];
 5a8:	98 01       	movw	r18, r16
 5aa:	36 95       	lsr	r19
 5ac:	27 95       	ror	r18
 5ae:	36 95       	lsr	r19
 5b0:	27 95       	ror	r18
 5b2:	36 95       	lsr	r19
 5b4:	27 95       	ror	r18
 5b6:	a5 ec       	ldi	r26, 0xC5	; 197
 5b8:	b0 e2       	ldi	r27, 0x20	; 32
 5ba:	e8 d1       	rcall	.+976    	; 0x98c <__umulhisi3>
 5bc:	ac 01       	movw	r20, r24
 5be:	52 95       	swap	r21
 5c0:	42 95       	swap	r20
 5c2:	4f 70       	andi	r20, 0x0F	; 15
 5c4:	45 27       	eor	r20, r21
 5c6:	5f 70       	andi	r21, 0x0F	; 15
 5c8:	45 27       	eor	r20, r21
 5ca:	9a 01       	movw	r18, r20
 5cc:	ad ec       	ldi	r26, 0xCD	; 205
 5ce:	bc ec       	ldi	r27, 0xCC	; 204
 5d0:	dd d1       	rcall	.+954    	; 0x98c <__umulhisi3>
 5d2:	96 95       	lsr	r25
 5d4:	87 95       	ror	r24
 5d6:	96 95       	lsr	r25
 5d8:	87 95       	ror	r24
 5da:	96 95       	lsr	r25
 5dc:	87 95       	ror	r24
 5de:	9c 01       	movw	r18, r24
 5e0:	22 0f       	add	r18, r18
 5e2:	33 1f       	adc	r19, r19
 5e4:	88 0f       	add	r24, r24
 5e6:	99 1f       	adc	r25, r25
 5e8:	88 0f       	add	r24, r24
 5ea:	99 1f       	adc	r25, r25
 5ec:	88 0f       	add	r24, r24
 5ee:	99 1f       	adc	r25, r25
 5f0:	82 0f       	add	r24, r18
 5f2:	93 1f       	adc	r25, r19
 5f4:	9a 01       	movw	r18, r20
 5f6:	28 1b       	sub	r18, r24
 5f8:	39 0b       	sbc	r19, r25
 5fa:	e1 e0       	ldi	r30, 0x01	; 1
 5fc:	f0 e0       	ldi	r31, 0x00	; 0
 5fe:	ec 0f       	add	r30, r28
 600:	fd 1f       	adc	r31, r29
 602:	e2 0f       	add	r30, r18
 604:	f3 1f       	adc	r31, r19
 606:	80 81       	ld	r24, Z
 608:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
		PORTE = ~(1<<4);
 60c:	8f ee       	ldi	r24, 0xEF	; 239
 60e:	83 b9       	out	0x03, r24	; 3
		//_delay_ms(1);
		break;
 610:	98 c0       	rjmp	.+304    	; 0x742 <FND_dispNum+0x200>
		
		case 1:
		PORTE |= ((1<<7)|(1<<6)|(1<<5)|(1<<4));
 612:	83 b1       	in	r24, 0x03	; 3
 614:	80 6f       	ori	r24, 0xF0	; 240
 616:	83 b9       	out	0x03, r24	; 3
		PORTF = fndFont[fndNum/100%10];
 618:	98 01       	movw	r18, r16
 61a:	36 95       	lsr	r19
 61c:	27 95       	ror	r18
 61e:	36 95       	lsr	r19
 620:	27 95       	ror	r18
 622:	ab e7       	ldi	r26, 0x7B	; 123
 624:	b4 e1       	ldi	r27, 0x14	; 20
 626:	b2 d1       	rcall	.+868    	; 0x98c <__umulhisi3>
 628:	ac 01       	movw	r20, r24
 62a:	56 95       	lsr	r21
 62c:	47 95       	ror	r20
 62e:	9a 01       	movw	r18, r20
 630:	ad ec       	ldi	r26, 0xCD	; 205
 632:	bc ec       	ldi	r27, 0xCC	; 204
 634:	ab d1       	rcall	.+854    	; 0x98c <__umulhisi3>
 636:	96 95       	lsr	r25
 638:	87 95       	ror	r24
 63a:	96 95       	lsr	r25
 63c:	87 95       	ror	r24
 63e:	96 95       	lsr	r25
 640:	87 95       	ror	r24
 642:	9c 01       	movw	r18, r24
 644:	22 0f       	add	r18, r18
 646:	33 1f       	adc	r19, r19
 648:	88 0f       	add	r24, r24
 64a:	99 1f       	adc	r25, r25
 64c:	88 0f       	add	r24, r24
 64e:	99 1f       	adc	r25, r25
 650:	88 0f       	add	r24, r24
 652:	99 1f       	adc	r25, r25
 654:	82 0f       	add	r24, r18
 656:	93 1f       	adc	r25, r19
 658:	9a 01       	movw	r18, r20
 65a:	28 1b       	sub	r18, r24
 65c:	39 0b       	sbc	r19, r25
 65e:	e1 e0       	ldi	r30, 0x01	; 1
 660:	f0 e0       	ldi	r31, 0x00	; 0
 662:	ec 0f       	add	r30, r28
 664:	fd 1f       	adc	r31, r29
 666:	e2 0f       	add	r30, r18
 668:	f3 1f       	adc	r31, r19
 66a:	80 81       	ld	r24, Z
 66c:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
		PORTE = ~(1<<5);
 670:	8f ed       	ldi	r24, 0xDF	; 223
 672:	83 b9       	out	0x03, r24	; 3
		//_delay_ms(1);
		break;
 674:	66 c0       	rjmp	.+204    	; 0x742 <FND_dispNum+0x200>
		case 2:
		PORTE |= ((1<<7)|(1<<6)|(1<<5)|(1<<4));
 676:	83 b1       	in	r24, 0x03	; 3
 678:	80 6f       	ori	r24, 0xF0	; 240
		PORTF = fndFont[fndNum/10%10];
 67a:	83 b9       	out	0x03, r24	; 3
 67c:	98 01       	movw	r18, r16
 67e:	ad ec       	ldi	r26, 0xCD	; 205
 680:	bc ec       	ldi	r27, 0xCC	; 204
 682:	84 d1       	rcall	.+776    	; 0x98c <__umulhisi3>
 684:	ac 01       	movw	r20, r24
 686:	56 95       	lsr	r21
 688:	47 95       	ror	r20
 68a:	56 95       	lsr	r21
 68c:	47 95       	ror	r20
 68e:	56 95       	lsr	r21
 690:	47 95       	ror	r20
 692:	9a 01       	movw	r18, r20
 694:	7b d1       	rcall	.+758    	; 0x98c <__umulhisi3>
 696:	96 95       	lsr	r25
 698:	87 95       	ror	r24
 69a:	96 95       	lsr	r25
 69c:	87 95       	ror	r24
 69e:	96 95       	lsr	r25
 6a0:	87 95       	ror	r24
 6a2:	9c 01       	movw	r18, r24
 6a4:	22 0f       	add	r18, r18
 6a6:	33 1f       	adc	r19, r19
 6a8:	88 0f       	add	r24, r24
 6aa:	99 1f       	adc	r25, r25
 6ac:	88 0f       	add	r24, r24
 6ae:	99 1f       	adc	r25, r25
 6b0:	88 0f       	add	r24, r24
 6b2:	99 1f       	adc	r25, r25
 6b4:	82 0f       	add	r24, r18
 6b6:	93 1f       	adc	r25, r19
 6b8:	9a 01       	movw	r18, r20
 6ba:	28 1b       	sub	r18, r24
 6bc:	39 0b       	sbc	r19, r25
 6be:	e1 e0       	ldi	r30, 0x01	; 1
 6c0:	f0 e0       	ldi	r31, 0x00	; 0
 6c2:	ec 0f       	add	r30, r28
 6c4:	fd 1f       	adc	r31, r29
 6c6:	e2 0f       	add	r30, r18
 6c8:	f3 1f       	adc	r31, r19
 6ca:	80 81       	ld	r24, Z
 6cc:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
		PORTE = ~(1<<6);
 6d0:	8f eb       	ldi	r24, 0xBF	; 191
 6d2:	83 b9       	out	0x03, r24	; 3
		//_delay_ms(1);
		break;
		case 3:
		PORTE |= ((1<<7)|(1<<6)|(1<<5)|(1<<4));
 6d4:	36 c0       	rjmp	.+108    	; 0x742 <FND_dispNum+0x200>
 6d6:	83 b1       	in	r24, 0x03	; 3
 6d8:	80 6f       	ori	r24, 0xF0	; 240
		PORTF = fndFont[fndNum%10];
 6da:	83 b9       	out	0x03, r24	; 3
 6dc:	98 01       	movw	r18, r16
 6de:	ad ec       	ldi	r26, 0xCD	; 205
 6e0:	bc ec       	ldi	r27, 0xCC	; 204
 6e2:	54 d1       	rcall	.+680    	; 0x98c <__umulhisi3>
 6e4:	96 95       	lsr	r25
 6e6:	87 95       	ror	r24
 6e8:	96 95       	lsr	r25
 6ea:	87 95       	ror	r24
 6ec:	96 95       	lsr	r25
 6ee:	87 95       	ror	r24
 6f0:	9c 01       	movw	r18, r24
 6f2:	22 0f       	add	r18, r18
 6f4:	33 1f       	adc	r19, r19
 6f6:	88 0f       	add	r24, r24
 6f8:	99 1f       	adc	r25, r25
 6fa:	88 0f       	add	r24, r24
 6fc:	99 1f       	adc	r25, r25
 6fe:	88 0f       	add	r24, r24
 700:	99 1f       	adc	r25, r25
 702:	82 0f       	add	r24, r18
 704:	93 1f       	adc	r25, r19
 706:	98 01       	movw	r18, r16
 708:	28 1b       	sub	r18, r24
 70a:	39 0b       	sbc	r19, r25
 70c:	e1 e0       	ldi	r30, 0x01	; 1
 70e:	f0 e0       	ldi	r31, 0x00	; 0
 710:	ec 0f       	add	r30, r28
 712:	fd 1f       	adc	r31, r29
 714:	e2 0f       	add	r30, r18
 716:	f3 1f       	adc	r31, r19
 718:	80 81       	ld	r24, Z
 71a:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
		PORTE = ~(1<<7);
 71e:	8f e7       	ldi	r24, 0x7F	; 127
 720:	83 b9       	out	0x03, r24	; 3
		//_delay_ms(1);
		break;
 722:	0f c0       	rjmp	.+30     	; 0x742 <FND_dispNum+0x200>
		case 4:
		PORTE |= ((1<<7)|(1<<6)|(1<<5)|(1<<4));
 724:	83 b1       	in	r24, 0x03	; 3
 726:	80 6f       	ori	r24, 0xF0	; 240
 728:	83 b9       	out	0x03, r24	; 3
		if(fndColonFlag) {
 72a:	80 91 2b 01 	lds	r24, 0x012B	; 0x80012b <fndColonFlag>
 72e:	88 23       	and	r24, r24
 730:	21 f0       	breq	.+8      	; 0x73a <FND_dispNum+0x1f8>
			PORTF = fndFont[10];}
 732:	8b 85       	ldd	r24, Y+11	; 0x0b
 734:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 738:	02 c0       	rjmp	.+4      	; 0x73e <FND_dispNum+0x1fc>
		else{ 
		PORTF=0x00;
 73a:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
		}
		PORTE = ~(1<<5);
 73e:	8f ed       	ldi	r24, 0xDF	; 223
 740:	83 b9       	out	0x03, r24	; 3
		break;
	}
	
}
 742:	2b 96       	adiw	r28, 0x0b	; 11
 744:	0f b6       	in	r0, 0x3f	; 63
 746:	f8 94       	cli
 748:	de bf       	out	0x3e, r29	; 62
 74a:	0f be       	out	0x3f, r0	; 63
 74c:	cd bf       	out	0x3d, r28	; 61
 74e:	df 91       	pop	r29
 750:	cf 91       	pop	r28
 752:	1f 91       	pop	r17
 754:	0f 91       	pop	r16
 756:	08 95       	ret

00000758 <FND_setFndData>:

void FND_setFndData(uint16_t data){
	fndData = data;
 758:	90 93 2d 01 	sts	0x012D, r25	; 0x80012d <fndData+0x1>
 75c:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <fndData>
 760:	08 95       	ret

00000762 <FND_ISR_Process>:
}

void FND_ISR_Process(){
	FND_dispNum(fndData);
 762:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <fndData>
 766:	90 91 2d 01 	lds	r25, 0x012D	; 0x80012d <fndData+0x1>
 76a:	eb ce       	rjmp	.-554    	; 0x542 <FND_dispNum>
 76c:	08 95       	ret

0000076e <Gpio_init>:
}

void Gpio_init()
{
	//LCD_CONTROL_DDR |= (1<<LCD_RS) | (1<<LCD_RW) | (1<<LCD_E);
	Gpio_initPin(&LCD_CONTROL_DDR,OUTPUT,LCD_RS);
 76e:	45 e0       	ldi	r20, 0x05	; 5
 770:	60 e0       	ldi	r22, 0x00	; 0
 772:	87 e3       	ldi	r24, 0x37	; 55
 774:	90 e0       	ldi	r25, 0x00	; 0
 776:	aa d0       	rcall	.+340    	; 0x8cc <Gpio_initPin>
	Gpio_initPin(&LCD_CONTROL_DDR,OUTPUT,LCD_RW);
 778:	46 e0       	ldi	r20, 0x06	; 6
 77a:	60 e0       	ldi	r22, 0x00	; 0
 77c:	87 e3       	ldi	r24, 0x37	; 55
 77e:	90 e0       	ldi	r25, 0x00	; 0
 780:	a5 d0       	rcall	.+330    	; 0x8cc <Gpio_initPin>
	Gpio_initPin(&LCD_CONTROL_DDR,OUTPUT,LCD_E);
 782:	47 e0       	ldi	r20, 0x07	; 7
 784:	60 e0       	ldi	r22, 0x00	; 0
 786:	87 e3       	ldi	r24, 0x37	; 55
 788:	90 e0       	ldi	r25, 0x00	; 0
 78a:	a0 d0       	rcall	.+320    	; 0x8cc <Gpio_initPin>
	
	//LCD_DATA_DDR = 0xff;
	Gpio_initPort(&LCD_DATA_DDR,OUTPUT);
 78c:	60 e0       	ldi	r22, 0x00	; 0
 78e:	84 e3       	ldi	r24, 0x34	; 52
 790:	90 e0       	ldi	r25, 0x00	; 0
 792:	93 c0       	rjmp	.+294    	; 0x8ba <Gpio_initPort>
 794:	08 95       	ret

00000796 <LCD_cmdMode>:

void LCD_cmdMode()
{
	// RS pin : bit 0 set
	//LCD_CONTROL_PORT &= ~(1<<LCD_RS);
	Gpio_writePin(&LCD_CONTROL_PORT,LCD_RS,GPIO_PIN_RESET);
 796:	40 e0       	ldi	r20, 0x00	; 0
 798:	65 e0       	ldi	r22, 0x05	; 5
 79a:	88 e3       	ldi	r24, 0x38	; 56
 79c:	90 e0       	ldi	r25, 0x00	; 0
 79e:	b4 c0       	rjmp	.+360    	; 0x908 <Gpio_writePin>
 7a0:	08 95       	ret

000007a2 <LCD_charMode>:
}

void LCD_charMode()
{
	// RS pin : bit 0 set
	Gpio_writePin(&LCD_CONTROL_PORT,LCD_RS,GPIO_PIN_SET);
 7a2:	41 e0       	ldi	r20, 0x01	; 1
 7a4:	65 e0       	ldi	r22, 0x05	; 5
 7a6:	88 e3       	ldi	r24, 0x38	; 56
 7a8:	90 e0       	ldi	r25, 0x00	; 0
 7aa:	ae c0       	rjmp	.+348    	; 0x908 <Gpio_writePin>
 7ac:	08 95       	ret

000007ae <LCD_writeMode>:
}

void LCD_writeMode()
{
	// RW pin : bit 0 set
	Gpio_writePin(&LCD_CONTROL_PORT,LCD_RW,GPIO_PIN_RESET);
 7ae:	40 e0       	ldi	r20, 0x00	; 0
 7b0:	66 e0       	ldi	r22, 0x06	; 6
 7b2:	88 e3       	ldi	r24, 0x38	; 56
 7b4:	90 e0       	ldi	r25, 0x00	; 0
 7b6:	a8 c0       	rjmp	.+336    	; 0x908 <Gpio_writePin>
 7b8:	08 95       	ret

000007ba <LCD_enableHigh>:
}

void LCD_enableHigh()
{
	// E pin : bit 1 set
	Gpio_writePin(&LCD_CONTROL_PORT,LCD_E,GPIO_PIN_SET);
 7ba:	41 e0       	ldi	r20, 0x01	; 1
 7bc:	67 e0       	ldi	r22, 0x07	; 7
 7be:	88 e3       	ldi	r24, 0x38	; 56
 7c0:	90 e0       	ldi	r25, 0x00	; 0
 7c2:	a2 d0       	rcall	.+324    	; 0x908 <Gpio_writePin>
 7c4:	8f e9       	ldi	r24, 0x9F	; 159
 7c6:	9f e0       	ldi	r25, 0x0F	; 15
 7c8:	01 97       	sbiw	r24, 0x01	; 1
 7ca:	f1 f7       	brne	.-4      	; 0x7c8 <LCD_enableHigh+0xe>
 7cc:	00 c0       	rjmp	.+0      	; 0x7ce <LCD_enableHigh+0x14>
 7ce:	00 00       	nop
 7d0:	08 95       	ret

000007d2 <LCD_enableLow>:
}

void LCD_enableLow()
{
	// E pin : bit 0 set
	Gpio_writePin(&LCD_CONTROL_PORT,LCD_E,GPIO_PIN_RESET);
 7d2:	40 e0       	ldi	r20, 0x00	; 0
 7d4:	67 e0       	ldi	r22, 0x07	; 7
 7d6:	88 e3       	ldi	r24, 0x38	; 56
 7d8:	90 e0       	ldi	r25, 0x00	; 0
 7da:	96 d0       	rcall	.+300    	; 0x908 <Gpio_writePin>
 7dc:	8f e9       	ldi	r24, 0x9F	; 159
 7de:	9f e0       	ldi	r25, 0x0F	; 15
 7e0:	01 97       	sbiw	r24, 0x01	; 1
 7e2:	f1 f7       	brne	.-4      	; 0x7e0 <LCD_enableLow+0xe>
 7e4:	00 c0       	rjmp	.+0      	; 0x7e6 <LCD_enableLow+0x14>
 7e6:	00 00       	nop
 7e8:	08 95       	ret

000007ea <LCD_writeByte>:
}

void LCD_writeByte(uint8_t data)
{
	// 8 bit PORTC write
	Gpio_writePort(&LCD_DATA_PORT,data);
 7ea:	68 2f       	mov	r22, r24
 7ec:	85 e3       	ldi	r24, 0x35	; 53
 7ee:	90 e0       	ldi	r25, 0x00	; 0
 7f0:	88 c0       	rjmp	.+272    	; 0x902 <Gpio_writePort>
 7f2:	08 95       	ret

000007f4 <LCD_writeCmdData>:


// MCU -> LCD 명령어를 보낼 경우 (write mode)

void LCD_writeCmdData(uint8_t data)
{
 7f4:	cf 93       	push	r28
 7f6:	c8 2f       	mov	r28, r24
	// LCD 명령어 전달
	LCD_cmdMode();
 7f8:	ce df       	rcall	.-100    	; 0x796 <LCD_cmdMode>
	LCD_writeMode();
 7fa:	d9 df       	rcall	.-78     	; 0x7ae <LCD_writeMode>
	LCD_enableHigh();
 7fc:	de df       	rcall	.-68     	; 0x7ba <LCD_enableHigh>
	LCD_writeByte(data);
 7fe:	8c 2f       	mov	r24, r28
 800:	f4 df       	rcall	.-24     	; 0x7ea <LCD_writeByte>
 802:	e7 df       	rcall	.-50     	; 0x7d2 <LCD_enableLow>
	LCD_enableLow();
 804:	cf 91       	pop	r28
 806:	08 95       	ret

00000808 <LCD_init>:
	
}
 808:	b2 df       	rcall	.-156    	; 0x76e <Gpio_init>
 80a:	8f e5       	ldi	r24, 0x5F	; 95
 80c:	9a ee       	ldi	r25, 0xEA	; 234
 80e:	01 97       	sbiw	r24, 0x01	; 1
 810:	f1 f7       	brne	.-4      	; 0x80e <LCD_init+0x6>
 812:	00 c0       	rjmp	.+0      	; 0x814 <LCD_init+0xc>
 814:	00 00       	nop
void LCD_init()
{
	Gpio_init();
	
	_delay_ms(15);
	LCD_writeCmdData(LCD_8bit_FUNCTION_SET);   // LCD_8bit_FUNCTION_SET      0x38
 816:	88 e3       	ldi	r24, 0x38	; 56
 818:	ed df       	rcall	.-38     	; 0x7f4 <LCD_writeCmdData>
 81a:	8f e1       	ldi	r24, 0x1F	; 31
 81c:	9e e4       	ldi	r25, 0x4E	; 78
 81e:	01 97       	sbiw	r24, 0x01	; 1
 820:	f1 f7       	brne	.-4      	; 0x81e <LCD_init+0x16>
 822:	00 c0       	rjmp	.+0      	; 0x824 <LCD_init+0x1c>
	_delay_ms(5);
	LCD_writeCmdData(LCD_8bit_FUNCTION_SET);   // LCD_8bit_FUNCTION_SET      0x38
 824:	00 00       	nop
 826:	88 e3       	ldi	r24, 0x38	; 56
 828:	e5 df       	rcall	.-54     	; 0x7f4 <LCD_writeCmdData>
 82a:	8f e9       	ldi	r24, 0x9F	; 159
 82c:	9f e0       	ldi	r25, 0x0F	; 15
 82e:	01 97       	sbiw	r24, 0x01	; 1
 830:	f1 f7       	brne	.-4      	; 0x82e <LCD_init+0x26>
 832:	00 c0       	rjmp	.+0      	; 0x834 <LCD_init+0x2c>
	_delay_ms(1);
	LCD_writeCmdData(LCD_8bit_FUNCTION_SET);   // LCD_8bit_FUNCTION_SET      0x38
 834:	00 00       	nop
 836:	88 e3       	ldi	r24, 0x38	; 56
	LCD_writeCmdData(LCD_8bit_FUNCTION_SET);   // LCD_8bit_FUNCTION_SET      0x38
 838:	dd df       	rcall	.-70     	; 0x7f4 <LCD_writeCmdData>
 83a:	88 e3       	ldi	r24, 0x38	; 56
	LCD_writeCmdData(LCD_DISPLAY_OFF);         // LCD_DISPLAY_OFF            0x08
 83c:	db df       	rcall	.-74     	; 0x7f4 <LCD_writeCmdData>
 83e:	88 e0       	ldi	r24, 0x08	; 8
	LCD_writeCmdData(LCD_DISPLAY_CLEAR);      // LCD_DISPLAY_CLEAR         0x01
 840:	d9 df       	rcall	.-78     	; 0x7f4 <LCD_writeCmdData>
 842:	81 e0       	ldi	r24, 0x01	; 1
 844:	d7 df       	rcall	.-82     	; 0x7f4 <LCD_writeCmdData>
	LCD_writeCmdData(LCD_ENTRY_MODE_SET);      // LCD_ENTRY_MODE_SET         0x06
 846:	86 e0       	ldi	r24, 0x06	; 6
 848:	d5 df       	rcall	.-86     	; 0x7f4 <LCD_writeCmdData>
 84a:	8c e0       	ldi	r24, 0x0C	; 12
	LCD_writeCmdData(LCD_DISPLAY_ON);         // LCD_DISPLAY_ON            0x0C
 84c:	d3 cf       	rjmp	.-90     	; 0x7f4 <LCD_writeCmdData>
 84e:	08 95       	ret

00000850 <LCD_writeCharData>:
 850:	cf 93       	push	r28
 852:	c8 2f       	mov	r28, r24

// MCU -> LCD Data를 보낼 경우 (write mode)
void LCD_writeCharData(uint8_t data)
{
	// LCD Character 쓰기 전달
	LCD_charMode();
 854:	a6 df       	rcall	.-180    	; 0x7a2 <LCD_charMode>
	LCD_writeMode();
 856:	ab df       	rcall	.-170    	; 0x7ae <LCD_writeMode>
	LCD_enableHigh();
 858:	b0 df       	rcall	.-160    	; 0x7ba <LCD_enableHigh>
	LCD_writeByte(data);
 85a:	8c 2f       	mov	r24, r28
 85c:	c6 df       	rcall	.-116    	; 0x7ea <LCD_writeByte>
 85e:	b9 df       	rcall	.-142    	; 0x7d2 <LCD_enableLow>
	LCD_enableLow();
 860:	cf 91       	pop	r28
 862:	08 95       	ret

00000864 <LCD_writeString>:
}
 864:	0f 93       	push	r16
 866:	1f 93       	push	r17

void LCD_writeString(char *str)
{
 868:	cf 93       	push	r28
 86a:	df 93       	push	r29
 86c:	8c 01       	movw	r16, r24
	for(int i=0; str[i] ; i++)
 86e:	c0 e0       	ldi	r28, 0x00	; 0
 870:	d0 e0       	ldi	r29, 0x00	; 0
 872:	02 c0       	rjmp	.+4      	; 0x878 <LCD_writeString+0x14>
	{
		LCD_writeCharData(str[i]);
 874:	ed df       	rcall	.-38     	; 0x850 <LCD_writeCharData>
	LCD_enableLow();
}

void LCD_writeString(char *str)
{
	for(int i=0; str[i] ; i++)
 876:	21 96       	adiw	r28, 0x01	; 1
 878:	f8 01       	movw	r30, r16
 87a:	ec 0f       	add	r30, r28
 87c:	fd 1f       	adc	r31, r29
 87e:	80 81       	ld	r24, Z
 880:	81 11       	cpse	r24, r1
 882:	f8 cf       	rjmp	.-16     	; 0x874 <LCD_writeString+0x10>
	{
		LCD_writeCharData(str[i]);
	}
}
 884:	df 91       	pop	r29
 886:	cf 91       	pop	r28
 888:	1f 91       	pop	r17
 88a:	0f 91       	pop	r16
 88c:	08 95       	ret

0000088e <LCD_gotoXY>:

void LCD_gotoXY(uint8_t row, uint8_t col)
{
	col%= 16; row %=2;
 88e:	6f 70       	andi	r22, 0x0F	; 15
 890:	81 70       	andi	r24, 0x01	; 1
	uint8_t lcdregisterAddress = (0x40 * row ) + col;
 892:	90 e4       	ldi	r25, 0x40	; 64
 894:	89 9f       	mul	r24, r25
 896:	60 0d       	add	r22, r0
 898:	11 24       	eor	r1, r1
 89a:	86 2f       	mov	r24, r22
	uint8_t command = 0x80 + lcdregisterAddress;
	LCD_writeCmdData(command);
 89c:	80 58       	subi	r24, 0x80	; 128
 89e:	aa cf       	rjmp	.-172    	; 0x7f4 <LCD_writeCmdData>
 8a0:	08 95       	ret

000008a2 <LCD_writeStringXY>:
}

void LCD_writeStringXY(uint8_t row, uint8_t col, char *str)
{
 8a2:	cf 93       	push	r28
 8a4:	df 93       	push	r29
 8a6:	ea 01       	movw	r28, r20
	LCD_gotoXY(row,col);
 8a8:	f2 df       	rcall	.-28     	; 0x88e <LCD_gotoXY>
	LCD_writeString(str);
 8aa:	ce 01       	movw	r24, r28
 8ac:	db df       	rcall	.-74     	; 0x864 <LCD_writeString>
}
 8ae:	df 91       	pop	r29
 8b0:	cf 91       	pop	r28
 8b2:	08 95       	ret

000008b4 <main>:
#include <util/delay.h>


int main(void)
{
	apMain_init();
 8b4:	59 dc       	rcall	.-1870   	; 0x168 <apMain_init>
	
    while (1) 
    {
		apMain_execute();
 8b6:	62 dc       	rcall	.-1852   	; 0x17c <apMain_execute>
 8b8:	fe cf       	rjmp	.-4      	; 0x8b6 <main+0x2>

000008ba <Gpio_initPort>:
 8ba:	61 11       	cpse	r22, r1
﻿#include "GPIO.h"

void Gpio_initPort(volatile uint8_t*DDR, uint8_t dir ){
	
	if(dir == OUTPUT){
 8bc:	04 c0       	rjmp	.+8      	; 0x8c6 <Gpio_initPort+0xc>
		*DDR = 0xff;
 8be:	2f ef       	ldi	r18, 0xFF	; 255
 8c0:	fc 01       	movw	r30, r24
 8c2:	20 83       	st	Z, r18
 8c4:	08 95       	ret
	}
	else{
		*DDR =  0x00;
 8c6:	fc 01       	movw	r30, r24
 8c8:	10 82       	st	Z, r1
 8ca:	08 95       	ret

000008cc <Gpio_initPin>:
	
}

void Gpio_initPin(volatile uint8_t *DDR, uint8_t dir, uint8_t pinNum){
	
	if(dir == OUTPUT){
 8cc:	61 11       	cpse	r22, r1
 8ce:	0c c0       	rjmp	.+24     	; 0x8e8 <Gpio_initPin+0x1c>
		*DDR |= (1<<pinNum);
 8d0:	fc 01       	movw	r30, r24
 8d2:	50 81       	ld	r21, Z
 8d4:	21 e0       	ldi	r18, 0x01	; 1
 8d6:	30 e0       	ldi	r19, 0x00	; 0
 8d8:	02 c0       	rjmp	.+4      	; 0x8de <Gpio_initPin+0x12>
 8da:	22 0f       	add	r18, r18
 8dc:	33 1f       	adc	r19, r19
 8de:	4a 95       	dec	r20
 8e0:	e2 f7       	brpl	.-8      	; 0x8da <Gpio_initPin+0xe>
 8e2:	25 2b       	or	r18, r21
 8e4:	20 83       	st	Z, r18
 8e6:	08 95       	ret
	}
	else{
		*DDR &= ~(1<<pinNum); 
 8e8:	fc 01       	movw	r30, r24
 8ea:	50 81       	ld	r21, Z
 8ec:	21 e0       	ldi	r18, 0x01	; 1
 8ee:	30 e0       	ldi	r19, 0x00	; 0
 8f0:	02 c0       	rjmp	.+4      	; 0x8f6 <Gpio_initPin+0x2a>
 8f2:	22 0f       	add	r18, r18
 8f4:	33 1f       	adc	r19, r19
 8f6:	4a 95       	dec	r20
 8f8:	e2 f7       	brpl	.-8      	; 0x8f2 <Gpio_initPin+0x26>
 8fa:	20 95       	com	r18
 8fc:	25 23       	and	r18, r21
 8fe:	20 83       	st	Z, r18
 900:	08 95       	ret

00000902 <Gpio_writePort>:
	
}

void Gpio_writePort(volatile uint8_t *PORT, uint8_t data){
	
	*PORT = data;
 902:	fc 01       	movw	r30, r24
 904:	60 83       	st	Z, r22
 906:	08 95       	ret

00000908 <Gpio_writePin>:
	
}

void Gpio_writePin(volatile uint8_t *PORT, uint8_t pinNum, uint8_t State){
 908:	fc 01       	movw	r30, r24
	if(State == GPIO_PIN_SET){
 90a:	41 30       	cpi	r20, 0x01	; 1
 90c:	59 f4       	brne	.+22     	; 0x924 <Gpio_writePin+0x1c>
		*PORT |=(1<<pinNum);
 90e:	20 81       	ld	r18, Z
 910:	81 e0       	ldi	r24, 0x01	; 1
 912:	90 e0       	ldi	r25, 0x00	; 0
 914:	02 c0       	rjmp	.+4      	; 0x91a <Gpio_writePin+0x12>
 916:	88 0f       	add	r24, r24
 918:	99 1f       	adc	r25, r25
 91a:	6a 95       	dec	r22
 91c:	e2 f7       	brpl	.-8      	; 0x916 <Gpio_writePin+0xe>
 91e:	82 2b       	or	r24, r18
 920:	80 83       	st	Z, r24
 922:	08 95       	ret
	}
	else{
		*PORT &= ~(1<<pinNum);
 924:	90 81       	ld	r25, Z
 926:	21 e0       	ldi	r18, 0x01	; 1
 928:	30 e0       	ldi	r19, 0x00	; 0
 92a:	02 c0       	rjmp	.+4      	; 0x930 <Gpio_writePin+0x28>
 92c:	22 0f       	add	r18, r18
 92e:	33 1f       	adc	r19, r19
 930:	6a 95       	dec	r22
 932:	e2 f7       	brpl	.-8      	; 0x92c <Gpio_writePin+0x24>
 934:	20 95       	com	r18
 936:	29 23       	and	r18, r25
 938:	20 83       	st	Z, r18
 93a:	08 95       	ret

0000093c <TIM0_init>:
﻿#include "TIM.h"

void TIM0_init(){
	
	TCCR0 |= ((1<<CS02)|(0<<CS01)|(1<<CS00)); //128 preScaler
 93c:	83 b7       	in	r24, 0x33	; 51
 93e:	85 60       	ori	r24, 0x05	; 5
 940:	83 bf       	out	0x33, r24	; 51
	TIMSK |= (1<<TOIE0);					  //TIMSK Timer/counter
 942:	87 b7       	in	r24, 0x37	; 55
 944:	81 60       	ori	r24, 0x01	; 1
 946:	87 bf       	out	0x37, r24	; 55
	TCNT0=130;
 948:	82 e8       	ldi	r24, 0x82	; 130
 94a:	82 bf       	out	0x32, r24	; 50
 94c:	08 95       	ret

0000094e <TIM2_init>:
﻿#include "TIM2.h"

void TIM2_init(){
	
		//timer/counter 2 1/64 1ms period interrupt, ctc mode
		TCCR2 |= ((0<<CS22)|(1<<CS21)|(1<<CS20));	// 1/64 prescaler
 94e:	85 b5       	in	r24, 0x25	; 37
 950:	83 60       	ori	r24, 0x03	; 3
 952:	85 bd       	out	0x25, r24	; 37
		TIMSK |= (1<<OCIE2);
 954:	87 b7       	in	r24, 0x37	; 55
 956:	80 68       	ori	r24, 0x80	; 128
 958:	87 bf       	out	0x37, r24	; 55
		
		//CTC MODE
		TCCR2 |= ((1<<WGM21) | (0<<WGM20));
 95a:	85 b5       	in	r24, 0x25	; 37
 95c:	88 60       	ori	r24, 0x08	; 8
 95e:	85 bd       	out	0x25, r24	; 37
		OCR2 = 250-1;
 960:	89 ef       	ldi	r24, 0xF9	; 249
 962:	83 bd       	out	0x23, r24	; 35
 964:	08 95       	ret

00000966 <__divmodhi4>:
 966:	97 fb       	bst	r25, 7
 968:	07 2e       	mov	r0, r23
 96a:	16 f4       	brtc	.+4      	; 0x970 <__divmodhi4+0xa>
 96c:	00 94       	com	r0
 96e:	06 d0       	rcall	.+12     	; 0x97c <__divmodhi4_neg1>
 970:	77 fd       	sbrc	r23, 7
 972:	08 d0       	rcall	.+16     	; 0x984 <__divmodhi4_neg2>
 974:	1a d0       	rcall	.+52     	; 0x9aa <__udivmodhi4>
 976:	07 fc       	sbrc	r0, 7
 978:	05 d0       	rcall	.+10     	; 0x984 <__divmodhi4_neg2>
 97a:	3e f4       	brtc	.+14     	; 0x98a <__divmodhi4_exit>

0000097c <__divmodhi4_neg1>:
 97c:	90 95       	com	r25
 97e:	81 95       	neg	r24
 980:	9f 4f       	sbci	r25, 0xFF	; 255
 982:	08 95       	ret

00000984 <__divmodhi4_neg2>:
 984:	70 95       	com	r23
 986:	61 95       	neg	r22
 988:	7f 4f       	sbci	r23, 0xFF	; 255

0000098a <__divmodhi4_exit>:
 98a:	08 95       	ret

0000098c <__umulhisi3>:
 98c:	a2 9f       	mul	r26, r18
 98e:	b0 01       	movw	r22, r0
 990:	b3 9f       	mul	r27, r19
 992:	c0 01       	movw	r24, r0
 994:	a3 9f       	mul	r26, r19
 996:	70 0d       	add	r23, r0
 998:	81 1d       	adc	r24, r1
 99a:	11 24       	eor	r1, r1
 99c:	91 1d       	adc	r25, r1
 99e:	b2 9f       	mul	r27, r18
 9a0:	70 0d       	add	r23, r0
 9a2:	81 1d       	adc	r24, r1
 9a4:	11 24       	eor	r1, r1
 9a6:	91 1d       	adc	r25, r1
 9a8:	08 95       	ret

000009aa <__udivmodhi4>:
 9aa:	aa 1b       	sub	r26, r26
 9ac:	bb 1b       	sub	r27, r27
 9ae:	51 e1       	ldi	r21, 0x11	; 17
 9b0:	07 c0       	rjmp	.+14     	; 0x9c0 <__udivmodhi4_ep>

000009b2 <__udivmodhi4_loop>:
 9b2:	aa 1f       	adc	r26, r26
 9b4:	bb 1f       	adc	r27, r27
 9b6:	a6 17       	cp	r26, r22
 9b8:	b7 07       	cpc	r27, r23
 9ba:	10 f0       	brcs	.+4      	; 0x9c0 <__udivmodhi4_ep>
 9bc:	a6 1b       	sub	r26, r22
 9be:	b7 0b       	sbc	r27, r23

000009c0 <__udivmodhi4_ep>:
 9c0:	88 1f       	adc	r24, r24
 9c2:	99 1f       	adc	r25, r25
 9c4:	5a 95       	dec	r21
 9c6:	a9 f7       	brne	.-22     	; 0x9b2 <__udivmodhi4_loop>
 9c8:	80 95       	com	r24
 9ca:	90 95       	com	r25
 9cc:	bc 01       	movw	r22, r24
 9ce:	cd 01       	movw	r24, r26
 9d0:	08 95       	ret

000009d2 <sprintf>:
 9d2:	0f 93       	push	r16
 9d4:	1f 93       	push	r17
 9d6:	cf 93       	push	r28
 9d8:	df 93       	push	r29
 9da:	cd b7       	in	r28, 0x3d	; 61
 9dc:	de b7       	in	r29, 0x3e	; 62
 9de:	2e 97       	sbiw	r28, 0x0e	; 14
 9e0:	0f b6       	in	r0, 0x3f	; 63
 9e2:	f8 94       	cli
 9e4:	de bf       	out	0x3e, r29	; 62
 9e6:	0f be       	out	0x3f, r0	; 63
 9e8:	cd bf       	out	0x3d, r28	; 61
 9ea:	0d 89       	ldd	r16, Y+21	; 0x15
 9ec:	1e 89       	ldd	r17, Y+22	; 0x16
 9ee:	86 e0       	ldi	r24, 0x06	; 6
 9f0:	8c 83       	std	Y+4, r24	; 0x04
 9f2:	1a 83       	std	Y+2, r17	; 0x02
 9f4:	09 83       	std	Y+1, r16	; 0x01
 9f6:	8f ef       	ldi	r24, 0xFF	; 255
 9f8:	9f e7       	ldi	r25, 0x7F	; 127
 9fa:	9e 83       	std	Y+6, r25	; 0x06
 9fc:	8d 83       	std	Y+5, r24	; 0x05
 9fe:	ae 01       	movw	r20, r28
 a00:	47 5e       	subi	r20, 0xE7	; 231
 a02:	5f 4f       	sbci	r21, 0xFF	; 255
 a04:	6f 89       	ldd	r22, Y+23	; 0x17
 a06:	78 8d       	ldd	r23, Y+24	; 0x18
 a08:	ce 01       	movw	r24, r28
 a0a:	01 96       	adiw	r24, 0x01	; 1
 a0c:	10 d0       	rcall	.+32     	; 0xa2e <vfprintf>
 a0e:	ef 81       	ldd	r30, Y+7	; 0x07
 a10:	f8 85       	ldd	r31, Y+8	; 0x08
 a12:	e0 0f       	add	r30, r16
 a14:	f1 1f       	adc	r31, r17
 a16:	10 82       	st	Z, r1
 a18:	2e 96       	adiw	r28, 0x0e	; 14
 a1a:	0f b6       	in	r0, 0x3f	; 63
 a1c:	f8 94       	cli
 a1e:	de bf       	out	0x3e, r29	; 62
 a20:	0f be       	out	0x3f, r0	; 63
 a22:	cd bf       	out	0x3d, r28	; 61
 a24:	df 91       	pop	r29
 a26:	cf 91       	pop	r28
 a28:	1f 91       	pop	r17
 a2a:	0f 91       	pop	r16
 a2c:	08 95       	ret

00000a2e <vfprintf>:
 a2e:	2f 92       	push	r2
 a30:	3f 92       	push	r3
 a32:	4f 92       	push	r4
 a34:	5f 92       	push	r5
 a36:	6f 92       	push	r6
 a38:	7f 92       	push	r7
 a3a:	8f 92       	push	r8
 a3c:	9f 92       	push	r9
 a3e:	af 92       	push	r10
 a40:	bf 92       	push	r11
 a42:	cf 92       	push	r12
 a44:	df 92       	push	r13
 a46:	ef 92       	push	r14
 a48:	ff 92       	push	r15
 a4a:	0f 93       	push	r16
 a4c:	1f 93       	push	r17
 a4e:	cf 93       	push	r28
 a50:	df 93       	push	r29
 a52:	cd b7       	in	r28, 0x3d	; 61
 a54:	de b7       	in	r29, 0x3e	; 62
 a56:	2b 97       	sbiw	r28, 0x0b	; 11
 a58:	0f b6       	in	r0, 0x3f	; 63
 a5a:	f8 94       	cli
 a5c:	de bf       	out	0x3e, r29	; 62
 a5e:	0f be       	out	0x3f, r0	; 63
 a60:	cd bf       	out	0x3d, r28	; 61
 a62:	6c 01       	movw	r12, r24
 a64:	7b 01       	movw	r14, r22
 a66:	8a 01       	movw	r16, r20
 a68:	fc 01       	movw	r30, r24
 a6a:	17 82       	std	Z+7, r1	; 0x07
 a6c:	16 82       	std	Z+6, r1	; 0x06
 a6e:	83 81       	ldd	r24, Z+3	; 0x03
 a70:	81 ff       	sbrs	r24, 1
 a72:	bf c1       	rjmp	.+894    	; 0xdf2 <vfprintf+0x3c4>
 a74:	ce 01       	movw	r24, r28
 a76:	01 96       	adiw	r24, 0x01	; 1
 a78:	3c 01       	movw	r6, r24
 a7a:	f6 01       	movw	r30, r12
 a7c:	93 81       	ldd	r25, Z+3	; 0x03
 a7e:	f7 01       	movw	r30, r14
 a80:	93 fd       	sbrc	r25, 3
 a82:	85 91       	lpm	r24, Z+
 a84:	93 ff       	sbrs	r25, 3
 a86:	81 91       	ld	r24, Z+
 a88:	7f 01       	movw	r14, r30
 a8a:	88 23       	and	r24, r24
 a8c:	09 f4       	brne	.+2      	; 0xa90 <vfprintf+0x62>
 a8e:	ad c1       	rjmp	.+858    	; 0xdea <vfprintf+0x3bc>
 a90:	85 32       	cpi	r24, 0x25	; 37
 a92:	39 f4       	brne	.+14     	; 0xaa2 <vfprintf+0x74>
 a94:	93 fd       	sbrc	r25, 3
 a96:	85 91       	lpm	r24, Z+
 a98:	93 ff       	sbrs	r25, 3
 a9a:	81 91       	ld	r24, Z+
 a9c:	7f 01       	movw	r14, r30
 a9e:	85 32       	cpi	r24, 0x25	; 37
 aa0:	21 f4       	brne	.+8      	; 0xaaa <vfprintf+0x7c>
 aa2:	b6 01       	movw	r22, r12
 aa4:	90 e0       	ldi	r25, 0x00	; 0
 aa6:	d6 d1       	rcall	.+940    	; 0xe54 <fputc>
 aa8:	e8 cf       	rjmp	.-48     	; 0xa7a <vfprintf+0x4c>
 aaa:	91 2c       	mov	r9, r1
 aac:	21 2c       	mov	r2, r1
 aae:	31 2c       	mov	r3, r1
 ab0:	ff e1       	ldi	r31, 0x1F	; 31
 ab2:	f3 15       	cp	r31, r3
 ab4:	d8 f0       	brcs	.+54     	; 0xaec <vfprintf+0xbe>
 ab6:	8b 32       	cpi	r24, 0x2B	; 43
 ab8:	79 f0       	breq	.+30     	; 0xad8 <vfprintf+0xaa>
 aba:	38 f4       	brcc	.+14     	; 0xaca <vfprintf+0x9c>
 abc:	80 32       	cpi	r24, 0x20	; 32
 abe:	79 f0       	breq	.+30     	; 0xade <vfprintf+0xb0>
 ac0:	83 32       	cpi	r24, 0x23	; 35
 ac2:	a1 f4       	brne	.+40     	; 0xaec <vfprintf+0xbe>
 ac4:	23 2d       	mov	r18, r3
 ac6:	20 61       	ori	r18, 0x10	; 16
 ac8:	1d c0       	rjmp	.+58     	; 0xb04 <vfprintf+0xd6>
 aca:	8d 32       	cpi	r24, 0x2D	; 45
 acc:	61 f0       	breq	.+24     	; 0xae6 <vfprintf+0xb8>
 ace:	80 33       	cpi	r24, 0x30	; 48
 ad0:	69 f4       	brne	.+26     	; 0xaec <vfprintf+0xbe>
 ad2:	23 2d       	mov	r18, r3
 ad4:	21 60       	ori	r18, 0x01	; 1
 ad6:	16 c0       	rjmp	.+44     	; 0xb04 <vfprintf+0xd6>
 ad8:	83 2d       	mov	r24, r3
 ada:	82 60       	ori	r24, 0x02	; 2
 adc:	38 2e       	mov	r3, r24
 ade:	e3 2d       	mov	r30, r3
 ae0:	e4 60       	ori	r30, 0x04	; 4
 ae2:	3e 2e       	mov	r3, r30
 ae4:	2a c0       	rjmp	.+84     	; 0xb3a <vfprintf+0x10c>
 ae6:	f3 2d       	mov	r31, r3
 ae8:	f8 60       	ori	r31, 0x08	; 8
 aea:	1d c0       	rjmp	.+58     	; 0xb26 <vfprintf+0xf8>
 aec:	37 fc       	sbrc	r3, 7
 aee:	2d c0       	rjmp	.+90     	; 0xb4a <vfprintf+0x11c>
 af0:	20 ed       	ldi	r18, 0xD0	; 208
 af2:	28 0f       	add	r18, r24
 af4:	2a 30       	cpi	r18, 0x0A	; 10
 af6:	40 f0       	brcs	.+16     	; 0xb08 <vfprintf+0xda>
 af8:	8e 32       	cpi	r24, 0x2E	; 46
 afa:	b9 f4       	brne	.+46     	; 0xb2a <vfprintf+0xfc>
 afc:	36 fc       	sbrc	r3, 6
 afe:	75 c1       	rjmp	.+746    	; 0xdea <vfprintf+0x3bc>
 b00:	23 2d       	mov	r18, r3
 b02:	20 64       	ori	r18, 0x40	; 64
 b04:	32 2e       	mov	r3, r18
 b06:	19 c0       	rjmp	.+50     	; 0xb3a <vfprintf+0x10c>
 b08:	36 fe       	sbrs	r3, 6
 b0a:	06 c0       	rjmp	.+12     	; 0xb18 <vfprintf+0xea>
 b0c:	8a e0       	ldi	r24, 0x0A	; 10
 b0e:	98 9e       	mul	r9, r24
 b10:	20 0d       	add	r18, r0
 b12:	11 24       	eor	r1, r1
 b14:	92 2e       	mov	r9, r18
 b16:	11 c0       	rjmp	.+34     	; 0xb3a <vfprintf+0x10c>
 b18:	ea e0       	ldi	r30, 0x0A	; 10
 b1a:	2e 9e       	mul	r2, r30
 b1c:	20 0d       	add	r18, r0
 b1e:	11 24       	eor	r1, r1
 b20:	22 2e       	mov	r2, r18
 b22:	f3 2d       	mov	r31, r3
 b24:	f0 62       	ori	r31, 0x20	; 32
 b26:	3f 2e       	mov	r3, r31
 b28:	08 c0       	rjmp	.+16     	; 0xb3a <vfprintf+0x10c>
 b2a:	8c 36       	cpi	r24, 0x6C	; 108
 b2c:	21 f4       	brne	.+8      	; 0xb36 <vfprintf+0x108>
 b2e:	83 2d       	mov	r24, r3
 b30:	80 68       	ori	r24, 0x80	; 128
 b32:	38 2e       	mov	r3, r24
 b34:	02 c0       	rjmp	.+4      	; 0xb3a <vfprintf+0x10c>
 b36:	88 36       	cpi	r24, 0x68	; 104
 b38:	41 f4       	brne	.+16     	; 0xb4a <vfprintf+0x11c>
 b3a:	f7 01       	movw	r30, r14
 b3c:	93 fd       	sbrc	r25, 3
 b3e:	85 91       	lpm	r24, Z+
 b40:	93 ff       	sbrs	r25, 3
 b42:	81 91       	ld	r24, Z+
 b44:	7f 01       	movw	r14, r30
 b46:	81 11       	cpse	r24, r1
 b48:	b3 cf       	rjmp	.-154    	; 0xab0 <vfprintf+0x82>
 b4a:	98 2f       	mov	r25, r24
 b4c:	9f 7d       	andi	r25, 0xDF	; 223
 b4e:	95 54       	subi	r25, 0x45	; 69
 b50:	93 30       	cpi	r25, 0x03	; 3
 b52:	28 f4       	brcc	.+10     	; 0xb5e <vfprintf+0x130>
 b54:	0c 5f       	subi	r16, 0xFC	; 252
 b56:	1f 4f       	sbci	r17, 0xFF	; 255
 b58:	9f e3       	ldi	r25, 0x3F	; 63
 b5a:	99 83       	std	Y+1, r25	; 0x01
 b5c:	0d c0       	rjmp	.+26     	; 0xb78 <vfprintf+0x14a>
 b5e:	83 36       	cpi	r24, 0x63	; 99
 b60:	31 f0       	breq	.+12     	; 0xb6e <vfprintf+0x140>
 b62:	83 37       	cpi	r24, 0x73	; 115
 b64:	71 f0       	breq	.+28     	; 0xb82 <vfprintf+0x154>
 b66:	83 35       	cpi	r24, 0x53	; 83
 b68:	09 f0       	breq	.+2      	; 0xb6c <vfprintf+0x13e>
 b6a:	55 c0       	rjmp	.+170    	; 0xc16 <vfprintf+0x1e8>
 b6c:	20 c0       	rjmp	.+64     	; 0xbae <vfprintf+0x180>
 b6e:	f8 01       	movw	r30, r16
 b70:	80 81       	ld	r24, Z
 b72:	89 83       	std	Y+1, r24	; 0x01
 b74:	0e 5f       	subi	r16, 0xFE	; 254
 b76:	1f 4f       	sbci	r17, 0xFF	; 255
 b78:	88 24       	eor	r8, r8
 b7a:	83 94       	inc	r8
 b7c:	91 2c       	mov	r9, r1
 b7e:	53 01       	movw	r10, r6
 b80:	12 c0       	rjmp	.+36     	; 0xba6 <vfprintf+0x178>
 b82:	28 01       	movw	r4, r16
 b84:	f2 e0       	ldi	r31, 0x02	; 2
 b86:	4f 0e       	add	r4, r31
 b88:	51 1c       	adc	r5, r1
 b8a:	f8 01       	movw	r30, r16
 b8c:	a0 80       	ld	r10, Z
 b8e:	b1 80       	ldd	r11, Z+1	; 0x01
 b90:	36 fe       	sbrs	r3, 6
 b92:	03 c0       	rjmp	.+6      	; 0xb9a <vfprintf+0x16c>
 b94:	69 2d       	mov	r22, r9
 b96:	70 e0       	ldi	r23, 0x00	; 0
 b98:	02 c0       	rjmp	.+4      	; 0xb9e <vfprintf+0x170>
 b9a:	6f ef       	ldi	r22, 0xFF	; 255
 b9c:	7f ef       	ldi	r23, 0xFF	; 255
 b9e:	c5 01       	movw	r24, r10
 ba0:	4e d1       	rcall	.+668    	; 0xe3e <strnlen>
 ba2:	4c 01       	movw	r8, r24
 ba4:	82 01       	movw	r16, r4
 ba6:	f3 2d       	mov	r31, r3
 ba8:	ff 77       	andi	r31, 0x7F	; 127
 baa:	3f 2e       	mov	r3, r31
 bac:	15 c0       	rjmp	.+42     	; 0xbd8 <vfprintf+0x1aa>
 bae:	28 01       	movw	r4, r16
 bb0:	22 e0       	ldi	r18, 0x02	; 2
 bb2:	42 0e       	add	r4, r18
 bb4:	51 1c       	adc	r5, r1
 bb6:	f8 01       	movw	r30, r16
 bb8:	a0 80       	ld	r10, Z
 bba:	b1 80       	ldd	r11, Z+1	; 0x01
 bbc:	36 fe       	sbrs	r3, 6
 bbe:	03 c0       	rjmp	.+6      	; 0xbc6 <vfprintf+0x198>
 bc0:	69 2d       	mov	r22, r9
 bc2:	70 e0       	ldi	r23, 0x00	; 0
 bc4:	02 c0       	rjmp	.+4      	; 0xbca <vfprintf+0x19c>
 bc6:	6f ef       	ldi	r22, 0xFF	; 255
 bc8:	7f ef       	ldi	r23, 0xFF	; 255
 bca:	c5 01       	movw	r24, r10
 bcc:	2d d1       	rcall	.+602    	; 0xe28 <strnlen_P>
 bce:	4c 01       	movw	r8, r24
 bd0:	f3 2d       	mov	r31, r3
 bd2:	f0 68       	ori	r31, 0x80	; 128
 bd4:	3f 2e       	mov	r3, r31
 bd6:	82 01       	movw	r16, r4
 bd8:	33 fc       	sbrc	r3, 3
 bda:	19 c0       	rjmp	.+50     	; 0xc0e <vfprintf+0x1e0>
 bdc:	82 2d       	mov	r24, r2
 bde:	90 e0       	ldi	r25, 0x00	; 0
 be0:	88 16       	cp	r8, r24
 be2:	99 06       	cpc	r9, r25
 be4:	a0 f4       	brcc	.+40     	; 0xc0e <vfprintf+0x1e0>
 be6:	b6 01       	movw	r22, r12
 be8:	80 e2       	ldi	r24, 0x20	; 32
 bea:	90 e0       	ldi	r25, 0x00	; 0
 bec:	33 d1       	rcall	.+614    	; 0xe54 <fputc>
 bee:	2a 94       	dec	r2
 bf0:	f5 cf       	rjmp	.-22     	; 0xbdc <vfprintf+0x1ae>
 bf2:	f5 01       	movw	r30, r10
 bf4:	37 fc       	sbrc	r3, 7
 bf6:	85 91       	lpm	r24, Z+
 bf8:	37 fe       	sbrs	r3, 7
 bfa:	81 91       	ld	r24, Z+
 bfc:	5f 01       	movw	r10, r30
 bfe:	b6 01       	movw	r22, r12
 c00:	90 e0       	ldi	r25, 0x00	; 0
 c02:	28 d1       	rcall	.+592    	; 0xe54 <fputc>
 c04:	21 10       	cpse	r2, r1
 c06:	2a 94       	dec	r2
 c08:	21 e0       	ldi	r18, 0x01	; 1
 c0a:	82 1a       	sub	r8, r18
 c0c:	91 08       	sbc	r9, r1
 c0e:	81 14       	cp	r8, r1
 c10:	91 04       	cpc	r9, r1
 c12:	79 f7       	brne	.-34     	; 0xbf2 <vfprintf+0x1c4>
 c14:	e1 c0       	rjmp	.+450    	; 0xdd8 <vfprintf+0x3aa>
 c16:	84 36       	cpi	r24, 0x64	; 100
 c18:	11 f0       	breq	.+4      	; 0xc1e <vfprintf+0x1f0>
 c1a:	89 36       	cpi	r24, 0x69	; 105
 c1c:	39 f5       	brne	.+78     	; 0xc6c <vfprintf+0x23e>
 c1e:	f8 01       	movw	r30, r16
 c20:	37 fe       	sbrs	r3, 7
 c22:	07 c0       	rjmp	.+14     	; 0xc32 <vfprintf+0x204>
 c24:	60 81       	ld	r22, Z
 c26:	71 81       	ldd	r23, Z+1	; 0x01
 c28:	82 81       	ldd	r24, Z+2	; 0x02
 c2a:	93 81       	ldd	r25, Z+3	; 0x03
 c2c:	0c 5f       	subi	r16, 0xFC	; 252
 c2e:	1f 4f       	sbci	r17, 0xFF	; 255
 c30:	08 c0       	rjmp	.+16     	; 0xc42 <vfprintf+0x214>
 c32:	60 81       	ld	r22, Z
 c34:	71 81       	ldd	r23, Z+1	; 0x01
 c36:	07 2e       	mov	r0, r23
 c38:	00 0c       	add	r0, r0
 c3a:	88 0b       	sbc	r24, r24
 c3c:	99 0b       	sbc	r25, r25
 c3e:	0e 5f       	subi	r16, 0xFE	; 254
 c40:	1f 4f       	sbci	r17, 0xFF	; 255
 c42:	f3 2d       	mov	r31, r3
 c44:	ff 76       	andi	r31, 0x6F	; 111
 c46:	3f 2e       	mov	r3, r31
 c48:	97 ff       	sbrs	r25, 7
 c4a:	09 c0       	rjmp	.+18     	; 0xc5e <vfprintf+0x230>
 c4c:	90 95       	com	r25
 c4e:	80 95       	com	r24
 c50:	70 95       	com	r23
 c52:	61 95       	neg	r22
 c54:	7f 4f       	sbci	r23, 0xFF	; 255
 c56:	8f 4f       	sbci	r24, 0xFF	; 255
 c58:	9f 4f       	sbci	r25, 0xFF	; 255
 c5a:	f0 68       	ori	r31, 0x80	; 128
 c5c:	3f 2e       	mov	r3, r31
 c5e:	2a e0       	ldi	r18, 0x0A	; 10
 c60:	30 e0       	ldi	r19, 0x00	; 0
 c62:	a3 01       	movw	r20, r6
 c64:	33 d1       	rcall	.+614    	; 0xecc <__ultoa_invert>
 c66:	88 2e       	mov	r8, r24
 c68:	86 18       	sub	r8, r6
 c6a:	44 c0       	rjmp	.+136    	; 0xcf4 <vfprintf+0x2c6>
 c6c:	85 37       	cpi	r24, 0x75	; 117
 c6e:	31 f4       	brne	.+12     	; 0xc7c <vfprintf+0x24e>
 c70:	23 2d       	mov	r18, r3
 c72:	2f 7e       	andi	r18, 0xEF	; 239
 c74:	b2 2e       	mov	r11, r18
 c76:	2a e0       	ldi	r18, 0x0A	; 10
 c78:	30 e0       	ldi	r19, 0x00	; 0
 c7a:	25 c0       	rjmp	.+74     	; 0xcc6 <vfprintf+0x298>
 c7c:	93 2d       	mov	r25, r3
 c7e:	99 7f       	andi	r25, 0xF9	; 249
 c80:	b9 2e       	mov	r11, r25
 c82:	8f 36       	cpi	r24, 0x6F	; 111
 c84:	c1 f0       	breq	.+48     	; 0xcb6 <vfprintf+0x288>
 c86:	18 f4       	brcc	.+6      	; 0xc8e <vfprintf+0x260>
 c88:	88 35       	cpi	r24, 0x58	; 88
 c8a:	79 f0       	breq	.+30     	; 0xcaa <vfprintf+0x27c>
 c8c:	ae c0       	rjmp	.+348    	; 0xdea <vfprintf+0x3bc>
 c8e:	80 37       	cpi	r24, 0x70	; 112
 c90:	19 f0       	breq	.+6      	; 0xc98 <vfprintf+0x26a>
 c92:	88 37       	cpi	r24, 0x78	; 120
 c94:	21 f0       	breq	.+8      	; 0xc9e <vfprintf+0x270>
 c96:	a9 c0       	rjmp	.+338    	; 0xdea <vfprintf+0x3bc>
 c98:	e9 2f       	mov	r30, r25
 c9a:	e0 61       	ori	r30, 0x10	; 16
 c9c:	be 2e       	mov	r11, r30
 c9e:	b4 fe       	sbrs	r11, 4
 ca0:	0d c0       	rjmp	.+26     	; 0xcbc <vfprintf+0x28e>
 ca2:	fb 2d       	mov	r31, r11
 ca4:	f4 60       	ori	r31, 0x04	; 4
 ca6:	bf 2e       	mov	r11, r31
 ca8:	09 c0       	rjmp	.+18     	; 0xcbc <vfprintf+0x28e>
 caa:	34 fe       	sbrs	r3, 4
 cac:	0a c0       	rjmp	.+20     	; 0xcc2 <vfprintf+0x294>
 cae:	29 2f       	mov	r18, r25
 cb0:	26 60       	ori	r18, 0x06	; 6
 cb2:	b2 2e       	mov	r11, r18
 cb4:	06 c0       	rjmp	.+12     	; 0xcc2 <vfprintf+0x294>
 cb6:	28 e0       	ldi	r18, 0x08	; 8
 cb8:	30 e0       	ldi	r19, 0x00	; 0
 cba:	05 c0       	rjmp	.+10     	; 0xcc6 <vfprintf+0x298>
 cbc:	20 e1       	ldi	r18, 0x10	; 16
 cbe:	30 e0       	ldi	r19, 0x00	; 0
 cc0:	02 c0       	rjmp	.+4      	; 0xcc6 <vfprintf+0x298>
 cc2:	20 e1       	ldi	r18, 0x10	; 16
 cc4:	32 e0       	ldi	r19, 0x02	; 2
 cc6:	f8 01       	movw	r30, r16
 cc8:	b7 fe       	sbrs	r11, 7
 cca:	07 c0       	rjmp	.+14     	; 0xcda <vfprintf+0x2ac>
 ccc:	60 81       	ld	r22, Z
 cce:	71 81       	ldd	r23, Z+1	; 0x01
 cd0:	82 81       	ldd	r24, Z+2	; 0x02
 cd2:	93 81       	ldd	r25, Z+3	; 0x03
 cd4:	0c 5f       	subi	r16, 0xFC	; 252
 cd6:	1f 4f       	sbci	r17, 0xFF	; 255
 cd8:	06 c0       	rjmp	.+12     	; 0xce6 <vfprintf+0x2b8>
 cda:	60 81       	ld	r22, Z
 cdc:	71 81       	ldd	r23, Z+1	; 0x01
 cde:	80 e0       	ldi	r24, 0x00	; 0
 ce0:	90 e0       	ldi	r25, 0x00	; 0
 ce2:	0e 5f       	subi	r16, 0xFE	; 254
 ce4:	1f 4f       	sbci	r17, 0xFF	; 255
 ce6:	a3 01       	movw	r20, r6
 ce8:	f1 d0       	rcall	.+482    	; 0xecc <__ultoa_invert>
 cea:	88 2e       	mov	r8, r24
 cec:	86 18       	sub	r8, r6
 cee:	fb 2d       	mov	r31, r11
 cf0:	ff 77       	andi	r31, 0x7F	; 127
 cf2:	3f 2e       	mov	r3, r31
 cf4:	36 fe       	sbrs	r3, 6
 cf6:	0d c0       	rjmp	.+26     	; 0xd12 <vfprintf+0x2e4>
 cf8:	23 2d       	mov	r18, r3
 cfa:	2e 7f       	andi	r18, 0xFE	; 254
 cfc:	a2 2e       	mov	r10, r18
 cfe:	89 14       	cp	r8, r9
 d00:	58 f4       	brcc	.+22     	; 0xd18 <vfprintf+0x2ea>
 d02:	34 fe       	sbrs	r3, 4
 d04:	0b c0       	rjmp	.+22     	; 0xd1c <vfprintf+0x2ee>
 d06:	32 fc       	sbrc	r3, 2
 d08:	09 c0       	rjmp	.+18     	; 0xd1c <vfprintf+0x2ee>
 d0a:	83 2d       	mov	r24, r3
 d0c:	8e 7e       	andi	r24, 0xEE	; 238
 d0e:	a8 2e       	mov	r10, r24
 d10:	05 c0       	rjmp	.+10     	; 0xd1c <vfprintf+0x2ee>
 d12:	b8 2c       	mov	r11, r8
 d14:	a3 2c       	mov	r10, r3
 d16:	03 c0       	rjmp	.+6      	; 0xd1e <vfprintf+0x2f0>
 d18:	b8 2c       	mov	r11, r8
 d1a:	01 c0       	rjmp	.+2      	; 0xd1e <vfprintf+0x2f0>
 d1c:	b9 2c       	mov	r11, r9
 d1e:	a4 fe       	sbrs	r10, 4
 d20:	0f c0       	rjmp	.+30     	; 0xd40 <vfprintf+0x312>
 d22:	fe 01       	movw	r30, r28
 d24:	e8 0d       	add	r30, r8
 d26:	f1 1d       	adc	r31, r1
 d28:	80 81       	ld	r24, Z
 d2a:	80 33       	cpi	r24, 0x30	; 48
 d2c:	21 f4       	brne	.+8      	; 0xd36 <vfprintf+0x308>
 d2e:	9a 2d       	mov	r25, r10
 d30:	99 7e       	andi	r25, 0xE9	; 233
 d32:	a9 2e       	mov	r10, r25
 d34:	09 c0       	rjmp	.+18     	; 0xd48 <vfprintf+0x31a>
 d36:	a2 fe       	sbrs	r10, 2
 d38:	06 c0       	rjmp	.+12     	; 0xd46 <vfprintf+0x318>
 d3a:	b3 94       	inc	r11
 d3c:	b3 94       	inc	r11
 d3e:	04 c0       	rjmp	.+8      	; 0xd48 <vfprintf+0x31a>
 d40:	8a 2d       	mov	r24, r10
 d42:	86 78       	andi	r24, 0x86	; 134
 d44:	09 f0       	breq	.+2      	; 0xd48 <vfprintf+0x31a>
 d46:	b3 94       	inc	r11
 d48:	a3 fc       	sbrc	r10, 3
 d4a:	10 c0       	rjmp	.+32     	; 0xd6c <vfprintf+0x33e>
 d4c:	a0 fe       	sbrs	r10, 0
 d4e:	06 c0       	rjmp	.+12     	; 0xd5c <vfprintf+0x32e>
 d50:	b2 14       	cp	r11, r2
 d52:	80 f4       	brcc	.+32     	; 0xd74 <vfprintf+0x346>
 d54:	28 0c       	add	r2, r8
 d56:	92 2c       	mov	r9, r2
 d58:	9b 18       	sub	r9, r11
 d5a:	0d c0       	rjmp	.+26     	; 0xd76 <vfprintf+0x348>
 d5c:	b2 14       	cp	r11, r2
 d5e:	58 f4       	brcc	.+22     	; 0xd76 <vfprintf+0x348>
 d60:	b6 01       	movw	r22, r12
 d62:	80 e2       	ldi	r24, 0x20	; 32
 d64:	90 e0       	ldi	r25, 0x00	; 0
 d66:	76 d0       	rcall	.+236    	; 0xe54 <fputc>
 d68:	b3 94       	inc	r11
 d6a:	f8 cf       	rjmp	.-16     	; 0xd5c <vfprintf+0x32e>
 d6c:	b2 14       	cp	r11, r2
 d6e:	18 f4       	brcc	.+6      	; 0xd76 <vfprintf+0x348>
 d70:	2b 18       	sub	r2, r11
 d72:	02 c0       	rjmp	.+4      	; 0xd78 <vfprintf+0x34a>
 d74:	98 2c       	mov	r9, r8
 d76:	21 2c       	mov	r2, r1
 d78:	a4 fe       	sbrs	r10, 4
 d7a:	0f c0       	rjmp	.+30     	; 0xd9a <vfprintf+0x36c>
 d7c:	b6 01       	movw	r22, r12
 d7e:	80 e3       	ldi	r24, 0x30	; 48
 d80:	90 e0       	ldi	r25, 0x00	; 0
 d82:	68 d0       	rcall	.+208    	; 0xe54 <fputc>
 d84:	a2 fe       	sbrs	r10, 2
 d86:	16 c0       	rjmp	.+44     	; 0xdb4 <vfprintf+0x386>
 d88:	a1 fc       	sbrc	r10, 1
 d8a:	03 c0       	rjmp	.+6      	; 0xd92 <vfprintf+0x364>
 d8c:	88 e7       	ldi	r24, 0x78	; 120
 d8e:	90 e0       	ldi	r25, 0x00	; 0
 d90:	02 c0       	rjmp	.+4      	; 0xd96 <vfprintf+0x368>
 d92:	88 e5       	ldi	r24, 0x58	; 88
 d94:	90 e0       	ldi	r25, 0x00	; 0
 d96:	b6 01       	movw	r22, r12
 d98:	0c c0       	rjmp	.+24     	; 0xdb2 <vfprintf+0x384>
 d9a:	8a 2d       	mov	r24, r10
 d9c:	86 78       	andi	r24, 0x86	; 134
 d9e:	51 f0       	breq	.+20     	; 0xdb4 <vfprintf+0x386>
 da0:	a1 fe       	sbrs	r10, 1
 da2:	02 c0       	rjmp	.+4      	; 0xda8 <vfprintf+0x37a>
 da4:	8b e2       	ldi	r24, 0x2B	; 43
 da6:	01 c0       	rjmp	.+2      	; 0xdaa <vfprintf+0x37c>
 da8:	80 e2       	ldi	r24, 0x20	; 32
 daa:	a7 fc       	sbrc	r10, 7
 dac:	8d e2       	ldi	r24, 0x2D	; 45
 dae:	b6 01       	movw	r22, r12
 db0:	90 e0       	ldi	r25, 0x00	; 0
 db2:	50 d0       	rcall	.+160    	; 0xe54 <fputc>
 db4:	89 14       	cp	r8, r9
 db6:	30 f4       	brcc	.+12     	; 0xdc4 <vfprintf+0x396>
 db8:	b6 01       	movw	r22, r12
 dba:	80 e3       	ldi	r24, 0x30	; 48
 dbc:	90 e0       	ldi	r25, 0x00	; 0
 dbe:	4a d0       	rcall	.+148    	; 0xe54 <fputc>
 dc0:	9a 94       	dec	r9
 dc2:	f8 cf       	rjmp	.-16     	; 0xdb4 <vfprintf+0x386>
 dc4:	8a 94       	dec	r8
 dc6:	f3 01       	movw	r30, r6
 dc8:	e8 0d       	add	r30, r8
 dca:	f1 1d       	adc	r31, r1
 dcc:	80 81       	ld	r24, Z
 dce:	b6 01       	movw	r22, r12
 dd0:	90 e0       	ldi	r25, 0x00	; 0
 dd2:	40 d0       	rcall	.+128    	; 0xe54 <fputc>
 dd4:	81 10       	cpse	r8, r1
 dd6:	f6 cf       	rjmp	.-20     	; 0xdc4 <vfprintf+0x396>
 dd8:	22 20       	and	r2, r2
 dda:	09 f4       	brne	.+2      	; 0xdde <vfprintf+0x3b0>
 ddc:	4e ce       	rjmp	.-868    	; 0xa7a <vfprintf+0x4c>
 dde:	b6 01       	movw	r22, r12
 de0:	80 e2       	ldi	r24, 0x20	; 32
 de2:	90 e0       	ldi	r25, 0x00	; 0
 de4:	37 d0       	rcall	.+110    	; 0xe54 <fputc>
 de6:	2a 94       	dec	r2
 de8:	f7 cf       	rjmp	.-18     	; 0xdd8 <vfprintf+0x3aa>
 dea:	f6 01       	movw	r30, r12
 dec:	86 81       	ldd	r24, Z+6	; 0x06
 dee:	97 81       	ldd	r25, Z+7	; 0x07
 df0:	02 c0       	rjmp	.+4      	; 0xdf6 <vfprintf+0x3c8>
 df2:	8f ef       	ldi	r24, 0xFF	; 255
 df4:	9f ef       	ldi	r25, 0xFF	; 255
 df6:	2b 96       	adiw	r28, 0x0b	; 11
 df8:	0f b6       	in	r0, 0x3f	; 63
 dfa:	f8 94       	cli
 dfc:	de bf       	out	0x3e, r29	; 62
 dfe:	0f be       	out	0x3f, r0	; 63
 e00:	cd bf       	out	0x3d, r28	; 61
 e02:	df 91       	pop	r29
 e04:	cf 91       	pop	r28
 e06:	1f 91       	pop	r17
 e08:	0f 91       	pop	r16
 e0a:	ff 90       	pop	r15
 e0c:	ef 90       	pop	r14
 e0e:	df 90       	pop	r13
 e10:	cf 90       	pop	r12
 e12:	bf 90       	pop	r11
 e14:	af 90       	pop	r10
 e16:	9f 90       	pop	r9
 e18:	8f 90       	pop	r8
 e1a:	7f 90       	pop	r7
 e1c:	6f 90       	pop	r6
 e1e:	5f 90       	pop	r5
 e20:	4f 90       	pop	r4
 e22:	3f 90       	pop	r3
 e24:	2f 90       	pop	r2
 e26:	08 95       	ret

00000e28 <strnlen_P>:
 e28:	fc 01       	movw	r30, r24
 e2a:	05 90       	lpm	r0, Z+
 e2c:	61 50       	subi	r22, 0x01	; 1
 e2e:	70 40       	sbci	r23, 0x00	; 0
 e30:	01 10       	cpse	r0, r1
 e32:	d8 f7       	brcc	.-10     	; 0xe2a <strnlen_P+0x2>
 e34:	80 95       	com	r24
 e36:	90 95       	com	r25
 e38:	8e 0f       	add	r24, r30
 e3a:	9f 1f       	adc	r25, r31
 e3c:	08 95       	ret

00000e3e <strnlen>:
 e3e:	fc 01       	movw	r30, r24
 e40:	61 50       	subi	r22, 0x01	; 1
 e42:	70 40       	sbci	r23, 0x00	; 0
 e44:	01 90       	ld	r0, Z+
 e46:	01 10       	cpse	r0, r1
 e48:	d8 f7       	brcc	.-10     	; 0xe40 <strnlen+0x2>
 e4a:	80 95       	com	r24
 e4c:	90 95       	com	r25
 e4e:	8e 0f       	add	r24, r30
 e50:	9f 1f       	adc	r25, r31
 e52:	08 95       	ret

00000e54 <fputc>:
 e54:	0f 93       	push	r16
 e56:	1f 93       	push	r17
 e58:	cf 93       	push	r28
 e5a:	df 93       	push	r29
 e5c:	fb 01       	movw	r30, r22
 e5e:	23 81       	ldd	r18, Z+3	; 0x03
 e60:	21 fd       	sbrc	r18, 1
 e62:	03 c0       	rjmp	.+6      	; 0xe6a <fputc+0x16>
 e64:	8f ef       	ldi	r24, 0xFF	; 255
 e66:	9f ef       	ldi	r25, 0xFF	; 255
 e68:	2c c0       	rjmp	.+88     	; 0xec2 <fputc+0x6e>
 e6a:	22 ff       	sbrs	r18, 2
 e6c:	16 c0       	rjmp	.+44     	; 0xe9a <fputc+0x46>
 e6e:	46 81       	ldd	r20, Z+6	; 0x06
 e70:	57 81       	ldd	r21, Z+7	; 0x07
 e72:	24 81       	ldd	r18, Z+4	; 0x04
 e74:	35 81       	ldd	r19, Z+5	; 0x05
 e76:	42 17       	cp	r20, r18
 e78:	53 07       	cpc	r21, r19
 e7a:	44 f4       	brge	.+16     	; 0xe8c <fputc+0x38>
 e7c:	a0 81       	ld	r26, Z
 e7e:	b1 81       	ldd	r27, Z+1	; 0x01
 e80:	9d 01       	movw	r18, r26
 e82:	2f 5f       	subi	r18, 0xFF	; 255
 e84:	3f 4f       	sbci	r19, 0xFF	; 255
 e86:	31 83       	std	Z+1, r19	; 0x01
 e88:	20 83       	st	Z, r18
 e8a:	8c 93       	st	X, r24
 e8c:	26 81       	ldd	r18, Z+6	; 0x06
 e8e:	37 81       	ldd	r19, Z+7	; 0x07
 e90:	2f 5f       	subi	r18, 0xFF	; 255
 e92:	3f 4f       	sbci	r19, 0xFF	; 255
 e94:	37 83       	std	Z+7, r19	; 0x07
 e96:	26 83       	std	Z+6, r18	; 0x06
 e98:	14 c0       	rjmp	.+40     	; 0xec2 <fputc+0x6e>
 e9a:	8b 01       	movw	r16, r22
 e9c:	ec 01       	movw	r28, r24
 e9e:	fb 01       	movw	r30, r22
 ea0:	00 84       	ldd	r0, Z+8	; 0x08
 ea2:	f1 85       	ldd	r31, Z+9	; 0x09
 ea4:	e0 2d       	mov	r30, r0
 ea6:	09 95       	icall
 ea8:	89 2b       	or	r24, r25
 eaa:	e1 f6       	brne	.-72     	; 0xe64 <fputc+0x10>
 eac:	d8 01       	movw	r26, r16
 eae:	16 96       	adiw	r26, 0x06	; 6
 eb0:	8d 91       	ld	r24, X+
 eb2:	9c 91       	ld	r25, X
 eb4:	17 97       	sbiw	r26, 0x07	; 7
 eb6:	01 96       	adiw	r24, 0x01	; 1
 eb8:	17 96       	adiw	r26, 0x07	; 7
 eba:	9c 93       	st	X, r25
 ebc:	8e 93       	st	-X, r24
 ebe:	16 97       	sbiw	r26, 0x06	; 6
 ec0:	ce 01       	movw	r24, r28
 ec2:	df 91       	pop	r29
 ec4:	cf 91       	pop	r28
 ec6:	1f 91       	pop	r17
 ec8:	0f 91       	pop	r16
 eca:	08 95       	ret

00000ecc <__ultoa_invert>:
 ecc:	fa 01       	movw	r30, r20
 ece:	aa 27       	eor	r26, r26
 ed0:	28 30       	cpi	r18, 0x08	; 8
 ed2:	51 f1       	breq	.+84     	; 0xf28 <__ultoa_invert+0x5c>
 ed4:	20 31       	cpi	r18, 0x10	; 16
 ed6:	81 f1       	breq	.+96     	; 0xf38 <__ultoa_invert+0x6c>
 ed8:	e8 94       	clt
 eda:	6f 93       	push	r22
 edc:	6e 7f       	andi	r22, 0xFE	; 254
 ede:	6e 5f       	subi	r22, 0xFE	; 254
 ee0:	7f 4f       	sbci	r23, 0xFF	; 255
 ee2:	8f 4f       	sbci	r24, 0xFF	; 255
 ee4:	9f 4f       	sbci	r25, 0xFF	; 255
 ee6:	af 4f       	sbci	r26, 0xFF	; 255
 ee8:	b1 e0       	ldi	r27, 0x01	; 1
 eea:	3e d0       	rcall	.+124    	; 0xf68 <__ultoa_invert+0x9c>
 eec:	b4 e0       	ldi	r27, 0x04	; 4
 eee:	3c d0       	rcall	.+120    	; 0xf68 <__ultoa_invert+0x9c>
 ef0:	67 0f       	add	r22, r23
 ef2:	78 1f       	adc	r23, r24
 ef4:	89 1f       	adc	r24, r25
 ef6:	9a 1f       	adc	r25, r26
 ef8:	a1 1d       	adc	r26, r1
 efa:	68 0f       	add	r22, r24
 efc:	79 1f       	adc	r23, r25
 efe:	8a 1f       	adc	r24, r26
 f00:	91 1d       	adc	r25, r1
 f02:	a1 1d       	adc	r26, r1
 f04:	6a 0f       	add	r22, r26
 f06:	71 1d       	adc	r23, r1
 f08:	81 1d       	adc	r24, r1
 f0a:	91 1d       	adc	r25, r1
 f0c:	a1 1d       	adc	r26, r1
 f0e:	20 d0       	rcall	.+64     	; 0xf50 <__ultoa_invert+0x84>
 f10:	09 f4       	brne	.+2      	; 0xf14 <__ultoa_invert+0x48>
 f12:	68 94       	set
 f14:	3f 91       	pop	r19
 f16:	2a e0       	ldi	r18, 0x0A	; 10
 f18:	26 9f       	mul	r18, r22
 f1a:	11 24       	eor	r1, r1
 f1c:	30 19       	sub	r19, r0
 f1e:	30 5d       	subi	r19, 0xD0	; 208
 f20:	31 93       	st	Z+, r19
 f22:	de f6       	brtc	.-74     	; 0xeda <__ultoa_invert+0xe>
 f24:	cf 01       	movw	r24, r30
 f26:	08 95       	ret
 f28:	46 2f       	mov	r20, r22
 f2a:	47 70       	andi	r20, 0x07	; 7
 f2c:	40 5d       	subi	r20, 0xD0	; 208
 f2e:	41 93       	st	Z+, r20
 f30:	b3 e0       	ldi	r27, 0x03	; 3
 f32:	0f d0       	rcall	.+30     	; 0xf52 <__ultoa_invert+0x86>
 f34:	c9 f7       	brne	.-14     	; 0xf28 <__ultoa_invert+0x5c>
 f36:	f6 cf       	rjmp	.-20     	; 0xf24 <__ultoa_invert+0x58>
 f38:	46 2f       	mov	r20, r22
 f3a:	4f 70       	andi	r20, 0x0F	; 15
 f3c:	40 5d       	subi	r20, 0xD0	; 208
 f3e:	4a 33       	cpi	r20, 0x3A	; 58
 f40:	18 f0       	brcs	.+6      	; 0xf48 <__ultoa_invert+0x7c>
 f42:	49 5d       	subi	r20, 0xD9	; 217
 f44:	31 fd       	sbrc	r19, 1
 f46:	40 52       	subi	r20, 0x20	; 32
 f48:	41 93       	st	Z+, r20
 f4a:	02 d0       	rcall	.+4      	; 0xf50 <__ultoa_invert+0x84>
 f4c:	a9 f7       	brne	.-22     	; 0xf38 <__ultoa_invert+0x6c>
 f4e:	ea cf       	rjmp	.-44     	; 0xf24 <__ultoa_invert+0x58>
 f50:	b4 e0       	ldi	r27, 0x04	; 4
 f52:	a6 95       	lsr	r26
 f54:	97 95       	ror	r25
 f56:	87 95       	ror	r24
 f58:	77 95       	ror	r23
 f5a:	67 95       	ror	r22
 f5c:	ba 95       	dec	r27
 f5e:	c9 f7       	brne	.-14     	; 0xf52 <__ultoa_invert+0x86>
 f60:	00 97       	sbiw	r24, 0x00	; 0
 f62:	61 05       	cpc	r22, r1
 f64:	71 05       	cpc	r23, r1
 f66:	08 95       	ret
 f68:	9b 01       	movw	r18, r22
 f6a:	ac 01       	movw	r20, r24
 f6c:	0a 2e       	mov	r0, r26
 f6e:	06 94       	lsr	r0
 f70:	57 95       	ror	r21
 f72:	47 95       	ror	r20
 f74:	37 95       	ror	r19
 f76:	27 95       	ror	r18
 f78:	ba 95       	dec	r27
 f7a:	c9 f7       	brne	.-14     	; 0xf6e <__ultoa_invert+0xa2>
 f7c:	62 0f       	add	r22, r18
 f7e:	73 1f       	adc	r23, r19
 f80:	84 1f       	adc	r24, r20
 f82:	95 1f       	adc	r25, r21
 f84:	a0 1d       	adc	r26, r0
 f86:	08 95       	ret

00000f88 <_exit>:
 f88:	f8 94       	cli

00000f8a <__stop_program>:
 f8a:	ff cf       	rjmp	.-2      	; 0xf8a <__stop_program>
