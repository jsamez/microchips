
UART.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000016  00800100  000001ea  0000027e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001ea  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000066  00800116  00800116  00000294  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000294  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002c4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000088  00000000  00000000  00000304  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000b5d  00000000  00000000  0000038c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000991  00000000  00000000  00000ee9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000004d5  00000000  00000000  0000187a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000134  00000000  00000000  00001d50  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004e8  00000000  00000000  00001e84  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000016e  00000000  00000000  0000236c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000068  00000000  00000000  000024da  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3f c0       	rjmp	.+126    	; 0xc8 <__vector_18>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ea ee       	ldi	r30, 0xEA	; 234
  a0:	f1 e0       	ldi	r31, 0x01	; 1
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a6 31       	cpi	r26, 0x16	; 22
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a6 e1       	ldi	r26, 0x16	; 22
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	ac 37       	cpi	r26, 0x7C	; 124
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	29 d0       	rcall	.+82     	; 0x116 <main>
  c4:	90 c0       	rjmp	.+288    	; 0x1e6 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <__vector_18>:

#include "periph/UART0/UART0.h"


ISR(USART0_RX_vect)
{
  c8:	1f 92       	push	r1
  ca:	0f 92       	push	r0
  cc:	0f b6       	in	r0, 0x3f	; 63
  ce:	0f 92       	push	r0
  d0:	11 24       	eor	r1, r1
  d2:	0b b6       	in	r0, 0x3b	; 59
  d4:	0f 92       	push	r0
  d6:	2f 93       	push	r18
  d8:	3f 93       	push	r19
  da:	4f 93       	push	r20
  dc:	5f 93       	push	r21
  de:	6f 93       	push	r22
  e0:	7f 93       	push	r23
  e2:	8f 93       	push	r24
  e4:	9f 93       	push	r25
  e6:	af 93       	push	r26
  e8:	bf 93       	push	r27
  ea:	ef 93       	push	r30
  ec:	ff 93       	push	r31
	UART0_ISR_PROCESS();
  ee:	36 d0       	rcall	.+108    	; 0x15c <UART0_ISR_PROCESS>
}
  f0:	ff 91       	pop	r31
  f2:	ef 91       	pop	r30
  f4:	bf 91       	pop	r27
  f6:	af 91       	pop	r26
  f8:	9f 91       	pop	r25
  fa:	8f 91       	pop	r24
  fc:	7f 91       	pop	r23
  fe:	6f 91       	pop	r22
 100:	5f 91       	pop	r21
 102:	4f 91       	pop	r20
 104:	3f 91       	pop	r19
 106:	2f 91       	pop	r18
 108:	0f 90       	pop	r0
 10a:	0b be       	out	0x3b, r0	; 59
 10c:	0f 90       	pop	r0
 10e:	0f be       	out	0x3f, r0	; 63
 110:	0f 90       	pop	r0
 112:	1f 90       	pop	r1
 114:	18 95       	reti

00000116 <main>:

int main(void)
{
	
	sei();
 116:	78 94       	sei
	UART0_init();
 118:	15 d0       	rcall	.+42     	; 0x144 <UART0_init>
	
    while (1) 
    {	UART0_SendString("TEST\n");
 11a:	80 e0       	ldi	r24, 0x00	; 0
 11c:	91 e0       	ldi	r25, 0x01	; 1
		
		if(UART0_RxFlag()){
 11e:	42 d0       	rcall	.+132    	; 0x1a4 <UART0_SendString>
 120:	56 d0       	rcall	.+172    	; 0x1ce <UART0_RxFlag>
 122:	88 23       	and	r24, r24
			UART0_ResetRxFlag();
 124:	29 f0       	breq	.+10     	; 0x130 <main+0x1a>
			UART0_SendString("Receive Data : ");	
 126:	58 d0       	rcall	.+176    	; 0x1d8 <UART0_ResetRxFlag>
 128:	86 e0       	ldi	r24, 0x06	; 6
 12a:	91 e0       	ldi	r25, 0x01	; 1
 12c:	3b d0       	rcall	.+118    	; 0x1a4 <UART0_SendString>
			UART0_WriteRxBuff();
 12e:	57 d0       	rcall	.+174    	; 0x1de <UART0_WriteRxBuff>
 130:	2f ef       	ldi	r18, 0xFF	; 255
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 132:	83 ed       	ldi	r24, 0xD3	; 211
 134:	90 e3       	ldi	r25, 0x30	; 48
 136:	21 50       	subi	r18, 0x01	; 1
 138:	80 40       	sbci	r24, 0x00	; 0
 13a:	90 40       	sbci	r25, 0x00	; 0
 13c:	e1 f7       	brne	.-8      	; 0x136 <main+0x20>
 13e:	00 c0       	rjmp	.+0      	; 0x140 <main+0x2a>
 140:	00 00       	nop
 142:	eb cf       	rjmp	.-42     	; 0x11a <main+0x4>

00000144 <UART0_init>:
 144:	8a b1       	in	r24, 0x0a	; 10
	if (!(UCSR0A & (1<<RXC0)))
	{
		return 0;
	}
	return 1;
}
 146:	88 61       	ori	r24, 0x18	; 24
 148:	8a b9       	out	0x0a, r24	; 10
 14a:	8b b1       	in	r24, 0x0b	; 11
 14c:	82 60       	ori	r24, 0x02	; 2
 14e:	8b b9       	out	0x0b, r24	; 11
 150:	8a b1       	in	r24, 0x0a	; 10
 152:	80 68       	ori	r24, 0x80	; 128
 154:	8a b9       	out	0x0a, r24	; 10
 156:	8f ec       	ldi	r24, 0xCF	; 207
 158:	89 b9       	out	0x09, r24	; 9
 15a:	08 95       	ret

0000015c <UART0_ISR_PROCESS>:
 15c:	9c b1       	in	r25, 0x0c	; 12
 15e:	9a 30       	cpi	r25, 0x0A	; 10
 160:	91 f4       	brne	.+36     	; 0x186 <UART0_ISR_PROCESS+0x2a>
 162:	e0 91 16 01 	lds	r30, 0x0116	; 0x800116 <__data_end>
 166:	ae 2f       	mov	r26, r30
 168:	b0 e0       	ldi	r27, 0x00	; 0
 16a:	a9 5e       	subi	r26, 0xE9	; 233
 16c:	be 4f       	sbci	r27, 0xFE	; 254
 16e:	9c 93       	st	X, r25
 170:	ef 5f       	subi	r30, 0xFF	; 255
 172:	f0 e0       	ldi	r31, 0x00	; 0
 174:	e9 5e       	subi	r30, 0xE9	; 233
 176:	fe 4f       	sbci	r31, 0xFE	; 254
 178:	10 82       	st	Z, r1
 17a:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <__data_end>
 17e:	81 e0       	ldi	r24, 0x01	; 1
 180:	80 93 7b 01 	sts	0x017B, r24	; 0x80017b <uart0RxFlag>
 184:	08 95       	ret
 186:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <__data_end>
 18a:	e8 2f       	mov	r30, r24
 18c:	f0 e0       	ldi	r31, 0x00	; 0
 18e:	e9 5e       	subi	r30, 0xE9	; 233
 190:	fe 4f       	sbci	r31, 0xFE	; 254
 192:	90 83       	st	Z, r25
 194:	8f 5f       	subi	r24, 0xFF	; 255
 196:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <__data_end>
 19a:	08 95       	ret

0000019c <UART0_Transmit>:
 19c:	5d 9b       	sbis	0x0b, 5	; 11
 19e:	fe cf       	rjmp	.-4      	; 0x19c <UART0_Transmit>
 1a0:	8c b9       	out	0x0c, r24	; 12
 1a2:	08 95       	ret

000001a4 <UART0_SendString>:
 1a4:	0f 93       	push	r16
 1a6:	1f 93       	push	r17
 1a8:	cf 93       	push	r28
 1aa:	df 93       	push	r29
 1ac:	8c 01       	movw	r16, r24
 1ae:	c0 e0       	ldi	r28, 0x00	; 0
 1b0:	d0 e0       	ldi	r29, 0x00	; 0
 1b2:	02 c0       	rjmp	.+4      	; 0x1b8 <UART0_SendString+0x14>
 1b4:	f3 df       	rcall	.-26     	; 0x19c <UART0_Transmit>
 1b6:	21 96       	adiw	r28, 0x01	; 1
 1b8:	f8 01       	movw	r30, r16
 1ba:	ec 0f       	add	r30, r28
 1bc:	fd 1f       	adc	r31, r29
 1be:	80 81       	ld	r24, Z
 1c0:	81 11       	cpse	r24, r1
 1c2:	f8 cf       	rjmp	.-16     	; 0x1b4 <UART0_SendString+0x10>
 1c4:	df 91       	pop	r29
 1c6:	cf 91       	pop	r28
 1c8:	1f 91       	pop	r17
 1ca:	0f 91       	pop	r16
 1cc:	08 95       	ret

000001ce <UART0_RxFlag>:

uint8_t UART0_RxFlag(){
	if (uart0RxFlag){
 1ce:	80 91 7b 01 	lds	r24, 0x017B	; 0x80017b <uart0RxFlag>
 1d2:	81 11       	cpse	r24, r1
		return 1;
 1d4:	81 e0       	ldi	r24, 0x01	; 1
	}
	else
	{
		return 0;
	}
}
 1d6:	08 95       	ret

000001d8 <UART0_ResetRxFlag>:
void UART0_ResetRxFlag()
{
	uart0RxFlag = 0	;
 1d8:	10 92 7b 01 	sts	0x017B, r1	; 0x80017b <uart0RxFlag>
 1dc:	08 95       	ret

000001de <UART0_WriteRxBuff>:
}

void UART0_WriteRxBuff()
{
	UART0_SendString((char *)uart0Rxbuff);
 1de:	87 e1       	ldi	r24, 0x17	; 23
 1e0:	91 e0       	ldi	r25, 0x01	; 1
 1e2:	e0 cf       	rjmp	.-64     	; 0x1a4 <UART0_SendString>
 1e4:	08 95       	ret

000001e6 <_exit>:
 1e6:	f8 94       	cli

000001e8 <__stop_program>:
 1e8:	ff cf       	rjmp	.-2      	; 0x1e8 <__stop_program>
