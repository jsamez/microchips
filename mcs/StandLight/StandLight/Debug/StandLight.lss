
StandLight.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000376  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000302  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000e  00800100  00800100  00000376  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000376  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000003a8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000110  00000000  00000000  000003e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000012f3  00000000  00000000  000004f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000bca  00000000  00000000  000017eb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000895  00000000  00000000  000023b5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001c0  00000000  00000000  00002c4c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000060c  00000000  00000000  00002e0c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000038e  00000000  00000000  00003418  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c0  00000000  00000000  000037a6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	53 c0       	rjmp	.+166    	; 0xac <__bad_interrupt>
   6:	00 00       	nop
   8:	51 c0       	rjmp	.+162    	; 0xac <__bad_interrupt>
   a:	00 00       	nop
   c:	4f c0       	rjmp	.+158    	; 0xac <__bad_interrupt>
   e:	00 00       	nop
  10:	4d c0       	rjmp	.+154    	; 0xac <__bad_interrupt>
  12:	00 00       	nop
  14:	4b c0       	rjmp	.+150    	; 0xac <__bad_interrupt>
  16:	00 00       	nop
  18:	49 c0       	rjmp	.+146    	; 0xac <__bad_interrupt>
  1a:	00 00       	nop
  1c:	47 c0       	rjmp	.+142    	; 0xac <__bad_interrupt>
  1e:	00 00       	nop
  20:	45 c0       	rjmp	.+138    	; 0xac <__bad_interrupt>
  22:	00 00       	nop
  24:	43 c0       	rjmp	.+134    	; 0xac <__bad_interrupt>
  26:	00 00       	nop
  28:	41 c0       	rjmp	.+130    	; 0xac <__bad_interrupt>
  2a:	00 00       	nop
  2c:	3f c0       	rjmp	.+126    	; 0xac <__bad_interrupt>
  2e:	00 00       	nop
  30:	3d c0       	rjmp	.+122    	; 0xac <__bad_interrupt>
  32:	00 00       	nop
  34:	3b c0       	rjmp	.+118    	; 0xac <__bad_interrupt>
  36:	00 00       	nop
  38:	39 c0       	rjmp	.+114    	; 0xac <__bad_interrupt>
  3a:	00 00       	nop
  3c:	37 c0       	rjmp	.+110    	; 0xac <__bad_interrupt>
  3e:	00 00       	nop
  40:	35 c0       	rjmp	.+106    	; 0xac <__bad_interrupt>
  42:	00 00       	nop
  44:	33 c0       	rjmp	.+102    	; 0xac <__bad_interrupt>
  46:	00 00       	nop
  48:	31 c0       	rjmp	.+98     	; 0xac <__bad_interrupt>
  4a:	00 00       	nop
  4c:	2f c0       	rjmp	.+94     	; 0xac <__bad_interrupt>
  4e:	00 00       	nop
  50:	2d c0       	rjmp	.+90     	; 0xac <__bad_interrupt>
  52:	00 00       	nop
  54:	2b c0       	rjmp	.+86     	; 0xac <__bad_interrupt>
  56:	00 00       	nop
  58:	29 c0       	rjmp	.+82     	; 0xac <__bad_interrupt>
  5a:	00 00       	nop
  5c:	27 c0       	rjmp	.+78     	; 0xac <__bad_interrupt>
  5e:	00 00       	nop
  60:	25 c0       	rjmp	.+74     	; 0xac <__bad_interrupt>
  62:	00 00       	nop
  64:	23 c0       	rjmp	.+70     	; 0xac <__bad_interrupt>
  66:	00 00       	nop
  68:	21 c0       	rjmp	.+66     	; 0xac <__bad_interrupt>
  6a:	00 00       	nop
  6c:	1f c0       	rjmp	.+62     	; 0xac <__bad_interrupt>
  6e:	00 00       	nop
  70:	1d c0       	rjmp	.+58     	; 0xac <__bad_interrupt>
  72:	00 00       	nop
  74:	1b c0       	rjmp	.+54     	; 0xac <__bad_interrupt>
  76:	00 00       	nop
  78:	19 c0       	rjmp	.+50     	; 0xac <__bad_interrupt>
  7a:	00 00       	nop
  7c:	17 c0       	rjmp	.+46     	; 0xac <__bad_interrupt>
  7e:	00 00       	nop
  80:	15 c0       	rjmp	.+42     	; 0xac <__bad_interrupt>
  82:	00 00       	nop
  84:	13 c0       	rjmp	.+38     	; 0xac <__bad_interrupt>
  86:	00 00       	nop
  88:	11 c0       	rjmp	.+34     	; 0xac <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	ae 30       	cpi	r26, 0x0E	; 14
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	ee d0       	rcall	.+476    	; 0x286 <main>
  aa:	29 c1       	rjmp	.+594    	; 0x2fe <_exit>

000000ac <__bad_interrupt>:
  ac:	a9 cf       	rjmp	.-174    	; 0x0 <__vectors>

000000ae <standinglight_init>:
button_t btnNext, btnPrev;
uint8_t ledstate;

void standinglight_init(){
	
	LED_init(&DDRD);
  ae:	81 e3       	ldi	r24, 0x31	; 49
  b0:	90 e0       	ldi	r25, 0x00	; 0
  b2:	e1 d0       	rcall	.+450    	; 0x276 <LED_init>
	Button_init(&btnNext, &BUTTON_DDR, &BUTTON_PIN, BUTTON_MODE);
  b4:	20 e0       	ldi	r18, 0x00	; 0
  b6:	49 e3       	ldi	r20, 0x39	; 57
  b8:	50 e0       	ldi	r21, 0x00	; 0
  ba:	6a e3       	ldi	r22, 0x3A	; 58
  bc:	70 e0       	ldi	r23, 0x00	; 0
  be:	88 e0       	ldi	r24, 0x08	; 8
  c0:	91 e0       	ldi	r25, 0x01	; 1
  c2:	a5 d0       	rcall	.+330    	; 0x20e <Button_init>
	Button_init(&btnPrev, &BUTTON_DDR, &BUTTON_PIN, BUTTON_OFF);
  c4:	21 e0       	ldi	r18, 0x01	; 1
  c6:	49 e3       	ldi	r20, 0x39	; 57
  c8:	50 e0       	ldi	r21, 0x00	; 0
  ca:	6a e3       	ldi	r22, 0x3A	; 58
  cc:	70 e0       	ldi	r23, 0x00	; 0
  ce:	81 e0       	ldi	r24, 0x01	; 1
  d0:	91 e0       	ldi	r25, 0x01	; 1
  d2:	9d d0       	rcall	.+314    	; 0x20e <Button_init>

	leddata = 0b00000011;
  d4:	83 e0       	ldi	r24, 0x03	; 3
  d6:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <leddata>
	ledstate = led1;
  da:	81 e0       	ldi	r24, 0x01	; 1
  dc:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
  e0:	08 95       	ret

000000e2 <led_alloff>:



void led_alloff()
{
	LED_ALLOFF(&LED_PORT);
  e2:	82 e3       	ldi	r24, 0x32	; 50
  e4:	90 e0       	ldi	r25, 0x00	; 0
  e6:	ca c0       	rjmp	.+404    	; 0x27c <LED_ALLOFF>
  e8:	08 95       	ret

000000ea <led_tr>:
}
void led_tr(){
	/*leddata = (leddata<<2);
	leddata = leddata +3;*/
	leddata=0b00001111;
  ea:	8f e0       	ldi	r24, 0x0F	; 15
  ec:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <leddata>
  f0:	08 95       	ret

000000f2 <standinglight_eventcheck>:
	standinglight_run();
	
}

void standinglight_eventcheck(){
	switch(ledstate)
  f2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  f6:	82 30       	cpi	r24, 0x02	; 2
  f8:	99 f1       	breq	.+102    	; 0x160 <standinglight_eventcheck+0x6e>
  fa:	28 f4       	brcc	.+10     	; 0x106 <standinglight_eventcheck+0x14>
  fc:	88 23       	and	r24, r24
  fe:	51 f0       	breq	.+20     	; 0x114 <standinglight_eventcheck+0x22>
 100:	81 30       	cpi	r24, 0x01	; 1
 102:	d9 f0       	breq	.+54     	; 0x13a <standinglight_eventcheck+0x48>
 104:	08 95       	ret
 106:	83 30       	cpi	r24, 0x03	; 3
 108:	09 f4       	brne	.+2      	; 0x10c <standinglight_eventcheck+0x1a>
 10a:	3c c0       	rjmp	.+120    	; 0x184 <standinglight_eventcheck+0x92>
 10c:	84 30       	cpi	r24, 0x04	; 4
 10e:	09 f4       	brne	.+2      	; 0x112 <standinglight_eventcheck+0x20>
 110:	4b c0       	rjmp	.+150    	; 0x1a8 <standinglight_eventcheck+0xb6>
 112:	08 95       	ret
	{
		case led_off :
		if(button_getstate(&btnNext) == ACT_RELEASED)
 114:	88 e0       	ldi	r24, 0x08	; 8
 116:	91 e0       	ldi	r25, 0x01	; 1
 118:	87 d0       	rcall	.+270    	; 0x228 <button_getstate>
 11a:	81 30       	cpi	r24, 0x01	; 1
 11c:	29 f4       	brne	.+10     	; 0x128 <standinglight_eventcheck+0x36>
		{
			led_tr();
 11e:	e5 df       	rcall	.-54     	; 0xea <led_tr>
 120:	81 e0       	ldi	r24, 0x01	; 1
			ledstate = led1;
 122:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 126:	08 95       	ret
 128:	81 e0       	ldi	r24, 0x01	; 1
		}
		else if(button_getstate(&btnPrev) == ACT_RELEASED)
 12a:	91 e0       	ldi	r25, 0x01	; 1
 12c:	7d d0       	rcall	.+250    	; 0x228 <button_getstate>
 12e:	81 30       	cpi	r24, 0x01	; 1
 130:	09 f0       	breq	.+2      	; 0x134 <standinglight_eventcheck+0x42>
 132:	4a c0       	rjmp	.+148    	; 0x1c8 <standinglight_eventcheck+0xd6>
 134:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
		{
			ledstate = led_off;
 138:	08 95       	ret
		}
		break;
		
		case led1 :
		if(button_getstate(&btnNext) == ACT_RELEASED)
 13a:	88 e0       	ldi	r24, 0x08	; 8
 13c:	91 e0       	ldi	r25, 0x01	; 1
 13e:	74 d0       	rcall	.+232    	; 0x228 <button_getstate>
 140:	81 30       	cpi	r24, 0x01	; 1
 142:	29 f4       	brne	.+10     	; 0x14e <standinglight_eventcheck+0x5c>
		{
			led_tr();
 144:	d2 df       	rcall	.-92     	; 0xea <led_tr>
 146:	82 e0       	ldi	r24, 0x02	; 2
			ledstate = led2;
 148:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 14c:	08 95       	ret
		}
		else if(button_getstate(&btnPrev)==ACT_RELEASED)
 14e:	81 e0       	ldi	r24, 0x01	; 1
 150:	91 e0       	ldi	r25, 0x01	; 1
 152:	6a d0       	rcall	.+212    	; 0x228 <button_getstate>
 154:	81 30       	cpi	r24, 0x01	; 1
 156:	09 f0       	breq	.+2      	; 0x15a <standinglight_eventcheck+0x68>
 158:	37 c0       	rjmp	.+110    	; 0x1c8 <standinglight_eventcheck+0xd6>
		{
			ledstate = led_off;
 15a:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
		}
		break;
		
		case led2 :
		if(button_getstate(&btnNext)==ACT_RELEASED)
 15e:	08 95       	ret
 160:	88 e0       	ldi	r24, 0x08	; 8
 162:	91 e0       	ldi	r25, 0x01	; 1
 164:	61 d0       	rcall	.+194    	; 0x228 <button_getstate>
 166:	81 30       	cpi	r24, 0x01	; 1
 168:	29 f4       	brne	.+10     	; 0x174 <standinglight_eventcheck+0x82>
		{
			led_tr();
 16a:	bf df       	rcall	.-130    	; 0xea <led_tr>
			ledstate = led3;
 16c:	83 e0       	ldi	r24, 0x03	; 3
 16e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 172:	08 95       	ret
		}
		else if(button_getstate(&btnPrev)==ACT_RELEASED)
 174:	81 e0       	ldi	r24, 0x01	; 1
 176:	91 e0       	ldi	r25, 0x01	; 1
 178:	57 d0       	rcall	.+174    	; 0x228 <button_getstate>
 17a:	81 30       	cpi	r24, 0x01	; 1
 17c:	29 f5       	brne	.+74     	; 0x1c8 <standinglight_eventcheck+0xd6>
		{
			ledstate = led_off;
 17e:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
 182:	08 95       	ret
		}
		break;
		
		case led3 :
		if(button_getstate(&btnNext)==ACT_RELEASED)
 184:	88 e0       	ldi	r24, 0x08	; 8
 186:	91 e0       	ldi	r25, 0x01	; 1
 188:	4f d0       	rcall	.+158    	; 0x228 <button_getstate>
 18a:	81 30       	cpi	r24, 0x01	; 1
 18c:	29 f4       	brne	.+10     	; 0x198 <standinglight_eventcheck+0xa6>
		{
			led_tr();
 18e:	ad df       	rcall	.-166    	; 0xea <led_tr>
 190:	84 e0       	ldi	r24, 0x04	; 4
			ledstate = led4;
 192:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 196:	08 95       	ret
		}
		else if(button_getstate(&btnPrev) == ACT_RELEASED)
 198:	81 e0       	ldi	r24, 0x01	; 1
 19a:	91 e0       	ldi	r25, 0x01	; 1
 19c:	45 d0       	rcall	.+138    	; 0x228 <button_getstate>
 19e:	81 30       	cpi	r24, 0x01	; 1
 1a0:	99 f4       	brne	.+38     	; 0x1c8 <standinglight_eventcheck+0xd6>
		{
			ledstate = led_off;
 1a2:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
		}
		break;
		
		case led4 :
		if(button_getstate(&btnNext) == ACT_RELEASED)
 1a6:	08 95       	ret
 1a8:	88 e0       	ldi	r24, 0x08	; 8
 1aa:	91 e0       	ldi	r25, 0x01	; 1
 1ac:	3d d0       	rcall	.+122    	; 0x228 <button_getstate>
 1ae:	81 30       	cpi	r24, 0x01	; 1
 1b0:	21 f4       	brne	.+8      	; 0x1ba <standinglight_eventcheck+0xc8>
		{
			led_tr();
 1b2:	9b df       	rcall	.-202    	; 0xea <led_tr>
 1b4:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
			ledstate = led_off;
 1b8:	08 95       	ret
 1ba:	81 e0       	ldi	r24, 0x01	; 1
		}
		else if(button_getstate(&btnPrev) == ACT_RELEASED)
 1bc:	91 e0       	ldi	r25, 0x01	; 1
 1be:	34 d0       	rcall	.+104    	; 0x228 <button_getstate>
 1c0:	81 30       	cpi	r24, 0x01	; 1
 1c2:	11 f4       	brne	.+4      	; 0x1c8 <standinglight_eventcheck+0xd6>
 1c4:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
		{
			ledstate = led_off;
 1c8:	08 95       	ret

000001ca <led_on>:
 1ca:	60 91 07 01 	lds	r22, 0x0107	; 0x800107 <leddata>
	/*leddata = (leddata<<2);
	leddata = leddata +3;*/
	leddata=0b00001111;
}
void led_on(){
	LED_WriteData(&LED_PORT, leddata);
 1ce:	82 e3       	ldi	r24, 0x32	; 50
 1d0:	90 e0       	ldi	r25, 0x00	; 0
 1d2:	57 c0       	rjmp	.+174    	; 0x282 <LED_WriteData>
 1d4:	08 95       	ret

000001d6 <standinglight_run>:
		
	}
}

void standinglight_run(){
	switch(ledstate)
 1d6:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 1da:	82 30       	cpi	r24, 0x02	; 2
 1dc:	79 f0       	breq	.+30     	; 0x1fc <standinglight_run+0x26>
 1de:	28 f4       	brcc	.+10     	; 0x1ea <standinglight_run+0x14>
 1e0:	88 23       	and	r24, r24
 1e2:	41 f0       	breq	.+16     	; 0x1f4 <standinglight_run+0x1e>
 1e4:	81 30       	cpi	r24, 0x01	; 1
 1e6:	41 f0       	breq	.+16     	; 0x1f8 <standinglight_run+0x22>
 1e8:	08 95       	ret
 1ea:	83 30       	cpi	r24, 0x03	; 3
 1ec:	49 f0       	breq	.+18     	; 0x200 <standinglight_run+0x2a>
 1ee:	84 30       	cpi	r24, 0x04	; 4
 1f0:	49 f0       	breq	.+18     	; 0x204 <standinglight_run+0x2e>
 1f2:	08 95       	ret
	{
		case led_off :
		led_alloff();
 1f4:	76 cf       	rjmp	.-276    	; 0xe2 <led_alloff>
		break;
		
		case led1 :
		
		led_on();
 1f6:	08 95       	ret
		break;
 1f8:	e8 cf       	rjmp	.-48     	; 0x1ca <led_on>
		
		case led2 :
		led_on();
 1fa:	08 95       	ret
		break;
		
		case led3 :
		led_on();
 1fc:	e6 cf       	rjmp	.-52     	; 0x1ca <led_on>
 1fe:	08 95       	ret
		break;
 200:	e4 cf       	rjmp	.-56     	; 0x1ca <led_on>
		
		case led4 :
		led_on();
 202:	08 95       	ret
 204:	e2 cf       	rjmp	.-60     	; 0x1ca <led_on>
 206:	08 95       	ret

00000208 <standinglight_execute>:
	
}

void standinglight_execute(){
	
	standinglight_eventcheck();
 208:	74 df       	rcall	.-280    	; 0xf2 <standinglight_eventcheck>
	standinglight_run();
 20a:	e5 cf       	rjmp	.-54     	; 0x1d6 <standinglight_run>
 20c:	08 95       	ret

0000020e <Button_init>:
 20e:	fc 01       	movw	r30, r24
﻿#include "button.h"


void Button_init(button_t *btn, volatile uint8_t *ddr, volatile uint8_t *pin, uint8_t pinnum){
 210:	cb 01       	movw	r24, r22
	btn ->DDR =ddr;
 212:	71 83       	std	Z+1, r23	; 0x01
 214:	60 83       	st	Z, r22
	btn->PIN = pin;
 216:	53 83       	std	Z+3, r21	; 0x03
 218:	42 83       	std	Z+2, r20	; 0x02
	btn->pinNum = pinnum;
 21a:	25 83       	std	Z+5, r18	; 0x05
	btn->pS = 1;
 21c:	31 e0       	ldi	r19, 0x01	; 1
 21e:	34 83       	std	Z+4, r19	; 0x04
	Gpio_initPin(btn->DDR, INPUT, btn->pinNum);
 220:	42 2f       	mov	r20, r18
 222:	61 e0       	ldi	r22, 0x01	; 1
 224:	3c c0       	rjmp	.+120    	; 0x29e <Gpio_initPin>
 226:	08 95       	ret

00000228 <button_getstate>:
	
}

uint8_t button_getstate(button_t *btn){
 228:	cf 93       	push	r28
 22a:	df 93       	push	r29
 22c:	ec 01       	movw	r28, r24
	
	uint8_t curState = Gpio_readPin(btn->PIN, btn->pinNum);
 22e:	6d 81       	ldd	r22, Y+5	; 0x05
 230:	8a 81       	ldd	r24, Y+2	; 0x02
 232:	53 d0       	rcall	.+166    	; 0x2da <Gpio_readPin>
	if ((curState == 0) &&(btn->pS = 1)){
 234:	81 11       	cpse	r24, r1
 236:	0b c0       	rjmp	.+22     	; 0x24e <button_getstate+0x26>
 238:	81 e0       	ldi	r24, 0x01	; 1
 23a:	8c 83       	std	Y+4, r24	; 0x04
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 23c:	8f e3       	ldi	r24, 0x3F	; 63
 23e:	9c e9       	ldi	r25, 0x9C	; 156
 240:	01 97       	sbiw	r24, 0x01	; 1
 242:	f1 f7       	brne	.-4      	; 0x240 <button_getstate+0x18>
 244:	00 c0       	rjmp	.+0      	; 0x246 <button_getstate+0x1e>
 246:	00 00       	nop
		_delay_ms(10);
		btn->pS = PUSHED;
 248:	1c 82       	std	Y+4, r1	; 0x04
		
		
		return ACT_PUSHED;
 24a:	80 e0       	ldi	r24, 0x00	; 0
 24c:	11 c0       	rjmp	.+34     	; 0x270 <button_getstate+0x48>
	}
	else if ((curState !=0 )&&(btn->pS == 0)){
 24e:	88 23       	and	r24, r24
 250:	61 f0       	breq	.+24     	; 0x26a <button_getstate+0x42>
 252:	8c 81       	ldd	r24, Y+4	; 0x04
 254:	81 11       	cpse	r24, r1
 256:	0b c0       	rjmp	.+22     	; 0x26e <button_getstate+0x46>
 258:	8f e3       	ldi	r24, 0x3F	; 63
 25a:	9c e9       	ldi	r25, 0x9C	; 156
 25c:	01 97       	sbiw	r24, 0x01	; 1
 25e:	f1 f7       	brne	.-4      	; 0x25c <button_getstate+0x34>
 260:	00 c0       	rjmp	.+0      	; 0x262 <button_getstate+0x3a>
 262:	00 00       	nop
		_delay_ms(10);
		btn->pS = RELEASED;
 264:	81 e0       	ldi	r24, 0x01	; 1
 266:	8c 83       	std	Y+4, r24	; 0x04
		return ACT_RELEASED;
 268:	03 c0       	rjmp	.+6      	; 0x270 <button_getstate+0x48>
	}
	
	return ACT_NONE;
 26a:	82 e0       	ldi	r24, 0x02	; 2
 26c:	01 c0       	rjmp	.+2      	; 0x270 <button_getstate+0x48>
 26e:	82 e0       	ldi	r24, 0x02	; 2
 270:	df 91       	pop	r29
 272:	cf 91       	pop	r28
 274:	08 95       	ret

00000276 <LED_init>:
﻿#include "LED.h"

void LED_init(volatile uint8_t *DDR){
	
	Gpio_initPort(DDR,OUTPUT);
 276:	60 e0       	ldi	r22, 0x00	; 0
 278:	09 c0       	rjmp	.+18     	; 0x28c <Gpio_initPort>
 27a:	08 95       	ret

0000027c <LED_ALLOFF>:
	
}

void LED_ALLOFF(volatile uint8_t *PORT){
	Gpio_writePort(PORT, 0b00000000);
 27c:	60 e0       	ldi	r22, 0x00	; 0
 27e:	2a c0       	rjmp	.+84     	; 0x2d4 <Gpio_writePort>
 280:	08 95       	ret

00000282 <LED_WriteData>:
	
}

void LED_WriteData(volatile uint8_t *PORT,uint8_t data){
	Gpio_writePort(PORT, data);
 282:	28 c0       	rjmp	.+80     	; 0x2d4 <Gpio_writePort>
 284:	08 95       	ret

00000286 <main>:
#include "ap/Standlight/standlight.h"
#include "peliph/GPIO/GPIO.h"

int main(void)
{
	standinglight_init();
 286:	13 df       	rcall	.-474    	; 0xae <standinglight_init>

	while (1)
	{
		standinglight_execute();
 288:	bf df       	rcall	.-130    	; 0x208 <standinglight_execute>
 28a:	fe cf       	rjmp	.-4      	; 0x288 <main+0x2>

0000028c <Gpio_initPort>:
 28c:	61 11       	cpse	r22, r1

uint8_t Gpio_readPort(volatile uint8_t pin){
	
	return pin;
	
}
 28e:	04 c0       	rjmp	.+8      	; 0x298 <Gpio_initPort+0xc>
 290:	2f ef       	ldi	r18, 0xFF	; 255
 292:	fc 01       	movw	r30, r24
 294:	20 83       	st	Z, r18
 296:	08 95       	ret
 298:	fc 01       	movw	r30, r24
 29a:	10 82       	st	Z, r1
 29c:	08 95       	ret

0000029e <Gpio_initPin>:
 29e:	61 11       	cpse	r22, r1
 2a0:	0c c0       	rjmp	.+24     	; 0x2ba <Gpio_initPin+0x1c>
 2a2:	fc 01       	movw	r30, r24
 2a4:	50 81       	ld	r21, Z
 2a6:	21 e0       	ldi	r18, 0x01	; 1
 2a8:	30 e0       	ldi	r19, 0x00	; 0
 2aa:	02 c0       	rjmp	.+4      	; 0x2b0 <Gpio_initPin+0x12>
 2ac:	22 0f       	add	r18, r18
 2ae:	33 1f       	adc	r19, r19
 2b0:	4a 95       	dec	r20
 2b2:	e2 f7       	brpl	.-8      	; 0x2ac <Gpio_initPin+0xe>
 2b4:	25 2b       	or	r18, r21
 2b6:	20 83       	st	Z, r18
 2b8:	08 95       	ret
 2ba:	fc 01       	movw	r30, r24
 2bc:	50 81       	ld	r21, Z
 2be:	21 e0       	ldi	r18, 0x01	; 1
 2c0:	30 e0       	ldi	r19, 0x00	; 0
 2c2:	02 c0       	rjmp	.+4      	; 0x2c8 <Gpio_initPin+0x2a>
 2c4:	22 0f       	add	r18, r18
 2c6:	33 1f       	adc	r19, r19
 2c8:	4a 95       	dec	r20
 2ca:	e2 f7       	brpl	.-8      	; 0x2c4 <Gpio_initPin+0x26>
 2cc:	20 95       	com	r18
 2ce:	25 23       	and	r18, r21
 2d0:	20 83       	st	Z, r18
 2d2:	08 95       	ret

000002d4 <Gpio_writePort>:
 2d4:	fc 01       	movw	r30, r24
 2d6:	60 83       	st	Z, r22
 2d8:	08 95       	ret

000002da <Gpio_readPin>:

uint8_t Gpio_readPin(volatile uint8_t PIN, uint8_t pinNum){
 2da:	cf 93       	push	r28
 2dc:	df 93       	push	r29
 2de:	1f 92       	push	r1
 2e0:	cd b7       	in	r28, 0x3d	; 61
 2e2:	de b7       	in	r29, 0x3e	; 62
 2e4:	89 83       	std	Y+1, r24	; 0x01
	
	return ((PIN & (1<<pinNum)) !=0);
 2e6:	89 81       	ldd	r24, Y+1	; 0x01
 2e8:	90 e0       	ldi	r25, 0x00	; 0
 2ea:	02 c0       	rjmp	.+4      	; 0x2f0 <Gpio_readPin+0x16>
 2ec:	95 95       	asr	r25
 2ee:	87 95       	ror	r24
 2f0:	6a 95       	dec	r22
 2f2:	e2 f7       	brpl	.-8      	; 0x2ec <Gpio_readPin+0x12>
	
 2f4:	81 70       	andi	r24, 0x01	; 1
 2f6:	0f 90       	pop	r0
 2f8:	df 91       	pop	r29
 2fa:	cf 91       	pop	r28
 2fc:	08 95       	ret

000002fe <_exit>:
 2fe:	f8 94       	cli

00000300 <__stop_program>:
 300:	ff cf       	rjmp	.-2      	; 0x300 <__stop_program>
