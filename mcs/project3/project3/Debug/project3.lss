
project3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000002fe  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000028a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000e  00800100  00800100  000002fe  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002fe  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000330  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c8  00000000  00000000  00000370  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000f90  00000000  00000000  00000438  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000acb  00000000  00000000  000013c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000074d  00000000  00000000  00001e93  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000120  00000000  00000000  000025e0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000555  00000000  00000000  00002700  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000136  00000000  00000000  00002c55  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000088  00000000  00000000  00002d8b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	53 c0       	rjmp	.+166    	; 0xac <__bad_interrupt>
   6:	00 00       	nop
   8:	51 c0       	rjmp	.+162    	; 0xac <__bad_interrupt>
   a:	00 00       	nop
   c:	4f c0       	rjmp	.+158    	; 0xac <__bad_interrupt>
   e:	00 00       	nop
  10:	4d c0       	rjmp	.+154    	; 0xac <__bad_interrupt>
  12:	00 00       	nop
  14:	4b c0       	rjmp	.+150    	; 0xac <__bad_interrupt>
  16:	00 00       	nop
  18:	49 c0       	rjmp	.+146    	; 0xac <__bad_interrupt>
  1a:	00 00       	nop
  1c:	47 c0       	rjmp	.+142    	; 0xac <__bad_interrupt>
  1e:	00 00       	nop
  20:	45 c0       	rjmp	.+138    	; 0xac <__bad_interrupt>
  22:	00 00       	nop
  24:	43 c0       	rjmp	.+134    	; 0xac <__bad_interrupt>
  26:	00 00       	nop
  28:	41 c0       	rjmp	.+130    	; 0xac <__bad_interrupt>
  2a:	00 00       	nop
  2c:	3f c0       	rjmp	.+126    	; 0xac <__bad_interrupt>
  2e:	00 00       	nop
  30:	3d c0       	rjmp	.+122    	; 0xac <__bad_interrupt>
  32:	00 00       	nop
  34:	3b c0       	rjmp	.+118    	; 0xac <__bad_interrupt>
  36:	00 00       	nop
  38:	39 c0       	rjmp	.+114    	; 0xac <__bad_interrupt>
  3a:	00 00       	nop
  3c:	37 c0       	rjmp	.+110    	; 0xac <__bad_interrupt>
  3e:	00 00       	nop
  40:	35 c0       	rjmp	.+106    	; 0xac <__bad_interrupt>
  42:	00 00       	nop
  44:	33 c0       	rjmp	.+102    	; 0xac <__bad_interrupt>
  46:	00 00       	nop
  48:	31 c0       	rjmp	.+98     	; 0xac <__bad_interrupt>
  4a:	00 00       	nop
  4c:	2f c0       	rjmp	.+94     	; 0xac <__bad_interrupt>
  4e:	00 00       	nop
  50:	2d c0       	rjmp	.+90     	; 0xac <__bad_interrupt>
  52:	00 00       	nop
  54:	2b c0       	rjmp	.+86     	; 0xac <__bad_interrupt>
  56:	00 00       	nop
  58:	29 c0       	rjmp	.+82     	; 0xac <__bad_interrupt>
  5a:	00 00       	nop
  5c:	27 c0       	rjmp	.+78     	; 0xac <__bad_interrupt>
  5e:	00 00       	nop
  60:	25 c0       	rjmp	.+74     	; 0xac <__bad_interrupt>
  62:	00 00       	nop
  64:	23 c0       	rjmp	.+70     	; 0xac <__bad_interrupt>
  66:	00 00       	nop
  68:	21 c0       	rjmp	.+66     	; 0xac <__bad_interrupt>
  6a:	00 00       	nop
  6c:	1f c0       	rjmp	.+62     	; 0xac <__bad_interrupt>
  6e:	00 00       	nop
  70:	1d c0       	rjmp	.+58     	; 0xac <__bad_interrupt>
  72:	00 00       	nop
  74:	1b c0       	rjmp	.+54     	; 0xac <__bad_interrupt>
  76:	00 00       	nop
  78:	19 c0       	rjmp	.+50     	; 0xac <__bad_interrupt>
  7a:	00 00       	nop
  7c:	17 c0       	rjmp	.+46     	; 0xac <__bad_interrupt>
  7e:	00 00       	nop
  80:	15 c0       	rjmp	.+42     	; 0xac <__bad_interrupt>
  82:	00 00       	nop
  84:	13 c0       	rjmp	.+38     	; 0xac <__bad_interrupt>
  86:	00 00       	nop
  88:	11 c0       	rjmp	.+34     	; 0xac <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	ae 30       	cpi	r26, 0x0E	; 14
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	eb d0       	rcall	.+470    	; 0x280 <main>
  aa:	ed c0       	rjmp	.+474    	; 0x286 <_exit>

000000ac <__bad_interrupt>:
  ac:	a9 cf       	rjmp	.-174    	; 0x0 <__vectors>

000000ae <LEDMACHINE_init>:
button_t btnNext, btnPrev;
uint8_t ledstate;

void LEDMACHINE_init(){
	
	leddata=0x00;
  ae:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <leddata>

	Button_init(&btnNext, &DDRA, &PINA,0);
  b2:	20 e0       	ldi	r18, 0x00	; 0
  b4:	49 e3       	ldi	r20, 0x39	; 57
  b6:	50 e0       	ldi	r21, 0x00	; 0
  b8:	6a e3       	ldi	r22, 0x3A	; 58
  ba:	70 e0       	ldi	r23, 0x00	; 0
  bc:	88 e0       	ldi	r24, 0x08	; 8
  be:	91 e0       	ldi	r25, 0x01	; 1
  c0:	9a d0       	rcall	.+308    	; 0x1f6 <Button_init>
	Button_init(&btnPrev, &DDRA, &PINA,1);
  c2:	21 e0       	ldi	r18, 0x01	; 1
  c4:	49 e3       	ldi	r20, 0x39	; 57
  c6:	50 e0       	ldi	r21, 0x00	; 0
  c8:	6a e3       	ldi	r22, 0x3A	; 58
  ca:	70 e0       	ldi	r23, 0x00	; 0
  cc:	81 e0       	ldi	r24, 0x01	; 1
  ce:	91 e0       	ldi	r25, 0x01	; 1

	LED_init();
  d0:	92 d0       	rcall	.+292    	; 0x1f6 <Button_init>
  d2:	d1 d0       	rcall	.+418    	; 0x276 <LED_init>
	ledstate = led3;
  d4:	82 e0       	ldi	r24, 0x02	; 2
  d6:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
  da:	08 95       	ret

000000dc <led1_blink>:



void led1_blink()
{
	leddata ^= 0x01;
  dc:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <leddata>
  e0:	81 e0       	ldi	r24, 0x01	; 1
  e2:	89 27       	eor	r24, r25
  e4:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <leddata>
	LED_WriteData(leddata);
  e8:	c9 c0       	rjmp	.+402    	; 0x27c <LED_WriteData>
  ea:	08 95       	ret

000000ec <led2_blink>:
}
void led2_blink()
{
	leddata ^= 0x02;
  ec:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <leddata>
  f0:	82 e0       	ldi	r24, 0x02	; 2
  f2:	89 27       	eor	r24, r25
  f4:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <leddata>
	LED_WriteData(leddata);
  f8:	c1 c0       	rjmp	.+386    	; 0x27c <LED_WriteData>
  fa:	08 95       	ret

000000fc <led3_blink>:
}
void led3_blink()
{
	leddata ^= 0x04;
  fc:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <leddata>
 100:	84 e0       	ldi	r24, 0x04	; 4
 102:	89 27       	eor	r24, r25
 104:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <leddata>
	LED_WriteData(leddata);
 108:	b9 c0       	rjmp	.+370    	; 0x27c <LED_WriteData>
 10a:	08 95       	ret

0000010c <led4_blink>:
}
void led4_blink()
{
	leddata ^= 0x08;
 10c:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <leddata>
 110:	88 e0       	ldi	r24, 0x08	; 8
 112:	89 27       	eor	r24, r25
 114:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <leddata>
	LED_WriteData(leddata);
 118:	b1 c0       	rjmp	.+354    	; 0x27c <LED_WriteData>
 11a:	08 95       	ret

0000011c <LedMachine_execute>:
	ledstate = led3;
	
}

void LedMachine_execute(){
	switch(ledstate)
 11c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 120:	81 30       	cpi	r24, 0x01	; 1
 122:	e9 f0       	breq	.+58     	; 0x15e <LedMachine_execute+0x42>
 124:	30 f0       	brcs	.+12     	; 0x132 <LedMachine_execute+0x16>
 126:	82 30       	cpi	r24, 0x02	; 2
 128:	81 f1       	breq	.+96     	; 0x18a <LedMachine_execute+0x6e>
 12a:	83 30       	cpi	r24, 0x03	; 3
 12c:	09 f4       	brne	.+2      	; 0x130 <LedMachine_execute+0x14>
 12e:	44 c0       	rjmp	.+136    	; 0x1b8 <LedMachine_execute+0x9c>
 130:	58 c0       	rjmp	.+176    	; 0x1e2 <LedMachine_execute+0xc6>
	{
		case led1 :
		led1_blink();
 132:	d4 df       	rcall	.-88     	; 0xdc <led1_blink>
		if(button_getstate(&btnNext)==ACT_RELEASED){
 134:	88 e0       	ldi	r24, 0x08	; 8
 136:	91 e0       	ldi	r25, 0x01	; 1
 138:	73 d0       	rcall	.+230    	; 0x220 <button_getstate>
 13a:	81 30       	cpi	r24, 0x01	; 1
 13c:	29 f4       	brne	.+10     	; 0x148 <LedMachine_execute+0x2c>
			ledstate = led2;
 13e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
			leddata = 0x00;
 142:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <leddata>
 146:	4d c0       	rjmp	.+154    	; 0x1e2 <LedMachine_execute+0xc6>
		}
		else if(button_getstate(&btnPrev)==ACT_PUSHED){
 148:	81 e0       	ldi	r24, 0x01	; 1
 14a:	91 e0       	ldi	r25, 0x01	; 1
 14c:	69 d0       	rcall	.+210    	; 0x220 <button_getstate>
 14e:	81 11       	cpse	r24, r1
 150:	48 c0       	rjmp	.+144    	; 0x1e2 <LedMachine_execute+0xc6>
			ledstate = led4;
 152:	83 e0       	ldi	r24, 0x03	; 3
 154:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
			leddata = 0x00;
 158:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <leddata>
		}
		break;
		case led2 :
		led2_blink();
 15c:	42 c0       	rjmp	.+132    	; 0x1e2 <LedMachine_execute+0xc6>
		if(button_getstate(&btnNext)==ACT_RELEASED){
 15e:	c6 df       	rcall	.-116    	; 0xec <led2_blink>
 160:	88 e0       	ldi	r24, 0x08	; 8
 162:	91 e0       	ldi	r25, 0x01	; 1
 164:	5d d0       	rcall	.+186    	; 0x220 <button_getstate>
 166:	81 30       	cpi	r24, 0x01	; 1
 168:	31 f4       	brne	.+12     	; 0x176 <LedMachine_execute+0x5a>
			ledstate = led3;
 16a:	82 e0       	ldi	r24, 0x02	; 2
 16c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
			leddata = 0x00;
 170:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <leddata>
		}
		else if(button_getstate(&btnPrev)==ACT_PUSHED){
 174:	36 c0       	rjmp	.+108    	; 0x1e2 <LedMachine_execute+0xc6>
 176:	81 e0       	ldi	r24, 0x01	; 1
 178:	91 e0       	ldi	r25, 0x01	; 1
 17a:	52 d0       	rcall	.+164    	; 0x220 <button_getstate>
 17c:	81 11       	cpse	r24, r1
			ledstate = led1;
 17e:	31 c0       	rjmp	.+98     	; 0x1e2 <LedMachine_execute+0xc6>
 180:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
			leddata = 0x00;
 184:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <leddata>
		}
		break;
		case led3 :
		led3_blink();
 188:	2c c0       	rjmp	.+88     	; 0x1e2 <LedMachine_execute+0xc6>
		if(button_getstate(&btnNext)==ACT_RELEASED){
 18a:	b8 df       	rcall	.-144    	; 0xfc <led3_blink>
 18c:	88 e0       	ldi	r24, 0x08	; 8
 18e:	91 e0       	ldi	r25, 0x01	; 1
 190:	47 d0       	rcall	.+142    	; 0x220 <button_getstate>
 192:	81 30       	cpi	r24, 0x01	; 1
 194:	31 f4       	brne	.+12     	; 0x1a2 <LedMachine_execute+0x86>
			ledstate = led4;
 196:	83 e0       	ldi	r24, 0x03	; 3
 198:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
			leddata = 0x00;
 19c:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <leddata>
		}
		else if(button_getstate(&btnPrev)==ACT_PUSHED){
 1a0:	20 c0       	rjmp	.+64     	; 0x1e2 <LedMachine_execute+0xc6>
 1a2:	81 e0       	ldi	r24, 0x01	; 1
 1a4:	91 e0       	ldi	r25, 0x01	; 1
 1a6:	3c d0       	rcall	.+120    	; 0x220 <button_getstate>
 1a8:	81 11       	cpse	r24, r1
			ledstate = led2;
 1aa:	1b c0       	rjmp	.+54     	; 0x1e2 <LedMachine_execute+0xc6>
 1ac:	81 e0       	ldi	r24, 0x01	; 1
			leddata = 0x00;
 1ae:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 1b2:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <leddata>
		}
		break;
		case led4 :
		led4_blink();
 1b6:	15 c0       	rjmp	.+42     	; 0x1e2 <LedMachine_execute+0xc6>
		if(button_getstate(&btnNext)==ACT_RELEASED){
 1b8:	a9 df       	rcall	.-174    	; 0x10c <led4_blink>
 1ba:	88 e0       	ldi	r24, 0x08	; 8
 1bc:	91 e0       	ldi	r25, 0x01	; 1
 1be:	30 d0       	rcall	.+96     	; 0x220 <button_getstate>
 1c0:	81 30       	cpi	r24, 0x01	; 1
			ledstate = led1;
 1c2:	29 f4       	brne	.+10     	; 0x1ce <LedMachine_execute+0xb2>
 1c4:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
			leddata = 0x00;
 1c8:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <leddata>
		}
		else if(button_getstate(&btnPrev)==ACT_PUSHED){
 1cc:	0a c0       	rjmp	.+20     	; 0x1e2 <LedMachine_execute+0xc6>
 1ce:	81 e0       	ldi	r24, 0x01	; 1
 1d0:	91 e0       	ldi	r25, 0x01	; 1
 1d2:	26 d0       	rcall	.+76     	; 0x220 <button_getstate>
 1d4:	81 11       	cpse	r24, r1
 1d6:	05 c0       	rjmp	.+10     	; 0x1e2 <LedMachine_execute+0xc6>
			ledstate = led3;
 1d8:	82 e0       	ldi	r24, 0x02	; 2
 1da:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
			leddata = 0x00;
 1de:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <leddata>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1e2:	2f ef       	ldi	r18, 0xFF	; 255
 1e4:	81 ee       	ldi	r24, 0xE1	; 225
 1e6:	94 e0       	ldi	r25, 0x04	; 4
 1e8:	21 50       	subi	r18, 0x01	; 1
 1ea:	80 40       	sbci	r24, 0x00	; 0
 1ec:	90 40       	sbci	r25, 0x00	; 0
 1ee:	e1 f7       	brne	.-8      	; 0x1e8 <LedMachine_execute+0xcc>
 1f0:	00 c0       	rjmp	.+0      	; 0x1f2 <LedMachine_execute+0xd6>
 1f2:	00 00       	nop
 1f4:	08 95       	ret

000001f6 <Button_init>:
﻿#include "Button.h"


void Button_init(button_t *btn, volatile uint8_t *ddr, volatile uint8_t *pin, uint8_t pinnum){
 1f6:	fc 01       	movw	r30, r24
	btn ->DDR =ddr;
 1f8:	71 83       	std	Z+1, r23	; 0x01
 1fa:	60 83       	st	Z, r22
	btn->PIN = pin;
 1fc:	53 83       	std	Z+3, r21	; 0x03
 1fe:	42 83       	std	Z+2, r20	; 0x02
	btn->pinNum = pinnum;
 200:	25 83       	std	Z+5, r18	; 0x05
	btn->pS = 1;
 202:	81 e0       	ldi	r24, 0x01	; 1
 204:	84 83       	std	Z+4, r24	; 0x04
	*btn->DDR &= ~(1<<btn->pinNum);
 206:	fb 01       	movw	r30, r22
 208:	30 81       	ld	r19, Z
 20a:	81 e0       	ldi	r24, 0x01	; 1
 20c:	90 e0       	ldi	r25, 0x00	; 0
 20e:	02 c0       	rjmp	.+4      	; 0x214 <Button_init+0x1e>
 210:	88 0f       	add	r24, r24
 212:	99 1f       	adc	r25, r25
 214:	2a 95       	dec	r18
 216:	e2 f7       	brpl	.-8      	; 0x210 <Button_init+0x1a>
 218:	80 95       	com	r24
 21a:	83 23       	and	r24, r19
 21c:	80 83       	st	Z, r24
 21e:	08 95       	ret

00000220 <button_getstate>:
	
}

uint8_t button_getstate(button_t *btn){
 220:	fc 01       	movw	r30, r24
	
	uint8_t curState = *btn->PIN &(1<<btn->pinNum);
 222:	a2 81       	ldd	r26, Z+2	; 0x02
 224:	b3 81       	ldd	r27, Z+3	; 0x03
 226:	8c 91       	ld	r24, X
 228:	21 e0       	ldi	r18, 0x01	; 1
 22a:	30 e0       	ldi	r19, 0x00	; 0
 22c:	05 80       	ldd	r0, Z+5	; 0x05
 22e:	02 c0       	rjmp	.+4      	; 0x234 <button_getstate+0x14>
 230:	22 0f       	add	r18, r18
 232:	33 1f       	adc	r19, r19
 234:	0a 94       	dec	r0
 236:	e2 f7       	brpl	.-8      	; 0x230 <button_getstate+0x10>
 238:	28 23       	and	r18, r24
	if ((curState == 0) &&(btn->pS = 1)){
 23a:	59 f4       	brne	.+22     	; 0x252 <button_getstate+0x32>
 23c:	81 e0       	ldi	r24, 0x01	; 1
 23e:	84 83       	std	Z+4, r24	; 0x04
 240:	8f e3       	ldi	r24, 0x3F	; 63
 242:	9c e9       	ldi	r25, 0x9C	; 156
 244:	01 97       	sbiw	r24, 0x01	; 1
 246:	f1 f7       	brne	.-4      	; 0x244 <button_getstate+0x24>
 248:	00 c0       	rjmp	.+0      	; 0x24a <button_getstate+0x2a>
 24a:	00 00       	nop
		_delay_ms(10);
		btn->pS = PUSHED;
 24c:	14 82       	std	Z+4, r1	; 0x04
		return ACT_PUSHED;
 24e:	80 e0       	ldi	r24, 0x00	; 0
 250:	08 95       	ret
	}
	else if ((curState != 0 )&&(btn->pS == 0)){
 252:	22 23       	and	r18, r18
 254:	61 f0       	breq	.+24     	; 0x26e <button_getstate+0x4e>
 256:	84 81       	ldd	r24, Z+4	; 0x04
 258:	81 11       	cpse	r24, r1
 25a:	0b c0       	rjmp	.+22     	; 0x272 <button_getstate+0x52>
 25c:	8f e3       	ldi	r24, 0x3F	; 63
 25e:	9c e9       	ldi	r25, 0x9C	; 156
 260:	01 97       	sbiw	r24, 0x01	; 1
 262:	f1 f7       	brne	.-4      	; 0x260 <button_getstate+0x40>
 264:	00 c0       	rjmp	.+0      	; 0x266 <button_getstate+0x46>
 266:	00 00       	nop
		_delay_ms(10);
		btn->pS = RELEASED;
 268:	81 e0       	ldi	r24, 0x01	; 1
 26a:	84 83       	std	Z+4, r24	; 0x04
		return ACT_RELEASED;
 26c:	08 95       	ret
	}
	
	return ACT_NONE;
 26e:	82 e0       	ldi	r24, 0x02	; 2
 270:	08 95       	ret
 272:	82 e0       	ldi	r24, 0x02	; 2
 274:	08 95       	ret

00000276 <LED_init>:
	LED_PORT = 0x00;
	
}

void LED_allON(){
	LED_PORT = 0xff;
 276:	8f ef       	ldi	r24, 0xFF	; 255
 278:	81 bb       	out	0x11, r24	; 17
 27a:	08 95       	ret

0000027c <LED_WriteData>:
	
}

void LED_WriteData(uint8_t data){
	LED_PORT = data;
 27c:	82 bb       	out	0x12, r24	; 18
 27e:	08 95       	ret

00000280 <main>:
#include <util/delay.h>
#include "ap/LEDMACHINE/LedMachine.h"

int main(void)
{
	LEDMACHINE_init();
 280:	16 df       	rcall	.-468    	; 0xae <LEDMACHINE_init>

	while (1)
	{
		LedMachine_execute();
 282:	4c df       	rcall	.-360    	; 0x11c <LedMachine_execute>
 284:	fe cf       	rjmp	.-4      	; 0x282 <main+0x2>

00000286 <_exit>:
 286:	f8 94       	cli

00000288 <__stop_program>:
 288:	ff cf       	rjmp	.-2      	; 0x288 <__stop_program>
