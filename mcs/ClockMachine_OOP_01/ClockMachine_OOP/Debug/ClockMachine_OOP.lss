
ClockMachine_OOP.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000005a  00800100  00001028  000010bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001028  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000027  0080015a  0080015a  00001116  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001116  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001174  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002e8  00000000  00000000  000011b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000252a  00000000  00000000  0000149c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001316  00000000  00000000  000039c6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000015c0  00000000  00000000  00004cdc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000005ac  00000000  00000000  0000629c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000a6a  00000000  00000000  00006848  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000d56  00000000  00000000  000072b2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000208  00000000  00000000  00008008  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
       2:	00 00       	nop
       4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
       6:	00 00       	nop
       8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
       a:	00 00       	nop
       c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
       e:	00 00       	nop
      10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
      12:	00 00       	nop
      14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
      16:	00 00       	nop
      18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
      1e:	00 00       	nop
      20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
      22:	00 00       	nop
      24:	7a c0       	rjmp	.+244    	; 0x11a <__vector_9>
      26:	00 00       	nop
      28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
      2e:	00 00       	nop
      30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
      32:	00 00       	nop
      34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
      36:	00 00       	nop
      38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
      3e:	00 00       	nop
      40:	43 c0       	rjmp	.+134    	; 0xc8 <__vector_16>
      42:	00 00       	nop
      44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
      46:	00 00       	nop
      48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
      4e:	00 00       	nop
      50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
      52:	00 00       	nop
      54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
      56:	00 00       	nop
      58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
      5e:	00 00       	nop
      60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
      62:	00 00       	nop
      64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
      66:	00 00       	nop
      68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
      6e:	00 00       	nop
      70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
      72:	00 00       	nop
      74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
      76:	00 00       	nop
      78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
      7e:	00 00       	nop
      80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
      82:	00 00       	nop
      84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
      86:	00 00       	nop
      88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d0 e1       	ldi	r29, 0x10	; 16
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	11 e0       	ldi	r17, 0x01	; 1
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	e8 e2       	ldi	r30, 0x28	; 40
      a0:	f0 e1       	ldi	r31, 0x10	; 16
      a2:	00 e0       	ldi	r16, 0x00	; 0
      a4:	0b bf       	out	0x3b, r16	; 59
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
      a8:	07 90       	elpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	aa 35       	cpi	r26, 0x5A	; 90
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
      b2:	21 e0       	ldi	r18, 0x01	; 1
      b4:	aa e5       	ldi	r26, 0x5A	; 90
      b6:	b1 e0       	ldi	r27, 0x01	; 1
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	a1 38       	cpi	r26, 0x81	; 129
      be:	b2 07       	cpc	r27, r18
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
      c2:	46 d4       	rcall	.+2188   	; 0x950 <main>
      c4:	af c7       	rjmp	.+3934   	; 0x1024 <_exit>

000000c6 <__bad_interrupt>:
      c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <__vector_16>:
ï»¿#include "apMain.h"

ISR(TIMER0_OVF_vect){
      c8:	1f 92       	push	r1
      ca:	0f 92       	push	r0
      cc:	0f b6       	in	r0, 0x3f	; 63
      ce:	0f 92       	push	r0
      d0:	11 24       	eor	r1, r1
      d2:	0b b6       	in	r0, 0x3b	; 59
      d4:	0f 92       	push	r0
      d6:	2f 93       	push	r18
      d8:	3f 93       	push	r19
      da:	4f 93       	push	r20
      dc:	5f 93       	push	r21
      de:	6f 93       	push	r22
      e0:	7f 93       	push	r23
      e2:	8f 93       	push	r24
      e4:	9f 93       	push	r25
      e6:	af 93       	push	r26
      e8:	bf 93       	push	r27
      ea:	ef 93       	push	r30
      ec:	ff 93       	push	r31
	FND_ISR_Process();
      ee:	87 d3       	rcall	.+1806   	; 0x7fe <FND_ISR_Process>
	TCNT0=130;
      f0:	82 e8       	ldi	r24, 0x82	; 130
      f2:	82 bf       	out	0x32, r24	; 50
}
      f4:	ff 91       	pop	r31
      f6:	ef 91       	pop	r30
      f8:	bf 91       	pop	r27
      fa:	af 91       	pop	r26
      fc:	9f 91       	pop	r25
      fe:	8f 91       	pop	r24
     100:	7f 91       	pop	r23
     102:	6f 91       	pop	r22
     104:	5f 91       	pop	r21
     106:	4f 91       	pop	r20
     108:	3f 91       	pop	r19
     10a:	2f 91       	pop	r18
     10c:	0f 90       	pop	r0
     10e:	0b be       	out	0x3b, r0	; 59
     110:	0f 90       	pop	r0
     112:	0f be       	out	0x3f, r0	; 63
     114:	0f 90       	pop	r0
     116:	1f 90       	pop	r1
     118:	18 95       	reti

0000011a <__vector_9>:
ISR(TIMER2_COMP_vect){
     11a:	1f 92       	push	r1
     11c:	0f 92       	push	r0
     11e:	0f b6       	in	r0, 0x3f	; 63
     120:	0f 92       	push	r0
     122:	11 24       	eor	r1, r1
     124:	0b b6       	in	r0, 0x3b	; 59
     126:	0f 92       	push	r0
     128:	2f 93       	push	r18
     12a:	3f 93       	push	r19
     12c:	4f 93       	push	r20
     12e:	5f 93       	push	r21
     130:	6f 93       	push	r22
     132:	7f 93       	push	r23
     134:	8f 93       	push	r24
     136:	9f 93       	push	r25
     138:	af 93       	push	r26
     13a:	bf 93       	push	r27
     13c:	ef 93       	push	r30
     13e:	ff 93       	push	r31
	StopWatch_incMilisec();
     140:	5f d1       	rcall	.+702    	; 0x400 <StopWatch_incMilisec>
}
     142:	ff 91       	pop	r31
     144:	ef 91       	pop	r30
     146:	bf 91       	pop	r27
     148:	af 91       	pop	r26
     14a:	9f 91       	pop	r25
     14c:	8f 91       	pop	r24
     14e:	7f 91       	pop	r23
     150:	6f 91       	pop	r22
     152:	5f 91       	pop	r21
     154:	4f 91       	pop	r20
     156:	3f 91       	pop	r19
     158:	2f 91       	pop	r18
     15a:	0f 90       	pop	r0
     15c:	0b be       	out	0x3b, r0	; 59
     15e:	0f 90       	pop	r0
     160:	0f be       	out	0x3f, r0	; 63
     162:	0f 90       	pop	r0
     164:	1f 90       	pop	r1
     166:	18 95       	reti

00000168 <apMain_init>:

void apMain_init(){
	
	Listener_init();
     168:	12 d0       	rcall	.+36     	; 0x18e <Listener_init>
	StopWatch_init();
     16a:	39 d1       	rcall	.+626    	; 0x3de <StopWatch_init>
	Presenter_init();
     16c:	92 d0       	rcall	.+292    	; 0x292 <Presenter_init>
	TIM0_init();
     16e:	34 d4       	rcall	.+2152   	; 0x9d8 <TIM0_init>
     170:	3c d4       	rcall	.+2168   	; 0x9ea <TIM2_init>
	TIM2_init();
     172:	78 94       	sei
	sei();
     174:	80 e0       	ldi	r24, 0x00	; 0
	Model_getTimeModeData(stopwatch);
     176:	90 e0       	ldi	r25, 0x00	; 0
     178:	86 d0       	rcall	.+268    	; 0x286 <Model_getTimeModeData>
     17a:	80 e0       	ldi	r24, 0x00	; 0
	Model_getTimeClockData(h_m);
     17c:	90 e0       	ldi	r25, 0x00	; 0
     17e:	7d d0       	rcall	.+250    	; 0x27a <Model_getTimeClockData>
     180:	80 e0       	ldi	r24, 0x00	; 0
     182:	90 e0       	ldi	r25, 0x00	; 0
	Model_getStopWatchData(STOP);
     184:	74 c0       	rjmp	.+232    	; 0x26e <Model_getStopWatchData>
     186:	08 95       	ret

00000188 <apMain_execute>:
     188:	69 d0       	rcall	.+210    	; 0x25c <Listener_eventCheck>
     18a:	cb c1       	rjmp	.+918    	; 0x522 <Service_Run>
     18c:	08 95       	ret

0000018e <Listener_init>:
	
}

void apMain_execute(){
	Listener_eventCheck();
	Service_Run();
     18e:	20 e0       	ldi	r18, 0x00	; 0
ï»¿#include "Listener.h"

button_t btnRunStop,btnReset,btnTimeclock,btnTimclocpisph;

void Listener_init(){
	Button_init(&btnRunStop,&DDRA,&PINA,0);
     190:	49 e3       	ldi	r20, 0x39	; 57
     192:	50 e0       	ldi	r21, 0x00	; 0
     194:	6a e3       	ldi	r22, 0x3A	; 58
     196:	70 e0       	ldi	r23, 0x00	; 0
     198:	80 e7       	ldi	r24, 0x70	; 112
     19a:	91 e0       	ldi	r25, 0x01	; 1
     19c:	e1 d1       	rcall	.+962    	; 0x560 <Button_init>
	Button_init(&btnReset,&DDRA,&PINA,1);
     19e:	21 e0       	ldi	r18, 0x01	; 1
     1a0:	49 e3       	ldi	r20, 0x39	; 57
     1a2:	50 e0       	ldi	r21, 0x00	; 0
     1a4:	6a e3       	ldi	r22, 0x3A	; 58
     1a6:	70 e0       	ldi	r23, 0x00	; 0
     1a8:	8a e6       	ldi	r24, 0x6A	; 106
     1aa:	91 e0       	ldi	r25, 0x01	; 1
     1ac:	d9 d1       	rcall	.+946    	; 0x560 <Button_init>
	Button_init(&btnTimeclock,&DDRA,&PINA,2);
     1ae:	22 e0       	ldi	r18, 0x02	; 2
     1b0:	49 e3       	ldi	r20, 0x39	; 57
     1b2:	50 e0       	ldi	r21, 0x00	; 0
     1b4:	6a e3       	ldi	r22, 0x3A	; 58
     1b6:	70 e0       	ldi	r23, 0x00	; 0
     1b8:	8e e5       	ldi	r24, 0x5E	; 94
     1ba:	91 e0       	ldi	r25, 0x01	; 1
     1bc:	d1 d1       	rcall	.+930    	; 0x560 <Button_init>
	Button_init(&btnTimclocpisph,&DDRA,&PINA,3);
     1be:	23 e0       	ldi	r18, 0x03	; 3
     1c0:	49 e3       	ldi	r20, 0x39	; 57
     1c2:	50 e0       	ldi	r21, 0x00	; 0
     1c4:	6a e3       	ldi	r22, 0x3A	; 58
     1c6:	70 e0       	ldi	r23, 0x00	; 0
     1c8:	84 e6       	ldi	r24, 0x64	; 100
     1ca:	91 e0       	ldi	r25, 0x01	; 1
     1cc:	c9 c1       	rjmp	.+914    	; 0x560 <Button_init>
     1ce:	08 95       	ret

000001d0 <Listener_StopWatchEvent>:
}

void Listener_StopWatchEvent(){
	
	uint8_t StopWatchState;
	StopWatchState = Model_getStopWatchData();
     1d0:	4e d0       	rcall	.+156    	; 0x26e <Model_getStopWatchData>
	
	switch(StopWatchState)
     1d2:	81 30       	cpi	r24, 0x01	; 1
     1d4:	d1 f0       	breq	.+52     	; 0x20a <Listener_StopWatchEvent+0x3a>
     1d6:	18 f0       	brcs	.+6      	; 0x1de <Listener_StopWatchEvent+0xe>
     1d8:	82 30       	cpi	r24, 0x02	; 2
     1da:	f9 f0       	breq	.+62     	; 0x21a <Listener_StopWatchEvent+0x4a>
     1dc:	08 95       	ret
	{
		case STOP:
		if (button_getstate(&btnRunStop) == ACT_RELEASED)
     1de:	80 e7       	ldi	r24, 0x70	; 112
     1e0:	91 e0       	ldi	r25, 0x01	; 1
     1e2:	cb d1       	rcall	.+918    	; 0x57a <button_getstate>
     1e4:	81 30       	cpi	r24, 0x01	; 1
		{
			StopWatchState = RUN;
			Model_setStopWatchData(StopWatchState);
     1e6:	11 f4       	brne	.+4      	; 0x1ec <Listener_StopWatchEvent+0x1c>
     1e8:	45 c0       	rjmp	.+138    	; 0x274 <Model_setStopWatchData>
		}
		else if (button_getstate(&btnReset) == ACT_RELEASED){
     1ea:	08 95       	ret
     1ec:	8a e6       	ldi	r24, 0x6A	; 106
     1ee:	91 e0       	ldi	r25, 0x01	; 1
     1f0:	c4 d1       	rcall	.+904    	; 0x57a <button_getstate>
     1f2:	81 30       	cpi	r24, 0x01	; 1
			StopWatchState = RESET;
			Model_setStopWatchData(StopWatchState);
     1f4:	19 f4       	brne	.+6      	; 0x1fc <Listener_StopWatchEvent+0x2c>
     1f6:	82 e0       	ldi	r24, 0x02	; 2
     1f8:	3d c0       	rjmp	.+122    	; 0x274 <Model_setStopWatchData>
		}
		else if (button_getstate(&btnTimeclock) == ACT_RELEASED)
     1fa:	08 95       	ret
     1fc:	8e e5       	ldi	r24, 0x5E	; 94
     1fe:	91 e0       	ldi	r25, 0x01	; 1
     200:	bc d1       	rcall	.+888    	; 0x57a <button_getstate>
		{
			Model_setTimeModeData(timeclock);
     202:	81 30       	cpi	r24, 0x01	; 1
     204:	61 f4       	brne	.+24     	; 0x21e <Listener_StopWatchEvent+0x4e>
		}
		break;
		
		case RUN:
		if (button_getstate(&btnRunStop) == ACT_RELEASED)
     206:	42 c0       	rjmp	.+132    	; 0x28c <Model_setTimeModeData>
     208:	08 95       	ret
     20a:	80 e7       	ldi	r24, 0x70	; 112
     20c:	91 e0       	ldi	r25, 0x01	; 1
     20e:	b5 d1       	rcall	.+874    	; 0x57a <button_getstate>
		{
			StopWatchState = STOP;
			Model_setStopWatchData(StopWatchState);
     210:	81 30       	cpi	r24, 0x01	; 1
     212:	29 f4       	brne	.+10     	; 0x21e <Listener_StopWatchEvent+0x4e>
     214:	80 e0       	ldi	r24, 0x00	; 0
     216:	2e c0       	rjmp	.+92     	; 0x274 <Model_setStopWatchData>
		break;
		
		case RESET:
		{
			StopWatchState = STOP;
			Model_setStopWatchData(StopWatchState);
     218:	08 95       	ret
     21a:	80 e0       	ldi	r24, 0x00	; 0
     21c:	2b c0       	rjmp	.+86     	; 0x274 <Model_setStopWatchData>
     21e:	08 95       	ret

00000220 <Listener_TimeClockEvent>:
		break;
	}
	
}

void Listener_TimeClockEvent(){
     220:	cf 93       	push	r28
	uint8_t TimeClockState, TimeClockPisp;
	TimeClockState = Model_getTimeModeData();
     222:	31 d0       	rcall	.+98     	; 0x286 <Model_getTimeModeData>
     224:	c8 2f       	mov	r28, r24
	TimeClockPisp = Model_getTimeClockData();
     226:	29 d0       	rcall	.+82     	; 0x27a <Model_getTimeClockData>
     228:	c1 30       	cpi	r28, 0x01	; 1
	
	switch(TimeClockState)
     22a:	b1 f4       	brne	.+44     	; 0x258 <Listener_TimeClockEvent+0x38>
     22c:	8e e5       	ldi	r24, 0x5E	; 94
	{
	
		case timeclock:
		if (button_getstate(&btnTimeclock) == ACT_RELEASED)
     22e:	91 e0       	ldi	r25, 0x01	; 1
     230:	a4 d1       	rcall	.+840    	; 0x57a <button_getstate>
     232:	81 30       	cpi	r24, 0x01	; 1
     234:	19 f4       	brne	.+6      	; 0x23c <Listener_TimeClockEvent+0x1c>
		{
			TimeClockState = stopwatch;
			Model_setStopWatchData(TimeClockState);
     236:	80 e0       	ldi	r24, 0x00	; 0
     238:	1d d0       	rcall	.+58     	; 0x274 <Model_setStopWatchData>
     23a:	0e c0       	rjmp	.+28     	; 0x258 <Listener_TimeClockEvent+0x38>
		}
		else if (button_getstate(&btnTimclocpisph) == ACT_RELEASED)
     23c:	84 e6       	ldi	r24, 0x64	; 100
     23e:	91 e0       	ldi	r25, 0x01	; 1
     240:	9c d1       	rcall	.+824    	; 0x57a <button_getstate>
     242:	81 30       	cpi	r24, 0x01	; 1
     244:	11 f4       	brne	.+4      	; 0x24a <Listener_TimeClockEvent+0x2a>
		{
			TimeClockPisp = s_m;
			Model_setTimeClockData(TimeClockPisp);
     246:	1c d0       	rcall	.+56     	; 0x280 <Model_setTimeClockData>
     248:	07 c0       	rjmp	.+14     	; 0x258 <Listener_TimeClockEvent+0x38>
     24a:	84 e6       	ldi	r24, 0x64	; 100
			
		}
		else if (button_getstate(&btnTimclocpisph) == ACT_RELEASED)
     24c:	91 e0       	ldi	r25, 0x01	; 1
     24e:	95 d1       	rcall	.+810    	; 0x57a <button_getstate>
     250:	81 30       	cpi	r24, 0x01	; 1
     252:	11 f4       	brne	.+4      	; 0x258 <Listener_TimeClockEvent+0x38>
     254:	80 e0       	ldi	r24, 0x00	; 0
		{
			TimeClockPisp = h_m;
			Model_setTimeClockData(TimeClockPisp);
     256:	14 d0       	rcall	.+40     	; 0x280 <Model_setTimeClockData>
     258:	cf 91       	pop	r28
     25a:	08 95       	ret

0000025c <Listener_eventCheck>:
			
		}
		break;

	}
     25c:	14 d0       	rcall	.+40     	; 0x286 <Model_getTimeModeData>
     25e:	81 11       	cpse	r24, r1
void Listener_eventCheck(){
	uint8_t Mode;
	Mode = Model_getTimeModeData();
	
	if(Mode == stopwatch ){
		Listener_StopWatchEvent();
     260:	02 c0       	rjmp	.+4      	; 0x266 <Listener_eventCheck+0xa>
     262:	b6 cf       	rjmp	.-148    	; 0x1d0 <Listener_StopWatchEvent>
     264:	08 95       	ret
		}
	else if (Mode == timeclock)
     266:	81 30       	cpi	r24, 0x01	; 1
	{
		Listener_TimeClockEvent();
     268:	09 f4       	brne	.+2      	; 0x26c <Listener_eventCheck+0x10>
     26a:	da cf       	rjmp	.-76     	; 0x220 <Listener_TimeClockEvent>
     26c:	08 95       	ret

0000026e <Model_getStopWatchData>:
uint8_t StopWatchStateData;

uint8_t Model_getStopWatchData()
{
	return StopWatchStateData;
}
     26e:	80 91 76 01 	lds	r24, 0x0176	; 0x800176 <StopWatchStateData>
     272:	08 95       	ret

00000274 <Model_setStopWatchData>:

void Model_setStopWatchData(uint8_t state)
{
	StopWatchStateData = state;
     274:	80 93 76 01 	sts	0x0176, r24	; 0x800176 <StopWatchStateData>
     278:	08 95       	ret

0000027a <Model_getTimeClockData>:
uint8_t TimeClockStateData;

uint8_t Model_getTimeClockData()
{
	return TimeClockStateData;
}
     27a:	80 91 77 01 	lds	r24, 0x0177	; 0x800177 <TimeClockStateData>
     27e:	08 95       	ret

00000280 <Model_setTimeClockData>:

void Model_setTimeClockData(uint8_t state)
{
	TimeClockStateData = state;
     280:	80 93 77 01 	sts	0x0177, r24	; 0x800177 <TimeClockStateData>
     284:	08 95       	ret

00000286 <Model_getTimeModeData>:
uint8_t TimeModeStateData;

uint8_t Model_getTimeModeData()
{
	return TimeModeStateData;
}
     286:	80 91 78 01 	lds	r24, 0x0178	; 0x800178 <TimeModeStateData>
     28a:	08 95       	ret

0000028c <Model_setTimeModeData>:

void Model_setTimeModeData(uint8_t state)
{
	TimeModeStateData = state;
     28c:	80 93 78 01 	sts	0x0178, r24	; 0x800178 <TimeModeStateData>
     290:	08 95       	ret

00000292 <Presenter_init>:
ï»¿#include "Presenter.h"

void Presenter_init(){
	FND_init();
     292:	9e d1       	rcall	.+828    	; 0x5d0 <FND_init>
	LCD_init();
     294:	07 c3       	rjmp	.+1550   	; 0x8a4 <LCD_init>
     296:	08 95       	ret

00000298 <Presenter_dispStopWatchData>:
     298:	af 92       	push	r10
}


void Presenter_dispStopWatchData(uint8_t hour, uint8_t min, uint8_t sec, uint16_t milisec)
{
     29a:	bf 92       	push	r11
     29c:	df 92       	push	r13
     29e:	ef 92       	push	r14
     2a0:	ff 92       	push	r15
     2a2:	0f 93       	push	r16
     2a4:	1f 93       	push	r17
     2a6:	cf 93       	push	r28
     2a8:	df 93       	push	r29
     2aa:	cd b7       	in	r28, 0x3d	; 61
     2ac:	de b7       	in	r29, 0x3e	; 62
     2ae:	6e 97       	sbiw	r28, 0x1e	; 30
     2b0:	0f b6       	in	r0, 0x3f	; 63
     2b2:	f8 94       	cli
     2b4:	de bf       	out	0x3e, r29	; 62
     2b6:	0f be       	out	0x3f, r0	; 63
     2b8:	cd bf       	out	0x3d, r28	; 61
     2ba:	d8 2e       	mov	r13, r24
     2bc:	f6 2e       	mov	r15, r22
     2be:	e4 2e       	mov	r14, r20
     2c0:	89 01       	movw	r16, r18
	uint16_t stopwatch_data;
	
	stopwatch_data = (min%10*1000)+(sec*10)+(milisec/100%10);
     2c2:	8d ec       	ldi	r24, 0xCD	; 205
     2c4:	68 9f       	mul	r22, r24
     2c6:	81 2d       	mov	r24, r1
     2c8:	11 24       	eor	r1, r1
     2ca:	86 95       	lsr	r24
     2cc:	86 95       	lsr	r24
     2ce:	86 95       	lsr	r24
     2d0:	88 0f       	add	r24, r24
     2d2:	98 2f       	mov	r25, r24
     2d4:	99 0f       	add	r25, r25
     2d6:	99 0f       	add	r25, r25
     2d8:	89 0f       	add	r24, r25
     2da:	46 2f       	mov	r20, r22
     2dc:	48 1b       	sub	r20, r24
     2de:	88 ee       	ldi	r24, 0xE8	; 232
     2e0:	93 e0       	ldi	r25, 0x03	; 3
     2e2:	48 9f       	mul	r20, r24
     2e4:	90 01       	movw	r18, r0
     2e6:	49 9f       	mul	r20, r25
     2e8:	30 0d       	add	r19, r0
     2ea:	11 24       	eor	r1, r1
     2ec:	8e 2d       	mov	r24, r14
     2ee:	90 e0       	ldi	r25, 0x00	; 0
     2f0:	ac 01       	movw	r20, r24
     2f2:	44 0f       	add	r20, r20
     2f4:	55 1f       	adc	r21, r21
     2f6:	88 0f       	add	r24, r24
     2f8:	99 1f       	adc	r25, r25
     2fa:	88 0f       	add	r24, r24
     2fc:	99 1f       	adc	r25, r25
     2fe:	88 0f       	add	r24, r24
     300:	99 1f       	adc	r25, r25
     302:	84 0f       	add	r24, r20
     304:	95 1f       	adc	r25, r21
     306:	a9 01       	movw	r20, r18
     308:	48 0f       	add	r20, r24
     30a:	59 1f       	adc	r21, r25
     30c:	98 01       	movw	r18, r16
     30e:	36 95       	lsr	r19
     310:	27 95       	ror	r18
     312:	36 95       	lsr	r19
     314:	27 95       	ror	r18
     316:	ab e7       	ldi	r26, 0x7B	; 123
     318:	b4 e1       	ldi	r27, 0x14	; 20
     31a:	86 d3       	rcall	.+1804   	; 0xa28 <__umulhisi3>
     31c:	fc 01       	movw	r30, r24
     31e:	f6 95       	lsr	r31
     320:	e7 95       	ror	r30
     322:	9f 01       	movw	r18, r30
     324:	ad ec       	ldi	r26, 0xCD	; 205
     326:	bc ec       	ldi	r27, 0xCC	; 204
     328:	7f d3       	rcall	.+1790   	; 0xa28 <__umulhisi3>
     32a:	96 95       	lsr	r25
     32c:	87 95       	ror	r24
     32e:	96 95       	lsr	r25
     330:	87 95       	ror	r24
     332:	96 95       	lsr	r25
     334:	87 95       	ror	r24
     336:	9c 01       	movw	r18, r24
     338:	22 0f       	add	r18, r18
     33a:	33 1f       	adc	r19, r19
     33c:	88 0f       	add	r24, r24
     33e:	99 1f       	adc	r25, r25
     340:	88 0f       	add	r24, r24
     342:	99 1f       	adc	r25, r25
     344:	88 0f       	add	r24, r24
     346:	99 1f       	adc	r25, r25
     348:	82 0f       	add	r24, r18
     34a:	93 1f       	adc	r25, r19
     34c:	9f 01       	movw	r18, r30
     34e:	28 1b       	sub	r18, r24
     350:	39 0b       	sbc	r19, r25
     352:	c9 01       	movw	r24, r18
	FND_setFndData(stopwatch_data);
     354:	84 0f       	add	r24, r20
     356:	95 1f       	adc	r25, r21
     358:	4d d2       	rcall	.+1178   	; 0x7f4 <FND_setFndData>
	
	char buff[30];
	
	sprintf(buff,"Stop Watch");
     35a:	8b e0       	ldi	r24, 0x0B	; 11
     35c:	eb e0       	ldi	r30, 0x0B	; 11
     35e:	f1 e0       	ldi	r31, 0x01	; 1
     360:	9e 01       	movw	r18, r28
     362:	2f 5f       	subi	r18, 0xFF	; 255
     364:	3f 4f       	sbci	r19, 0xFF	; 255
     366:	59 01       	movw	r10, r18
     368:	d9 01       	movw	r26, r18
     36a:	01 90       	ld	r0, Z+
     36c:	0d 92       	st	X+, r0
     36e:	8a 95       	dec	r24
     370:	e1 f7       	brne	.-8      	; 0x36a <Presenter_dispStopWatchData+0xd2>
	LCD_writeStringXY(0,3,buff);
     372:	a9 01       	movw	r20, r18
     374:	63 e0       	ldi	r22, 0x03	; 3
     376:	80 e0       	ldi	r24, 0x00	; 0
     378:	e2 d2       	rcall	.+1476   	; 0x93e <LCD_writeStringXY>
	sprintf(buff,"%02d:%02d:%02d:%02d",hour,min,sec,milisec/10);
     37a:	98 01       	movw	r18, r16
     37c:	ad ec       	ldi	r26, 0xCD	; 205
     37e:	bc ec       	ldi	r27, 0xCC	; 204
     380:	53 d3       	rcall	.+1702   	; 0xa28 <__umulhisi3>
     382:	96 95       	lsr	r25
     384:	87 95       	ror	r24
     386:	96 95       	lsr	r25
     388:	87 95       	ror	r24
     38a:	96 95       	lsr	r25
     38c:	87 95       	ror	r24
     38e:	9f 93       	push	r25
     390:	8f 93       	push	r24
     392:	1f 92       	push	r1
     394:	ef 92       	push	r14
     396:	1f 92       	push	r1
     398:	ff 92       	push	r15
     39a:	1f 92       	push	r1
     39c:	df 92       	push	r13
     39e:	86 e1       	ldi	r24, 0x16	; 22
     3a0:	91 e0       	ldi	r25, 0x01	; 1
     3a2:	9f 93       	push	r25
     3a4:	8f 93       	push	r24
     3a6:	bf 92       	push	r11
     3a8:	af 92       	push	r10
     3aa:	61 d3       	rcall	.+1730   	; 0xa6e <sprintf>
	LCD_writeStringXY(1,2,buff);
     3ac:	a5 01       	movw	r20, r10
     3ae:	62 e0       	ldi	r22, 0x02	; 2
     3b0:	81 e0       	ldi	r24, 0x01	; 1
     3b2:	c5 d2       	rcall	.+1418   	; 0x93e <LCD_writeStringXY>
     3b4:	0f b6       	in	r0, 0x3f	; 63
}
     3b6:	f8 94       	cli
     3b8:	de bf       	out	0x3e, r29	; 62
     3ba:	0f be       	out	0x3f, r0	; 63
     3bc:	cd bf       	out	0x3d, r28	; 61
     3be:	6e 96       	adiw	r28, 0x1e	; 30
     3c0:	0f b6       	in	r0, 0x3f	; 63
     3c2:	f8 94       	cli
     3c4:	de bf       	out	0x3e, r29	; 62
     3c6:	0f be       	out	0x3f, r0	; 63
     3c8:	cd bf       	out	0x3d, r28	; 61
     3ca:	df 91       	pop	r29
     3cc:	cf 91       	pop	r28
     3ce:	1f 91       	pop	r17
     3d0:	0f 91       	pop	r16
     3d2:	ff 90       	pop	r15
     3d4:	ef 90       	pop	r14
     3d6:	df 90       	pop	r13
     3d8:	bf 90       	pop	r11
     3da:	af 90       	pop	r10
     3dc:	08 95       	ret

000003de <StopWatch_init>:
uint16_t milisec;
uint16_t sec, min, hour;

void StopWatch_init(){
	
	milisec = 0;
     3de:	10 92 7a 01 	sts	0x017A, r1	; 0x80017a <milisec+0x1>
     3e2:	10 92 79 01 	sts	0x0179, r1	; 0x800179 <milisec>
	sec = 0;
     3e6:	10 92 80 01 	sts	0x0180, r1	; 0x800180 <sec+0x1>
     3ea:	10 92 7f 01 	sts	0x017F, r1	; 0x80017f <sec>
	min = 0;
     3ee:	10 92 7e 01 	sts	0x017E, r1	; 0x80017e <min+0x1>
     3f2:	10 92 7d 01 	sts	0x017D, r1	; 0x80017d <min>
	hour = 0;
     3f6:	10 92 7c 01 	sts	0x017C, r1	; 0x80017c <hour+0x1>
     3fa:	10 92 7b 01 	sts	0x017B, r1	; 0x80017b <hour>
     3fe:	08 95       	ret

00000400 <StopWatch_incMilisec>:
}

void StopWatch_incMilisec(){
	uint8_t StopWatchState;
	
	StopWatchState=Model_getStopWatchData();
     400:	36 df       	rcall	.-404    	; 0x26e <Model_getStopWatchData>
	
	if (StopWatchState == RUN){
     402:	81 30       	cpi	r24, 0x01	; 1
     404:	09 f0       	breq	.+2      	; 0x408 <StopWatch_incMilisec+0x8>
     406:	8c c0       	rjmp	.+280    	; 0x520 <StopWatch_incMilisec+0x120>
		milisec = (milisec+1)%1000;
     408:	40 91 79 01 	lds	r20, 0x0179	; 0x800179 <milisec>
     40c:	50 91 7a 01 	lds	r21, 0x017A	; 0x80017a <milisec+0x1>
     410:	4f 5f       	subi	r20, 0xFF	; 255
     412:	5f 4f       	sbci	r21, 0xFF	; 255
     414:	9a 01       	movw	r18, r20
     416:	36 95       	lsr	r19
     418:	27 95       	ror	r18
     41a:	36 95       	lsr	r19
     41c:	27 95       	ror	r18
     41e:	36 95       	lsr	r19
     420:	27 95       	ror	r18
     422:	a5 ec       	ldi	r26, 0xC5	; 197
     424:	b0 e2       	ldi	r27, 0x20	; 32
     426:	00 d3       	rcall	.+1536   	; 0xa28 <__umulhisi3>
     428:	92 95       	swap	r25
     42a:	82 95       	swap	r24
     42c:	8f 70       	andi	r24, 0x0F	; 15
     42e:	89 27       	eor	r24, r25
     430:	9f 70       	andi	r25, 0x0F	; 15
     432:	89 27       	eor	r24, r25
     434:	68 ee       	ldi	r22, 0xE8	; 232
     436:	73 e0       	ldi	r23, 0x03	; 3
     438:	86 9f       	mul	r24, r22
     43a:	90 01       	movw	r18, r0
     43c:	87 9f       	mul	r24, r23
     43e:	30 0d       	add	r19, r0
     440:	96 9f       	mul	r25, r22
     442:	30 0d       	add	r19, r0
     444:	11 24       	eor	r1, r1
     446:	ca 01       	movw	r24, r20
     448:	82 1b       	sub	r24, r18
     44a:	93 0b       	sbc	r25, r19
     44c:	90 93 7a 01 	sts	0x017A, r25	; 0x80017a <milisec+0x1>
     450:	80 93 79 01 	sts	0x0179, r24	; 0x800179 <milisec>
	}
	else return;
	
	if(milisec)return;
     454:	89 2b       	or	r24, r25
     456:	09 f0       	breq	.+2      	; 0x45a <StopWatch_incMilisec+0x5a>
     458:	63 c0       	rjmp	.+198    	; 0x520 <StopWatch_incMilisec+0x120>
	
	sec = (sec +1)%60;
     45a:	40 91 7f 01 	lds	r20, 0x017F	; 0x80017f <sec>
     45e:	50 91 80 01 	lds	r21, 0x0180	; 0x800180 <sec+0x1>
     462:	4f 5f       	subi	r20, 0xFF	; 255
     464:	5f 4f       	sbci	r21, 0xFF	; 255
     466:	9a 01       	movw	r18, r20
     468:	a9 e8       	ldi	r26, 0x89	; 137
     46a:	b8 e8       	ldi	r27, 0x88	; 136
     46c:	dd d2       	rcall	.+1466   	; 0xa28 <__umulhisi3>
     46e:	96 95       	lsr	r25
     470:	87 95       	ror	r24
     472:	92 95       	swap	r25
     474:	82 95       	swap	r24
     476:	8f 70       	andi	r24, 0x0F	; 15
     478:	89 27       	eor	r24, r25
     47a:	9f 70       	andi	r25, 0x0F	; 15
     47c:	89 27       	eor	r24, r25
     47e:	6c e3       	ldi	r22, 0x3C	; 60
     480:	68 9f       	mul	r22, r24
     482:	90 01       	movw	r18, r0
     484:	69 9f       	mul	r22, r25
     486:	30 0d       	add	r19, r0
     488:	11 24       	eor	r1, r1
     48a:	ca 01       	movw	r24, r20
     48c:	82 1b       	sub	r24, r18
     48e:	93 0b       	sbc	r25, r19
     490:	90 93 80 01 	sts	0x0180, r25	; 0x800180 <sec+0x1>
     494:	80 93 7f 01 	sts	0x017F, r24	; 0x80017f <sec>
	if (sec) return;
     498:	89 2b       	or	r24, r25
     49a:	09 f0       	breq	.+2      	; 0x49e <StopWatch_incMilisec+0x9e>
     49c:	41 c0       	rjmp	.+130    	; 0x520 <StopWatch_incMilisec+0x120>
	
	min = (min +1)%60;
     49e:	40 91 7d 01 	lds	r20, 0x017D	; 0x80017d <min>
     4a2:	50 91 7e 01 	lds	r21, 0x017E	; 0x80017e <min+0x1>
     4a6:	4f 5f       	subi	r20, 0xFF	; 255
     4a8:	5f 4f       	sbci	r21, 0xFF	; 255
     4aa:	9a 01       	movw	r18, r20
     4ac:	bd d2       	rcall	.+1402   	; 0xa28 <__umulhisi3>
     4ae:	96 95       	lsr	r25
     4b0:	87 95       	ror	r24
     4b2:	92 95       	swap	r25
     4b4:	82 95       	swap	r24
     4b6:	8f 70       	andi	r24, 0x0F	; 15
     4b8:	89 27       	eor	r24, r25
     4ba:	9f 70       	andi	r25, 0x0F	; 15
     4bc:	89 27       	eor	r24, r25
     4be:	6c e3       	ldi	r22, 0x3C	; 60
     4c0:	68 9f       	mul	r22, r24
     4c2:	90 01       	movw	r18, r0
     4c4:	69 9f       	mul	r22, r25
     4c6:	30 0d       	add	r19, r0
     4c8:	11 24       	eor	r1, r1
     4ca:	ca 01       	movw	r24, r20
     4cc:	82 1b       	sub	r24, r18
     4ce:	93 0b       	sbc	r25, r19
     4d0:	90 93 7e 01 	sts	0x017E, r25	; 0x80017e <min+0x1>
     4d4:	80 93 7d 01 	sts	0x017D, r24	; 0x80017d <min>
	if(min) return;
     4d8:	89 2b       	or	r24, r25
     4da:	11 f5       	brne	.+68     	; 0x520 <StopWatch_incMilisec+0x120>
	
	hour = (hour +1) %24;
     4dc:	40 91 7b 01 	lds	r20, 0x017B	; 0x80017b <hour>
     4e0:	50 91 7c 01 	lds	r21, 0x017C	; 0x80017c <hour+0x1>
     4e4:	4f 5f       	subi	r20, 0xFF	; 255
     4e6:	5f 4f       	sbci	r21, 0xFF	; 255
     4e8:	9a 01       	movw	r18, r20
     4ea:	ab ea       	ldi	r26, 0xAB	; 171
     4ec:	ba ea       	ldi	r27, 0xAA	; 170
     4ee:	9c d2       	rcall	.+1336   	; 0xa28 <__umulhisi3>
     4f0:	92 95       	swap	r25
     4f2:	82 95       	swap	r24
     4f4:	8f 70       	andi	r24, 0x0F	; 15
     4f6:	89 27       	eor	r24, r25
     4f8:	9f 70       	andi	r25, 0x0F	; 15
     4fa:	89 27       	eor	r24, r25
     4fc:	9c 01       	movw	r18, r24
     4fe:	22 0f       	add	r18, r18
     500:	33 1f       	adc	r19, r19
     502:	82 0f       	add	r24, r18
     504:	93 1f       	adc	r25, r19
     506:	88 0f       	add	r24, r24
     508:	99 1f       	adc	r25, r25
     50a:	88 0f       	add	r24, r24
     50c:	99 1f       	adc	r25, r25
     50e:	88 0f       	add	r24, r24
     510:	99 1f       	adc	r25, r25
     512:	9a 01       	movw	r18, r20
     514:	28 1b       	sub	r18, r24
     516:	39 0b       	sbc	r19, r25
     518:	30 93 7c 01 	sts	0x017C, r19	; 0x80017c <hour+0x1>
     51c:	20 93 7b 01 	sts	0x017B, r18	; 0x80017b <hour>
     520:	08 95       	ret

00000522 <Service_Run>:


void Service_Run(){
	
	uint8_t StopWatchState;
	StopWatchState = Model_getStopWatchData();
     522:	a5 de       	rcall	.-694    	; 0x26e <Model_getStopWatchData>
	
	if(StopWatchState == RESET){
     524:	82 30       	cpi	r24, 0x02	; 2
     526:	81 f4       	brne	.+32     	; 0x548 <Service_Run+0x26>
		milisec = 0;
     528:	10 92 7a 01 	sts	0x017A, r1	; 0x80017a <milisec+0x1>
     52c:	10 92 79 01 	sts	0x0179, r1	; 0x800179 <milisec>
		sec = 0;
     530:	10 92 80 01 	sts	0x0180, r1	; 0x800180 <sec+0x1>
     534:	10 92 7f 01 	sts	0x017F, r1	; 0x80017f <sec>
		min = 0;
     538:	10 92 7e 01 	sts	0x017E, r1	; 0x80017e <min+0x1>
     53c:	10 92 7d 01 	sts	0x017D, r1	; 0x80017d <min>
		hour = 0;
     540:	10 92 7c 01 	sts	0x017C, r1	; 0x80017c <hour+0x1>
     544:	10 92 7b 01 	sts	0x017B, r1	; 0x80017b <hour>
	}
	Presenter_dispStopWatchData(hour,min,sec,milisec);
     548:	20 91 79 01 	lds	r18, 0x0179	; 0x800179 <milisec>
     54c:	30 91 7a 01 	lds	r19, 0x017A	; 0x80017a <milisec+0x1>
     550:	40 91 7f 01 	lds	r20, 0x017F	; 0x80017f <sec>
     554:	60 91 7d 01 	lds	r22, 0x017D	; 0x80017d <min>
     558:	80 91 7b 01 	lds	r24, 0x017B	; 0x80017b <hour>
     55c:	9d ce       	rjmp	.-710    	; 0x298 <Presenter_dispStopWatchData>
     55e:	08 95       	ret

00000560 <Button_init>:
ï»¿#include "button.h"


void Button_init(button_t *btn, volatile uint8_t *ddr, volatile uint8_t *pin, uint8_t pinnum){
     560:	fc 01       	movw	r30, r24
     562:	cb 01       	movw	r24, r22
	btn ->DDR =ddr;
     564:	71 83       	std	Z+1, r23	; 0x01
     566:	60 83       	st	Z, r22
	btn->PIN = pin;
     568:	53 83       	std	Z+3, r21	; 0x03
     56a:	42 83       	std	Z+2, r20	; 0x02
	btn->pinNum = pinnum;
     56c:	25 83       	std	Z+5, r18	; 0x05
	btn->pS = 1;
     56e:	31 e0       	ldi	r19, 0x01	; 1
     570:	34 83       	std	Z+4, r19	; 0x04
	Gpio_initPin(ddr,1,pinnum);
     572:	42 2f       	mov	r20, r18
     574:	61 e0       	ldi	r22, 0x01	; 1
     576:	f8 c1       	rjmp	.+1008   	; 0x968 <Gpio_initPin>
     578:	08 95       	ret

0000057a <button_getstate>:
	
}

uint8_t button_getstate(button_t *btn){
     57a:	fc 01       	movw	r30, r24
	
	uint8_t curState = *btn->PIN &(1<<btn->pinNum);
     57c:	a2 81       	ldd	r26, Z+2	; 0x02
     57e:	b3 81       	ldd	r27, Z+3	; 0x03
     580:	8c 91       	ld	r24, X
     582:	21 e0       	ldi	r18, 0x01	; 1
     584:	30 e0       	ldi	r19, 0x00	; 0
     586:	05 80       	ldd	r0, Z+5	; 0x05
     588:	02 c0       	rjmp	.+4      	; 0x58e <button_getstate+0x14>
     58a:	22 0f       	add	r18, r18
     58c:	33 1f       	adc	r19, r19
     58e:	0a 94       	dec	r0
     590:	e2 f7       	brpl	.-8      	; 0x58a <button_getstate+0x10>
     592:	28 23       	and	r18, r24
	if ((curState == 0) &&(btn->pS = 1)){
     594:	59 f4       	brne	.+22     	; 0x5ac <button_getstate+0x32>
     596:	81 e0       	ldi	r24, 0x01	; 1
     598:	84 83       	std	Z+4, r24	; 0x04
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     59a:	8f e3       	ldi	r24, 0x3F	; 63
     59c:	9c e9       	ldi	r25, 0x9C	; 156
     59e:	01 97       	sbiw	r24, 0x01	; 1
     5a0:	f1 f7       	brne	.-4      	; 0x59e <button_getstate+0x24>
     5a2:	00 c0       	rjmp	.+0      	; 0x5a4 <button_getstate+0x2a>
     5a4:	00 00       	nop
		_delay_ms(10);
		btn->pS = PUSHED;
     5a6:	14 82       	std	Z+4, r1	; 0x04
		
		
		return ACT_PUSHED;
     5a8:	80 e0       	ldi	r24, 0x00	; 0
     5aa:	08 95       	ret
	}
	else if ((curState != 0 )&&(btn->pS == 0)){
     5ac:	22 23       	and	r18, r18
     5ae:	61 f0       	breq	.+24     	; 0x5c8 <button_getstate+0x4e>
     5b0:	84 81       	ldd	r24, Z+4	; 0x04
     5b2:	81 11       	cpse	r24, r1
     5b4:	0b c0       	rjmp	.+22     	; 0x5cc <button_getstate+0x52>
     5b6:	8f e3       	ldi	r24, 0x3F	; 63
     5b8:	9c e9       	ldi	r25, 0x9C	; 156
     5ba:	01 97       	sbiw	r24, 0x01	; 1
     5bc:	f1 f7       	brne	.-4      	; 0x5ba <button_getstate+0x40>
     5be:	00 c0       	rjmp	.+0      	; 0x5c0 <button_getstate+0x46>
     5c0:	00 00       	nop
		_delay_ms(10);
		btn->pS = RELEASED;
     5c2:	81 e0       	ldi	r24, 0x01	; 1
     5c4:	84 83       	std	Z+4, r24	; 0x04
		return ACT_RELEASED;
     5c6:	08 95       	ret
	}
	
	return ACT_NONE;
     5c8:	82 e0       	ldi	r24, 0x02	; 2
     5ca:	08 95       	ret
     5cc:	82 e0       	ldi	r24, 0x02	; 2
     5ce:	08 95       	ret

000005d0 <FND_init>:

void FND_colonON(){
	fndColonFlag = 1;
}
void FND_colonOFF(){
	fndColonFlag = 0;
     5d0:	82 b1       	in	r24, 0x02	; 2
     5d2:	80 6f       	ori	r24, 0xF0	; 240
     5d4:	82 b9       	out	0x02, r24	; 2
     5d6:	8f ef       	ldi	r24, 0xFF	; 255
     5d8:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
     5dc:	08 95       	ret

000005de <FND_dispNum>:
}

void FND_dispNum(uint16_t fndNum){
     5de:	0f 93       	push	r16
     5e0:	1f 93       	push	r17
     5e2:	cf 93       	push	r28
     5e4:	df 93       	push	r29
     5e6:	cd b7       	in	r28, 0x3d	; 61
     5e8:	de b7       	in	r29, 0x3e	; 62
     5ea:	2b 97       	sbiw	r28, 0x0b	; 11
     5ec:	0f b6       	in	r0, 0x3f	; 63
     5ee:	f8 94       	cli
     5f0:	de bf       	out	0x3e, r29	; 62
     5f2:	0f be       	out	0x3f, r0	; 63
     5f4:	cd bf       	out	0x3d, r28	; 61
     5f6:	8c 01       	movw	r16, r24
	
	uint8_t fndFont[] = {0x3f,0x06,0x5b,0x4f,0x66,0x6d,0x7d,0x07,0x7f,0x6f,0x80};
     5f8:	8b e0       	ldi	r24, 0x0B	; 11
     5fa:	e0 e0       	ldi	r30, 0x00	; 0
     5fc:	f1 e0       	ldi	r31, 0x01	; 1
     5fe:	de 01       	movw	r26, r28
     600:	11 96       	adiw	r26, 0x01	; 1
     602:	01 90       	ld	r0, Z+
     604:	0d 92       	st	X+, r0
     606:	8a 95       	dec	r24
     608:	e1 f7       	brne	.-8      	; 0x602 <FND_dispNum+0x24>
	
	static uint8_t fndDigitState = 0;
	
	fndDigitState = (fndDigitState+1)%5;
     60a:	80 91 5a 01 	lds	r24, 0x015A	; 0x80015a <__data_end>
     60e:	90 e0       	ldi	r25, 0x00	; 0
     610:	01 96       	adiw	r24, 0x01	; 1
     612:	65 e0       	ldi	r22, 0x05	; 5
     614:	70 e0       	ldi	r23, 0x00	; 0
     616:	f5 d1       	rcall	.+1002   	; 0xa02 <__divmodhi4>
     618:	80 93 5a 01 	sts	0x015A, r24	; 0x80015a <__data_end>
	
	switch (fndDigitState)
     61c:	82 30       	cpi	r24, 0x02	; 2
     61e:	09 f4       	brne	.+2      	; 0x622 <FND_dispNum+0x44>
     620:	78 c0       	rjmp	.+240    	; 0x712 <FND_dispNum+0x134>
     622:	30 f4       	brcc	.+12     	; 0x630 <FND_dispNum+0x52>
     624:	88 23       	and	r24, r24
     626:	59 f0       	breq	.+22     	; 0x63e <FND_dispNum+0x60>
     628:	81 30       	cpi	r24, 0x01	; 1
     62a:	09 f4       	brne	.+2      	; 0x62e <FND_dispNum+0x50>
     62c:	40 c0       	rjmp	.+128    	; 0x6ae <FND_dispNum+0xd0>
     62e:	d7 c0       	rjmp	.+430    	; 0x7de <FND_dispNum+0x200>
     630:	83 30       	cpi	r24, 0x03	; 3
     632:	09 f4       	brne	.+2      	; 0x636 <FND_dispNum+0x58>
     634:	9e c0       	rjmp	.+316    	; 0x772 <FND_dispNum+0x194>
     636:	84 30       	cpi	r24, 0x04	; 4
     638:	09 f4       	brne	.+2      	; 0x63c <FND_dispNum+0x5e>
     63a:	c2 c0       	rjmp	.+388    	; 0x7c0 <FND_dispNum+0x1e2>
     63c:	d0 c0       	rjmp	.+416    	; 0x7de <FND_dispNum+0x200>
	{
		case 0:
		PORTE |= ((1<<7)|(1<<6)|(1<<5)|(1<<4));
     63e:	83 b1       	in	r24, 0x03	; 3
     640:	80 6f       	ori	r24, 0xF0	; 240
     642:	83 b9       	out	0x03, r24	; 3
		PORTF = fndFont[fndNum/1000%10];
     644:	98 01       	movw	r18, r16
     646:	36 95       	lsr	r19
     648:	27 95       	ror	r18
     64a:	36 95       	lsr	r19
     64c:	27 95       	ror	r18
     64e:	36 95       	lsr	r19
     650:	27 95       	ror	r18
     652:	a5 ec       	ldi	r26, 0xC5	; 197
     654:	b0 e2       	ldi	r27, 0x20	; 32
     656:	e8 d1       	rcall	.+976    	; 0xa28 <__umulhisi3>
     658:	ac 01       	movw	r20, r24
     65a:	52 95       	swap	r21
     65c:	42 95       	swap	r20
     65e:	4f 70       	andi	r20, 0x0F	; 15
     660:	45 27       	eor	r20, r21
     662:	5f 70       	andi	r21, 0x0F	; 15
     664:	45 27       	eor	r20, r21
     666:	9a 01       	movw	r18, r20
     668:	ad ec       	ldi	r26, 0xCD	; 205
     66a:	bc ec       	ldi	r27, 0xCC	; 204
     66c:	dd d1       	rcall	.+954    	; 0xa28 <__umulhisi3>
     66e:	96 95       	lsr	r25
     670:	87 95       	ror	r24
     672:	96 95       	lsr	r25
     674:	87 95       	ror	r24
     676:	96 95       	lsr	r25
     678:	87 95       	ror	r24
     67a:	9c 01       	movw	r18, r24
     67c:	22 0f       	add	r18, r18
     67e:	33 1f       	adc	r19, r19
     680:	88 0f       	add	r24, r24
     682:	99 1f       	adc	r25, r25
     684:	88 0f       	add	r24, r24
     686:	99 1f       	adc	r25, r25
     688:	88 0f       	add	r24, r24
     68a:	99 1f       	adc	r25, r25
     68c:	82 0f       	add	r24, r18
     68e:	93 1f       	adc	r25, r19
     690:	9a 01       	movw	r18, r20
     692:	28 1b       	sub	r18, r24
     694:	39 0b       	sbc	r19, r25
     696:	e1 e0       	ldi	r30, 0x01	; 1
     698:	f0 e0       	ldi	r31, 0x00	; 0
     69a:	ec 0f       	add	r30, r28
     69c:	fd 1f       	adc	r31, r29
     69e:	e2 0f       	add	r30, r18
     6a0:	f3 1f       	adc	r31, r19
     6a2:	80 81       	ld	r24, Z
     6a4:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
		PORTE = ~(1<<4);
     6a8:	8f ee       	ldi	r24, 0xEF	; 239
     6aa:	83 b9       	out	0x03, r24	; 3
		//_delay_ms(1);
		break;
     6ac:	98 c0       	rjmp	.+304    	; 0x7de <FND_dispNum+0x200>
		
		case 1:
		PORTE |= ((1<<7)|(1<<6)|(1<<5)|(1<<4));
     6ae:	83 b1       	in	r24, 0x03	; 3
     6b0:	80 6f       	ori	r24, 0xF0	; 240
     6b2:	83 b9       	out	0x03, r24	; 3
		PORTF = fndFont[fndNum/100%10];
     6b4:	98 01       	movw	r18, r16
     6b6:	36 95       	lsr	r19
     6b8:	27 95       	ror	r18
     6ba:	36 95       	lsr	r19
     6bc:	27 95       	ror	r18
     6be:	ab e7       	ldi	r26, 0x7B	; 123
     6c0:	b4 e1       	ldi	r27, 0x14	; 20
     6c2:	b2 d1       	rcall	.+868    	; 0xa28 <__umulhisi3>
     6c4:	ac 01       	movw	r20, r24
     6c6:	56 95       	lsr	r21
     6c8:	47 95       	ror	r20
     6ca:	9a 01       	movw	r18, r20
     6cc:	ad ec       	ldi	r26, 0xCD	; 205
     6ce:	bc ec       	ldi	r27, 0xCC	; 204
     6d0:	ab d1       	rcall	.+854    	; 0xa28 <__umulhisi3>
     6d2:	96 95       	lsr	r25
     6d4:	87 95       	ror	r24
     6d6:	96 95       	lsr	r25
     6d8:	87 95       	ror	r24
     6da:	96 95       	lsr	r25
     6dc:	87 95       	ror	r24
     6de:	9c 01       	movw	r18, r24
     6e0:	22 0f       	add	r18, r18
     6e2:	33 1f       	adc	r19, r19
     6e4:	88 0f       	add	r24, r24
     6e6:	99 1f       	adc	r25, r25
     6e8:	88 0f       	add	r24, r24
     6ea:	99 1f       	adc	r25, r25
     6ec:	88 0f       	add	r24, r24
     6ee:	99 1f       	adc	r25, r25
     6f0:	82 0f       	add	r24, r18
     6f2:	93 1f       	adc	r25, r19
     6f4:	9a 01       	movw	r18, r20
     6f6:	28 1b       	sub	r18, r24
     6f8:	39 0b       	sbc	r19, r25
     6fa:	e1 e0       	ldi	r30, 0x01	; 1
     6fc:	f0 e0       	ldi	r31, 0x00	; 0
     6fe:	ec 0f       	add	r30, r28
     700:	fd 1f       	adc	r31, r29
     702:	e2 0f       	add	r30, r18
     704:	f3 1f       	adc	r31, r19
     706:	80 81       	ld	r24, Z
     708:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
		PORTE = ~(1<<5);
     70c:	8f ed       	ldi	r24, 0xDF	; 223
     70e:	83 b9       	out	0x03, r24	; 3
		//_delay_ms(1);
		break;
     710:	66 c0       	rjmp	.+204    	; 0x7de <FND_dispNum+0x200>
		case 2:
		PORTE |= ((1<<7)|(1<<6)|(1<<5)|(1<<4));
     712:	83 b1       	in	r24, 0x03	; 3
     714:	80 6f       	ori	r24, 0xF0	; 240
		PORTF = fndFont[fndNum/10%10];
     716:	83 b9       	out	0x03, r24	; 3
     718:	98 01       	movw	r18, r16
     71a:	ad ec       	ldi	r26, 0xCD	; 205
     71c:	bc ec       	ldi	r27, 0xCC	; 204
     71e:	84 d1       	rcall	.+776    	; 0xa28 <__umulhisi3>
     720:	ac 01       	movw	r20, r24
     722:	56 95       	lsr	r21
     724:	47 95       	ror	r20
     726:	56 95       	lsr	r21
     728:	47 95       	ror	r20
     72a:	56 95       	lsr	r21
     72c:	47 95       	ror	r20
     72e:	9a 01       	movw	r18, r20
     730:	7b d1       	rcall	.+758    	; 0xa28 <__umulhisi3>
     732:	96 95       	lsr	r25
     734:	87 95       	ror	r24
     736:	96 95       	lsr	r25
     738:	87 95       	ror	r24
     73a:	96 95       	lsr	r25
     73c:	87 95       	ror	r24
     73e:	9c 01       	movw	r18, r24
     740:	22 0f       	add	r18, r18
     742:	33 1f       	adc	r19, r19
     744:	88 0f       	add	r24, r24
     746:	99 1f       	adc	r25, r25
     748:	88 0f       	add	r24, r24
     74a:	99 1f       	adc	r25, r25
     74c:	88 0f       	add	r24, r24
     74e:	99 1f       	adc	r25, r25
     750:	82 0f       	add	r24, r18
     752:	93 1f       	adc	r25, r19
     754:	9a 01       	movw	r18, r20
     756:	28 1b       	sub	r18, r24
     758:	39 0b       	sbc	r19, r25
     75a:	e1 e0       	ldi	r30, 0x01	; 1
     75c:	f0 e0       	ldi	r31, 0x00	; 0
     75e:	ec 0f       	add	r30, r28
     760:	fd 1f       	adc	r31, r29
     762:	e2 0f       	add	r30, r18
     764:	f3 1f       	adc	r31, r19
     766:	80 81       	ld	r24, Z
     768:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
		PORTE = ~(1<<6);
     76c:	8f eb       	ldi	r24, 0xBF	; 191
     76e:	83 b9       	out	0x03, r24	; 3
		//_delay_ms(1);
		break;
		case 3:
		PORTE |= ((1<<7)|(1<<6)|(1<<5)|(1<<4));
     770:	36 c0       	rjmp	.+108    	; 0x7de <FND_dispNum+0x200>
     772:	83 b1       	in	r24, 0x03	; 3
     774:	80 6f       	ori	r24, 0xF0	; 240
		PORTF = fndFont[fndNum%10];
     776:	83 b9       	out	0x03, r24	; 3
     778:	98 01       	movw	r18, r16
     77a:	ad ec       	ldi	r26, 0xCD	; 205
     77c:	bc ec       	ldi	r27, 0xCC	; 204
     77e:	54 d1       	rcall	.+680    	; 0xa28 <__umulhisi3>
     780:	96 95       	lsr	r25
     782:	87 95       	ror	r24
     784:	96 95       	lsr	r25
     786:	87 95       	ror	r24
     788:	96 95       	lsr	r25
     78a:	87 95       	ror	r24
     78c:	9c 01       	movw	r18, r24
     78e:	22 0f       	add	r18, r18
     790:	33 1f       	adc	r19, r19
     792:	88 0f       	add	r24, r24
     794:	99 1f       	adc	r25, r25
     796:	88 0f       	add	r24, r24
     798:	99 1f       	adc	r25, r25
     79a:	88 0f       	add	r24, r24
     79c:	99 1f       	adc	r25, r25
     79e:	82 0f       	add	r24, r18
     7a0:	93 1f       	adc	r25, r19
     7a2:	98 01       	movw	r18, r16
     7a4:	28 1b       	sub	r18, r24
     7a6:	39 0b       	sbc	r19, r25
     7a8:	e1 e0       	ldi	r30, 0x01	; 1
     7aa:	f0 e0       	ldi	r31, 0x00	; 0
     7ac:	ec 0f       	add	r30, r28
     7ae:	fd 1f       	adc	r31, r29
     7b0:	e2 0f       	add	r30, r18
     7b2:	f3 1f       	adc	r31, r19
     7b4:	80 81       	ld	r24, Z
     7b6:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
		PORTE = ~(1<<7);
     7ba:	8f e7       	ldi	r24, 0x7F	; 127
     7bc:	83 b9       	out	0x03, r24	; 3
		//_delay_ms(1);
		break;
     7be:	0f c0       	rjmp	.+30     	; 0x7de <FND_dispNum+0x200>
		case 4:
		PORTE |= ((1<<7)|(1<<6)|(1<<5)|(1<<4));
     7c0:	83 b1       	in	r24, 0x03	; 3
     7c2:	80 6f       	ori	r24, 0xF0	; 240
     7c4:	83 b9       	out	0x03, r24	; 3
		if(fndColonFlag) {
     7c6:	80 91 5b 01 	lds	r24, 0x015B	; 0x80015b <fndColonFlag>
     7ca:	88 23       	and	r24, r24
     7cc:	21 f0       	breq	.+8      	; 0x7d6 <FND_dispNum+0x1f8>
			PORTF = fndFont[10];}
     7ce:	8b 85       	ldd	r24, Y+11	; 0x0b
     7d0:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     7d4:	02 c0       	rjmp	.+4      	; 0x7da <FND_dispNum+0x1fc>
		else{ 
		PORTF=0x00;
     7d6:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
		}
		PORTE = ~(1<<5);
     7da:	8f ed       	ldi	r24, 0xDF	; 223
     7dc:	83 b9       	out	0x03, r24	; 3
		break;
	}
	
}
     7de:	2b 96       	adiw	r28, 0x0b	; 11
     7e0:	0f b6       	in	r0, 0x3f	; 63
     7e2:	f8 94       	cli
     7e4:	de bf       	out	0x3e, r29	; 62
     7e6:	0f be       	out	0x3f, r0	; 63
     7e8:	cd bf       	out	0x3d, r28	; 61
     7ea:	df 91       	pop	r29
     7ec:	cf 91       	pop	r28
     7ee:	1f 91       	pop	r17
     7f0:	0f 91       	pop	r16
     7f2:	08 95       	ret

000007f4 <FND_setFndData>:

void FND_setFndData(uint16_t data){
	fndData = data;
     7f4:	90 93 5d 01 	sts	0x015D, r25	; 0x80015d <fndData+0x1>
     7f8:	80 93 5c 01 	sts	0x015C, r24	; 0x80015c <fndData>
     7fc:	08 95       	ret

000007fe <FND_ISR_Process>:
}

void FND_ISR_Process(){
	FND_dispNum(fndData);
     7fe:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <fndData>
     802:	90 91 5d 01 	lds	r25, 0x015D	; 0x80015d <fndData+0x1>
     806:	eb ce       	rjmp	.-554    	; 0x5de <FND_dispNum>
     808:	08 95       	ret

0000080a <Gpio_init>:
}

void Gpio_init()
{
	//LCD_CONTROL_DDR |= (1<<LCD_RS) | (1<<LCD_RW) | (1<<LCD_E);
	Gpio_initPin(&LCD_CONTROL_DDR,OUTPUT,LCD_RS);
     80a:	45 e0       	ldi	r20, 0x05	; 5
     80c:	60 e0       	ldi	r22, 0x00	; 0
     80e:	87 e3       	ldi	r24, 0x37	; 55
     810:	90 e0       	ldi	r25, 0x00	; 0
     812:	aa d0       	rcall	.+340    	; 0x968 <Gpio_initPin>
	Gpio_initPin(&LCD_CONTROL_DDR,OUTPUT,LCD_RW);
     814:	46 e0       	ldi	r20, 0x06	; 6
     816:	60 e0       	ldi	r22, 0x00	; 0
     818:	87 e3       	ldi	r24, 0x37	; 55
     81a:	90 e0       	ldi	r25, 0x00	; 0
     81c:	a5 d0       	rcall	.+330    	; 0x968 <Gpio_initPin>
	Gpio_initPin(&LCD_CONTROL_DDR,OUTPUT,LCD_E);
     81e:	47 e0       	ldi	r20, 0x07	; 7
     820:	60 e0       	ldi	r22, 0x00	; 0
     822:	87 e3       	ldi	r24, 0x37	; 55
     824:	90 e0       	ldi	r25, 0x00	; 0
     826:	a0 d0       	rcall	.+320    	; 0x968 <Gpio_initPin>
	
	//LCD_DATA_DDR = 0xff;
	Gpio_initPort(&LCD_DATA_DDR,OUTPUT);
     828:	60 e0       	ldi	r22, 0x00	; 0
     82a:	84 e3       	ldi	r24, 0x34	; 52
     82c:	90 e0       	ldi	r25, 0x00	; 0
     82e:	93 c0       	rjmp	.+294    	; 0x956 <Gpio_initPort>
     830:	08 95       	ret

00000832 <LCD_cmdMode>:

void LCD_cmdMode()
{
	// RS pin : bit 0 set
	//LCD_CONTROL_PORT &= ~(1<<LCD_RS);
	Gpio_writePin(&LCD_CONTROL_PORT,LCD_RS,GPIO_PIN_RESET);
     832:	40 e0       	ldi	r20, 0x00	; 0
     834:	65 e0       	ldi	r22, 0x05	; 5
     836:	88 e3       	ldi	r24, 0x38	; 56
     838:	90 e0       	ldi	r25, 0x00	; 0
     83a:	b4 c0       	rjmp	.+360    	; 0x9a4 <Gpio_writePin>
     83c:	08 95       	ret

0000083e <LCD_charMode>:
}

void LCD_charMode()
{
	// RS pin : bit 0 set
	Gpio_writePin(&LCD_CONTROL_PORT,LCD_RS,GPIO_PIN_SET);
     83e:	41 e0       	ldi	r20, 0x01	; 1
     840:	65 e0       	ldi	r22, 0x05	; 5
     842:	88 e3       	ldi	r24, 0x38	; 56
     844:	90 e0       	ldi	r25, 0x00	; 0
     846:	ae c0       	rjmp	.+348    	; 0x9a4 <Gpio_writePin>
     848:	08 95       	ret

0000084a <LCD_writeMode>:
}

void LCD_writeMode()
{
	// RW pin : bit 0 set
	Gpio_writePin(&LCD_CONTROL_PORT,LCD_RW,GPIO_PIN_RESET);
     84a:	40 e0       	ldi	r20, 0x00	; 0
     84c:	66 e0       	ldi	r22, 0x06	; 6
     84e:	88 e3       	ldi	r24, 0x38	; 56
     850:	90 e0       	ldi	r25, 0x00	; 0
     852:	a8 c0       	rjmp	.+336    	; 0x9a4 <Gpio_writePin>
     854:	08 95       	ret

00000856 <LCD_enableHigh>:
}

void LCD_enableHigh()
{
	// E pin : bit 1 set
	Gpio_writePin(&LCD_CONTROL_PORT,LCD_E,GPIO_PIN_SET);
     856:	41 e0       	ldi	r20, 0x01	; 1
     858:	67 e0       	ldi	r22, 0x07	; 7
     85a:	88 e3       	ldi	r24, 0x38	; 56
     85c:	90 e0       	ldi	r25, 0x00	; 0
     85e:	a2 d0       	rcall	.+324    	; 0x9a4 <Gpio_writePin>
     860:	8f e9       	ldi	r24, 0x9F	; 159
     862:	9f e0       	ldi	r25, 0x0F	; 15
     864:	01 97       	sbiw	r24, 0x01	; 1
     866:	f1 f7       	brne	.-4      	; 0x864 <LCD_enableHigh+0xe>
     868:	00 c0       	rjmp	.+0      	; 0x86a <LCD_enableHigh+0x14>
     86a:	00 00       	nop
     86c:	08 95       	ret

0000086e <LCD_enableLow>:
}

void LCD_enableLow()
{
	// E pin : bit 0 set
	Gpio_writePin(&LCD_CONTROL_PORT,LCD_E,GPIO_PIN_RESET);
     86e:	40 e0       	ldi	r20, 0x00	; 0
     870:	67 e0       	ldi	r22, 0x07	; 7
     872:	88 e3       	ldi	r24, 0x38	; 56
     874:	90 e0       	ldi	r25, 0x00	; 0
     876:	96 d0       	rcall	.+300    	; 0x9a4 <Gpio_writePin>
     878:	8f e9       	ldi	r24, 0x9F	; 159
     87a:	9f e0       	ldi	r25, 0x0F	; 15
     87c:	01 97       	sbiw	r24, 0x01	; 1
     87e:	f1 f7       	brne	.-4      	; 0x87c <LCD_enableLow+0xe>
     880:	00 c0       	rjmp	.+0      	; 0x882 <LCD_enableLow+0x14>
     882:	00 00       	nop
     884:	08 95       	ret

00000886 <LCD_writeByte>:
}

void LCD_writeByte(uint8_t data)
{
	// 8 bit PORTC write
	Gpio_writePort(&LCD_DATA_PORT,data);
     886:	68 2f       	mov	r22, r24
     888:	85 e3       	ldi	r24, 0x35	; 53
     88a:	90 e0       	ldi	r25, 0x00	; 0
     88c:	88 c0       	rjmp	.+272    	; 0x99e <Gpio_writePort>
     88e:	08 95       	ret

00000890 <LCD_writeCmdData>:


// MCU -> LCD ëªë ¹ì´ë¥¼ ë³´ë¼ ê²½ì° (write mode)

void LCD_writeCmdData(uint8_t data)
{
     890:	cf 93       	push	r28
     892:	c8 2f       	mov	r28, r24
	// LCD ëªë ¹ì´ ì ë¬
	LCD_cmdMode();
     894:	ce df       	rcall	.-100    	; 0x832 <LCD_cmdMode>
	LCD_writeMode();
     896:	d9 df       	rcall	.-78     	; 0x84a <LCD_writeMode>
	LCD_enableHigh();
     898:	de df       	rcall	.-68     	; 0x856 <LCD_enableHigh>
	LCD_writeByte(data);
     89a:	8c 2f       	mov	r24, r28
     89c:	f4 df       	rcall	.-24     	; 0x886 <LCD_writeByte>
     89e:	e7 df       	rcall	.-50     	; 0x86e <LCD_enableLow>
	LCD_enableLow();
     8a0:	cf 91       	pop	r28
     8a2:	08 95       	ret

000008a4 <LCD_init>:
	
}
     8a4:	b2 df       	rcall	.-156    	; 0x80a <Gpio_init>
     8a6:	8f e5       	ldi	r24, 0x5F	; 95
     8a8:	9a ee       	ldi	r25, 0xEA	; 234
     8aa:	01 97       	sbiw	r24, 0x01	; 1
     8ac:	f1 f7       	brne	.-4      	; 0x8aa <LCD_init+0x6>
     8ae:	00 c0       	rjmp	.+0      	; 0x8b0 <LCD_init+0xc>
     8b0:	00 00       	nop
void LCD_init()
{
	Gpio_init();
	
	_delay_ms(15);
	LCD_writeCmdData(LCD_8bit_FUNCTION_SET);   // LCD_8bit_FUNCTION_SET      0x38
     8b2:	88 e3       	ldi	r24, 0x38	; 56
     8b4:	ed df       	rcall	.-38     	; 0x890 <LCD_writeCmdData>
     8b6:	8f e1       	ldi	r24, 0x1F	; 31
     8b8:	9e e4       	ldi	r25, 0x4E	; 78
     8ba:	01 97       	sbiw	r24, 0x01	; 1
     8bc:	f1 f7       	brne	.-4      	; 0x8ba <LCD_init+0x16>
     8be:	00 c0       	rjmp	.+0      	; 0x8c0 <LCD_init+0x1c>
	_delay_ms(5);
	LCD_writeCmdData(LCD_8bit_FUNCTION_SET);   // LCD_8bit_FUNCTION_SET      0x38
     8c0:	00 00       	nop
     8c2:	88 e3       	ldi	r24, 0x38	; 56
     8c4:	e5 df       	rcall	.-54     	; 0x890 <LCD_writeCmdData>
     8c6:	8f e9       	ldi	r24, 0x9F	; 159
     8c8:	9f e0       	ldi	r25, 0x0F	; 15
     8ca:	01 97       	sbiw	r24, 0x01	; 1
     8cc:	f1 f7       	brne	.-4      	; 0x8ca <LCD_init+0x26>
     8ce:	00 c0       	rjmp	.+0      	; 0x8d0 <LCD_init+0x2c>
	_delay_ms(1);
	LCD_writeCmdData(LCD_8bit_FUNCTION_SET);   // LCD_8bit_FUNCTION_SET      0x38
     8d0:	00 00       	nop
     8d2:	88 e3       	ldi	r24, 0x38	; 56
	LCD_writeCmdData(LCD_8bit_FUNCTION_SET);   // LCD_8bit_FUNCTION_SET      0x38
     8d4:	dd df       	rcall	.-70     	; 0x890 <LCD_writeCmdData>
     8d6:	88 e3       	ldi	r24, 0x38	; 56
	LCD_writeCmdData(LCD_DISPLAY_OFF);         // LCD_DISPLAY_OFF            0x08
     8d8:	db df       	rcall	.-74     	; 0x890 <LCD_writeCmdData>
     8da:	88 e0       	ldi	r24, 0x08	; 8
	LCD_writeCmdData(LCD_DISPLAY_CLEAR);      // LCD_DISPLAY_CLEAR         0x01
     8dc:	d9 df       	rcall	.-78     	; 0x890 <LCD_writeCmdData>
     8de:	81 e0       	ldi	r24, 0x01	; 1
     8e0:	d7 df       	rcall	.-82     	; 0x890 <LCD_writeCmdData>
	LCD_writeCmdData(LCD_ENTRY_MODE_SET);      // LCD_ENTRY_MODE_SET         0x06
     8e2:	86 e0       	ldi	r24, 0x06	; 6
     8e4:	d5 df       	rcall	.-86     	; 0x890 <LCD_writeCmdData>
     8e6:	8c e0       	ldi	r24, 0x0C	; 12
	LCD_writeCmdData(LCD_DISPLAY_ON);         // LCD_DISPLAY_ON            0x0C
     8e8:	d3 cf       	rjmp	.-90     	; 0x890 <LCD_writeCmdData>
     8ea:	08 95       	ret

000008ec <LCD_writeCharData>:
     8ec:	cf 93       	push	r28
     8ee:	c8 2f       	mov	r28, r24

// MCU -> LCD Dataë¥¼ ë³´ë¼ ê²½ì° (write mode)
void LCD_writeCharData(uint8_t data)
{
	// LCD Character ì°ê¸° ì ë¬
	LCD_charMode();
     8f0:	a6 df       	rcall	.-180    	; 0x83e <LCD_charMode>
	LCD_writeMode();
     8f2:	ab df       	rcall	.-170    	; 0x84a <LCD_writeMode>
	LCD_enableHigh();
     8f4:	b0 df       	rcall	.-160    	; 0x856 <LCD_enableHigh>
	LCD_writeByte(data);
     8f6:	8c 2f       	mov	r24, r28
     8f8:	c6 df       	rcall	.-116    	; 0x886 <LCD_writeByte>
     8fa:	b9 df       	rcall	.-142    	; 0x86e <LCD_enableLow>
	LCD_enableLow();
     8fc:	cf 91       	pop	r28
     8fe:	08 95       	ret

00000900 <LCD_writeString>:
}
     900:	0f 93       	push	r16
     902:	1f 93       	push	r17

void LCD_writeString(char *str)
{
     904:	cf 93       	push	r28
     906:	df 93       	push	r29
     908:	8c 01       	movw	r16, r24
	for(int i=0; str[i] ; i++)
     90a:	c0 e0       	ldi	r28, 0x00	; 0
     90c:	d0 e0       	ldi	r29, 0x00	; 0
     90e:	02 c0       	rjmp	.+4      	; 0x914 <LCD_writeString+0x14>
	{
		LCD_writeCharData(str[i]);
     910:	ed df       	rcall	.-38     	; 0x8ec <LCD_writeCharData>
	LCD_enableLow();
}

void LCD_writeString(char *str)
{
	for(int i=0; str[i] ; i++)
     912:	21 96       	adiw	r28, 0x01	; 1
     914:	f8 01       	movw	r30, r16
     916:	ec 0f       	add	r30, r28
     918:	fd 1f       	adc	r31, r29
     91a:	80 81       	ld	r24, Z
     91c:	81 11       	cpse	r24, r1
     91e:	f8 cf       	rjmp	.-16     	; 0x910 <LCD_writeString+0x10>
	{
		LCD_writeCharData(str[i]);
	}
}
     920:	df 91       	pop	r29
     922:	cf 91       	pop	r28
     924:	1f 91       	pop	r17
     926:	0f 91       	pop	r16
     928:	08 95       	ret

0000092a <LCD_gotoXY>:

void LCD_gotoXY(uint8_t row, uint8_t col)
{
	col%= 16; row %=2;
     92a:	6f 70       	andi	r22, 0x0F	; 15
     92c:	81 70       	andi	r24, 0x01	; 1
	uint8_t lcdregisterAddress = (0x40 * row ) + col;
     92e:	90 e4       	ldi	r25, 0x40	; 64
     930:	89 9f       	mul	r24, r25
     932:	60 0d       	add	r22, r0
     934:	11 24       	eor	r1, r1
     936:	86 2f       	mov	r24, r22
	uint8_t command = 0x80 + lcdregisterAddress;
	LCD_writeCmdData(command);
     938:	80 58       	subi	r24, 0x80	; 128
     93a:	aa cf       	rjmp	.-172    	; 0x890 <LCD_writeCmdData>
     93c:	08 95       	ret

0000093e <LCD_writeStringXY>:
}

void LCD_writeStringXY(uint8_t row, uint8_t col, char *str)
{
     93e:	cf 93       	push	r28
     940:	df 93       	push	r29
     942:	ea 01       	movw	r28, r20
	LCD_gotoXY(row,col);
     944:	f2 df       	rcall	.-28     	; 0x92a <LCD_gotoXY>
	LCD_writeString(str);
     946:	ce 01       	movw	r24, r28
     948:	db df       	rcall	.-74     	; 0x900 <LCD_writeString>
}
     94a:	df 91       	pop	r29
     94c:	cf 91       	pop	r28
     94e:	08 95       	ret

00000950 <main>:
#include <util/delay.h>


int main(void)
{
	apMain_init();
     950:	0b dc       	rcall	.-2026   	; 0x168 <apMain_init>
	
    while (1) 
    {
		apMain_execute();
     952:	1a dc       	rcall	.-1996   	; 0x188 <apMain_execute>
     954:	fe cf       	rjmp	.-4      	; 0x952 <main+0x2>

00000956 <Gpio_initPort>:
     956:	61 11       	cpse	r22, r1
ï»¿#include "GPIO.h"

void Gpio_initPort(volatile uint8_t*DDR, uint8_t dir ){
	
	if(dir == OUTPUT){
     958:	04 c0       	rjmp	.+8      	; 0x962 <Gpio_initPort+0xc>
		*DDR = 0xff;
     95a:	2f ef       	ldi	r18, 0xFF	; 255
     95c:	fc 01       	movw	r30, r24
     95e:	20 83       	st	Z, r18
     960:	08 95       	ret
	}
	else{
		*DDR =  0x00;
     962:	fc 01       	movw	r30, r24
     964:	10 82       	st	Z, r1
     966:	08 95       	ret

00000968 <Gpio_initPin>:
	
}

void Gpio_initPin(volatile uint8_t *DDR, uint8_t dir, uint8_t pinNum){
	
	if(dir == OUTPUT){
     968:	61 11       	cpse	r22, r1
     96a:	0c c0       	rjmp	.+24     	; 0x984 <Gpio_initPin+0x1c>
		*DDR |= (1<<pinNum);
     96c:	fc 01       	movw	r30, r24
     96e:	50 81       	ld	r21, Z
     970:	21 e0       	ldi	r18, 0x01	; 1
     972:	30 e0       	ldi	r19, 0x00	; 0
     974:	02 c0       	rjmp	.+4      	; 0x97a <Gpio_initPin+0x12>
     976:	22 0f       	add	r18, r18
     978:	33 1f       	adc	r19, r19
     97a:	4a 95       	dec	r20
     97c:	e2 f7       	brpl	.-8      	; 0x976 <Gpio_initPin+0xe>
     97e:	25 2b       	or	r18, r21
     980:	20 83       	st	Z, r18
     982:	08 95       	ret
	}
	else{
		*DDR &= ~(1<<pinNum); 
     984:	fc 01       	movw	r30, r24
     986:	50 81       	ld	r21, Z
     988:	21 e0       	ldi	r18, 0x01	; 1
     98a:	30 e0       	ldi	r19, 0x00	; 0
     98c:	02 c0       	rjmp	.+4      	; 0x992 <Gpio_initPin+0x2a>
     98e:	22 0f       	add	r18, r18
     990:	33 1f       	adc	r19, r19
     992:	4a 95       	dec	r20
     994:	e2 f7       	brpl	.-8      	; 0x98e <Gpio_initPin+0x26>
     996:	20 95       	com	r18
     998:	25 23       	and	r18, r21
     99a:	20 83       	st	Z, r18
     99c:	08 95       	ret

0000099e <Gpio_writePort>:
	
}

void Gpio_writePort(volatile uint8_t *PORT, uint8_t data){
	
	*PORT = data;
     99e:	fc 01       	movw	r30, r24
     9a0:	60 83       	st	Z, r22
     9a2:	08 95       	ret

000009a4 <Gpio_writePin>:
	
}

void Gpio_writePin(volatile uint8_t *PORT, uint8_t pinNum, uint8_t State){
     9a4:	fc 01       	movw	r30, r24
	if(State == GPIO_PIN_SET){
     9a6:	41 30       	cpi	r20, 0x01	; 1
     9a8:	59 f4       	brne	.+22     	; 0x9c0 <Gpio_writePin+0x1c>
		*PORT |=(1<<pinNum);
     9aa:	20 81       	ld	r18, Z
     9ac:	81 e0       	ldi	r24, 0x01	; 1
     9ae:	90 e0       	ldi	r25, 0x00	; 0
     9b0:	02 c0       	rjmp	.+4      	; 0x9b6 <Gpio_writePin+0x12>
     9b2:	88 0f       	add	r24, r24
     9b4:	99 1f       	adc	r25, r25
     9b6:	6a 95       	dec	r22
     9b8:	e2 f7       	brpl	.-8      	; 0x9b2 <Gpio_writePin+0xe>
     9ba:	82 2b       	or	r24, r18
     9bc:	80 83       	st	Z, r24
     9be:	08 95       	ret
	}
	else{
		*PORT &= ~(1<<pinNum);
     9c0:	90 81       	ld	r25, Z
     9c2:	21 e0       	ldi	r18, 0x01	; 1
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	02 c0       	rjmp	.+4      	; 0x9cc <Gpio_writePin+0x28>
     9c8:	22 0f       	add	r18, r18
     9ca:	33 1f       	adc	r19, r19
     9cc:	6a 95       	dec	r22
     9ce:	e2 f7       	brpl	.-8      	; 0x9c8 <Gpio_writePin+0x24>
     9d0:	20 95       	com	r18
     9d2:	29 23       	and	r18, r25
     9d4:	20 83       	st	Z, r18
     9d6:	08 95       	ret

000009d8 <TIM0_init>:
ï»¿#include "TIM.h"

void TIM0_init(){
	
	TCCR0 |= ((1<<CS02)|(0<<CS01)|(1<<CS00)); //128 preScaler
     9d8:	83 b7       	in	r24, 0x33	; 51
     9da:	85 60       	ori	r24, 0x05	; 5
     9dc:	83 bf       	out	0x33, r24	; 51
	TIMSK |= (1<<TOIE0);					  //TIMSK Timer/counter
     9de:	87 b7       	in	r24, 0x37	; 55
     9e0:	81 60       	ori	r24, 0x01	; 1
     9e2:	87 bf       	out	0x37, r24	; 55
	TCNT0=130;
     9e4:	82 e8       	ldi	r24, 0x82	; 130
     9e6:	82 bf       	out	0x32, r24	; 50
     9e8:	08 95       	ret

000009ea <TIM2_init>:
ï»¿#include "TIM2.h"

void TIM2_init(){
	
		//timer/counter 2 1/64 1ms period interrupt, ctc mode
		TCCR2 |= ((0<<CS22)|(1<<CS21)|(1<<CS20));	// 1/64 prescaler
     9ea:	85 b5       	in	r24, 0x25	; 37
     9ec:	83 60       	ori	r24, 0x03	; 3
     9ee:	85 bd       	out	0x25, r24	; 37
		TIMSK |= (1<<OCIE2);
     9f0:	87 b7       	in	r24, 0x37	; 55
     9f2:	80 68       	ori	r24, 0x80	; 128
     9f4:	87 bf       	out	0x37, r24	; 55
		
		//CTC MODE
		TCCR2 |= ((1<<WGM21) | (0<<WGM20));
     9f6:	85 b5       	in	r24, 0x25	; 37
     9f8:	88 60       	ori	r24, 0x08	; 8
     9fa:	85 bd       	out	0x25, r24	; 37
		OCR2 = 250-1;
     9fc:	89 ef       	ldi	r24, 0xF9	; 249
     9fe:	83 bd       	out	0x23, r24	; 35
     a00:	08 95       	ret

00000a02 <__divmodhi4>:
     a02:	97 fb       	bst	r25, 7
     a04:	07 2e       	mov	r0, r23
     a06:	16 f4       	brtc	.+4      	; 0xa0c <__divmodhi4+0xa>
     a08:	00 94       	com	r0
     a0a:	06 d0       	rcall	.+12     	; 0xa18 <__divmodhi4_neg1>
     a0c:	77 fd       	sbrc	r23, 7
     a0e:	08 d0       	rcall	.+16     	; 0xa20 <__divmodhi4_neg2>
     a10:	1a d0       	rcall	.+52     	; 0xa46 <__udivmodhi4>
     a12:	07 fc       	sbrc	r0, 7
     a14:	05 d0       	rcall	.+10     	; 0xa20 <__divmodhi4_neg2>
     a16:	3e f4       	brtc	.+14     	; 0xa26 <__divmodhi4_exit>

00000a18 <__divmodhi4_neg1>:
     a18:	90 95       	com	r25
     a1a:	81 95       	neg	r24
     a1c:	9f 4f       	sbci	r25, 0xFF	; 255
     a1e:	08 95       	ret

00000a20 <__divmodhi4_neg2>:
     a20:	70 95       	com	r23
     a22:	61 95       	neg	r22
     a24:	7f 4f       	sbci	r23, 0xFF	; 255

00000a26 <__divmodhi4_exit>:
     a26:	08 95       	ret

00000a28 <__umulhisi3>:
     a28:	a2 9f       	mul	r26, r18
     a2a:	b0 01       	movw	r22, r0
     a2c:	b3 9f       	mul	r27, r19
     a2e:	c0 01       	movw	r24, r0
     a30:	a3 9f       	mul	r26, r19
     a32:	70 0d       	add	r23, r0
     a34:	81 1d       	adc	r24, r1
     a36:	11 24       	eor	r1, r1
     a38:	91 1d       	adc	r25, r1
     a3a:	b2 9f       	mul	r27, r18
     a3c:	70 0d       	add	r23, r0
     a3e:	81 1d       	adc	r24, r1
     a40:	11 24       	eor	r1, r1
     a42:	91 1d       	adc	r25, r1
     a44:	08 95       	ret

00000a46 <__udivmodhi4>:
     a46:	aa 1b       	sub	r26, r26
     a48:	bb 1b       	sub	r27, r27
     a4a:	51 e1       	ldi	r21, 0x11	; 17
     a4c:	07 c0       	rjmp	.+14     	; 0xa5c <__udivmodhi4_ep>

00000a4e <__udivmodhi4_loop>:
     a4e:	aa 1f       	adc	r26, r26
     a50:	bb 1f       	adc	r27, r27
     a52:	a6 17       	cp	r26, r22
     a54:	b7 07       	cpc	r27, r23
     a56:	10 f0       	brcs	.+4      	; 0xa5c <__udivmodhi4_ep>
     a58:	a6 1b       	sub	r26, r22
     a5a:	b7 0b       	sbc	r27, r23

00000a5c <__udivmodhi4_ep>:
     a5c:	88 1f       	adc	r24, r24
     a5e:	99 1f       	adc	r25, r25
     a60:	5a 95       	dec	r21
     a62:	a9 f7       	brne	.-22     	; 0xa4e <__udivmodhi4_loop>
     a64:	80 95       	com	r24
     a66:	90 95       	com	r25
     a68:	bc 01       	movw	r22, r24
     a6a:	cd 01       	movw	r24, r26
     a6c:	08 95       	ret

00000a6e <sprintf>:
     a6e:	0f 93       	push	r16
     a70:	1f 93       	push	r17
     a72:	cf 93       	push	r28
     a74:	df 93       	push	r29
     a76:	cd b7       	in	r28, 0x3d	; 61
     a78:	de b7       	in	r29, 0x3e	; 62
     a7a:	2e 97       	sbiw	r28, 0x0e	; 14
     a7c:	0f b6       	in	r0, 0x3f	; 63
     a7e:	f8 94       	cli
     a80:	de bf       	out	0x3e, r29	; 62
     a82:	0f be       	out	0x3f, r0	; 63
     a84:	cd bf       	out	0x3d, r28	; 61
     a86:	0d 89       	ldd	r16, Y+21	; 0x15
     a88:	1e 89       	ldd	r17, Y+22	; 0x16
     a8a:	86 e0       	ldi	r24, 0x06	; 6
     a8c:	8c 83       	std	Y+4, r24	; 0x04
     a8e:	1a 83       	std	Y+2, r17	; 0x02
     a90:	09 83       	std	Y+1, r16	; 0x01
     a92:	8f ef       	ldi	r24, 0xFF	; 255
     a94:	9f e7       	ldi	r25, 0x7F	; 127
     a96:	9e 83       	std	Y+6, r25	; 0x06
     a98:	8d 83       	std	Y+5, r24	; 0x05
     a9a:	ae 01       	movw	r20, r28
     a9c:	47 5e       	subi	r20, 0xE7	; 231
     a9e:	5f 4f       	sbci	r21, 0xFF	; 255
     aa0:	6f 89       	ldd	r22, Y+23	; 0x17
     aa2:	78 8d       	ldd	r23, Y+24	; 0x18
     aa4:	ce 01       	movw	r24, r28
     aa6:	01 96       	adiw	r24, 0x01	; 1
     aa8:	10 d0       	rcall	.+32     	; 0xaca <vfprintf>
     aaa:	ef 81       	ldd	r30, Y+7	; 0x07
     aac:	f8 85       	ldd	r31, Y+8	; 0x08
     aae:	e0 0f       	add	r30, r16
     ab0:	f1 1f       	adc	r31, r17
     ab2:	10 82       	st	Z, r1
     ab4:	2e 96       	adiw	r28, 0x0e	; 14
     ab6:	0f b6       	in	r0, 0x3f	; 63
     ab8:	f8 94       	cli
     aba:	de bf       	out	0x3e, r29	; 62
     abc:	0f be       	out	0x3f, r0	; 63
     abe:	cd bf       	out	0x3d, r28	; 61
     ac0:	df 91       	pop	r29
     ac2:	cf 91       	pop	r28
     ac4:	1f 91       	pop	r17
     ac6:	0f 91       	pop	r16
     ac8:	08 95       	ret

00000aca <vfprintf>:
     aca:	2f 92       	push	r2
     acc:	3f 92       	push	r3
     ace:	4f 92       	push	r4
     ad0:	5f 92       	push	r5
     ad2:	6f 92       	push	r6
     ad4:	7f 92       	push	r7
     ad6:	8f 92       	push	r8
     ad8:	9f 92       	push	r9
     ada:	af 92       	push	r10
     adc:	bf 92       	push	r11
     ade:	cf 92       	push	r12
     ae0:	df 92       	push	r13
     ae2:	ef 92       	push	r14
     ae4:	ff 92       	push	r15
     ae6:	0f 93       	push	r16
     ae8:	1f 93       	push	r17
     aea:	cf 93       	push	r28
     aec:	df 93       	push	r29
     aee:	cd b7       	in	r28, 0x3d	; 61
     af0:	de b7       	in	r29, 0x3e	; 62
     af2:	2b 97       	sbiw	r28, 0x0b	; 11
     af4:	0f b6       	in	r0, 0x3f	; 63
     af6:	f8 94       	cli
     af8:	de bf       	out	0x3e, r29	; 62
     afa:	0f be       	out	0x3f, r0	; 63
     afc:	cd bf       	out	0x3d, r28	; 61
     afe:	6c 01       	movw	r12, r24
     b00:	7b 01       	movw	r14, r22
     b02:	8a 01       	movw	r16, r20
     b04:	fc 01       	movw	r30, r24
     b06:	17 82       	std	Z+7, r1	; 0x07
     b08:	16 82       	std	Z+6, r1	; 0x06
     b0a:	83 81       	ldd	r24, Z+3	; 0x03
     b0c:	81 ff       	sbrs	r24, 1
     b0e:	bf c1       	rjmp	.+894    	; 0xe8e <vfprintf+0x3c4>
     b10:	ce 01       	movw	r24, r28
     b12:	01 96       	adiw	r24, 0x01	; 1
     b14:	3c 01       	movw	r6, r24
     b16:	f6 01       	movw	r30, r12
     b18:	93 81       	ldd	r25, Z+3	; 0x03
     b1a:	f7 01       	movw	r30, r14
     b1c:	93 fd       	sbrc	r25, 3
     b1e:	85 91       	lpm	r24, Z+
     b20:	93 ff       	sbrs	r25, 3
     b22:	81 91       	ld	r24, Z+
     b24:	7f 01       	movw	r14, r30
     b26:	88 23       	and	r24, r24
     b28:	09 f4       	brne	.+2      	; 0xb2c <vfprintf+0x62>
     b2a:	ad c1       	rjmp	.+858    	; 0xe86 <vfprintf+0x3bc>
     b2c:	85 32       	cpi	r24, 0x25	; 37
     b2e:	39 f4       	brne	.+14     	; 0xb3e <vfprintf+0x74>
     b30:	93 fd       	sbrc	r25, 3
     b32:	85 91       	lpm	r24, Z+
     b34:	93 ff       	sbrs	r25, 3
     b36:	81 91       	ld	r24, Z+
     b38:	7f 01       	movw	r14, r30
     b3a:	85 32       	cpi	r24, 0x25	; 37
     b3c:	21 f4       	brne	.+8      	; 0xb46 <vfprintf+0x7c>
     b3e:	b6 01       	movw	r22, r12
     b40:	90 e0       	ldi	r25, 0x00	; 0
     b42:	d6 d1       	rcall	.+940    	; 0xef0 <fputc>
     b44:	e8 cf       	rjmp	.-48     	; 0xb16 <vfprintf+0x4c>
     b46:	91 2c       	mov	r9, r1
     b48:	21 2c       	mov	r2, r1
     b4a:	31 2c       	mov	r3, r1
     b4c:	ff e1       	ldi	r31, 0x1F	; 31
     b4e:	f3 15       	cp	r31, r3
     b50:	d8 f0       	brcs	.+54     	; 0xb88 <vfprintf+0xbe>
     b52:	8b 32       	cpi	r24, 0x2B	; 43
     b54:	79 f0       	breq	.+30     	; 0xb74 <vfprintf+0xaa>
     b56:	38 f4       	brcc	.+14     	; 0xb66 <vfprintf+0x9c>
     b58:	80 32       	cpi	r24, 0x20	; 32
     b5a:	79 f0       	breq	.+30     	; 0xb7a <vfprintf+0xb0>
     b5c:	83 32       	cpi	r24, 0x23	; 35
     b5e:	a1 f4       	brne	.+40     	; 0xb88 <vfprintf+0xbe>
     b60:	23 2d       	mov	r18, r3
     b62:	20 61       	ori	r18, 0x10	; 16
     b64:	1d c0       	rjmp	.+58     	; 0xba0 <vfprintf+0xd6>
     b66:	8d 32       	cpi	r24, 0x2D	; 45
     b68:	61 f0       	breq	.+24     	; 0xb82 <vfprintf+0xb8>
     b6a:	80 33       	cpi	r24, 0x30	; 48
     b6c:	69 f4       	brne	.+26     	; 0xb88 <vfprintf+0xbe>
     b6e:	23 2d       	mov	r18, r3
     b70:	21 60       	ori	r18, 0x01	; 1
     b72:	16 c0       	rjmp	.+44     	; 0xba0 <vfprintf+0xd6>
     b74:	83 2d       	mov	r24, r3
     b76:	82 60       	ori	r24, 0x02	; 2
     b78:	38 2e       	mov	r3, r24
     b7a:	e3 2d       	mov	r30, r3
     b7c:	e4 60       	ori	r30, 0x04	; 4
     b7e:	3e 2e       	mov	r3, r30
     b80:	2a c0       	rjmp	.+84     	; 0xbd6 <vfprintf+0x10c>
     b82:	f3 2d       	mov	r31, r3
     b84:	f8 60       	ori	r31, 0x08	; 8
     b86:	1d c0       	rjmp	.+58     	; 0xbc2 <vfprintf+0xf8>
     b88:	37 fc       	sbrc	r3, 7
     b8a:	2d c0       	rjmp	.+90     	; 0xbe6 <vfprintf+0x11c>
     b8c:	20 ed       	ldi	r18, 0xD0	; 208
     b8e:	28 0f       	add	r18, r24
     b90:	2a 30       	cpi	r18, 0x0A	; 10
     b92:	40 f0       	brcs	.+16     	; 0xba4 <vfprintf+0xda>
     b94:	8e 32       	cpi	r24, 0x2E	; 46
     b96:	b9 f4       	brne	.+46     	; 0xbc6 <vfprintf+0xfc>
     b98:	36 fc       	sbrc	r3, 6
     b9a:	75 c1       	rjmp	.+746    	; 0xe86 <vfprintf+0x3bc>
     b9c:	23 2d       	mov	r18, r3
     b9e:	20 64       	ori	r18, 0x40	; 64
     ba0:	32 2e       	mov	r3, r18
     ba2:	19 c0       	rjmp	.+50     	; 0xbd6 <vfprintf+0x10c>
     ba4:	36 fe       	sbrs	r3, 6
     ba6:	06 c0       	rjmp	.+12     	; 0xbb4 <vfprintf+0xea>
     ba8:	8a e0       	ldi	r24, 0x0A	; 10
     baa:	98 9e       	mul	r9, r24
     bac:	20 0d       	add	r18, r0
     bae:	11 24       	eor	r1, r1
     bb0:	92 2e       	mov	r9, r18
     bb2:	11 c0       	rjmp	.+34     	; 0xbd6 <vfprintf+0x10c>
     bb4:	ea e0       	ldi	r30, 0x0A	; 10
     bb6:	2e 9e       	mul	r2, r30
     bb8:	20 0d       	add	r18, r0
     bba:	11 24       	eor	r1, r1
     bbc:	22 2e       	mov	r2, r18
     bbe:	f3 2d       	mov	r31, r3
     bc0:	f0 62       	ori	r31, 0x20	; 32
     bc2:	3f 2e       	mov	r3, r31
     bc4:	08 c0       	rjmp	.+16     	; 0xbd6 <vfprintf+0x10c>
     bc6:	8c 36       	cpi	r24, 0x6C	; 108
     bc8:	21 f4       	brne	.+8      	; 0xbd2 <vfprintf+0x108>
     bca:	83 2d       	mov	r24, r3
     bcc:	80 68       	ori	r24, 0x80	; 128
     bce:	38 2e       	mov	r3, r24
     bd0:	02 c0       	rjmp	.+4      	; 0xbd6 <vfprintf+0x10c>
     bd2:	88 36       	cpi	r24, 0x68	; 104
     bd4:	41 f4       	brne	.+16     	; 0xbe6 <vfprintf+0x11c>
     bd6:	f7 01       	movw	r30, r14
     bd8:	93 fd       	sbrc	r25, 3
     bda:	85 91       	lpm	r24, Z+
     bdc:	93 ff       	sbrs	r25, 3
     bde:	81 91       	ld	r24, Z+
     be0:	7f 01       	movw	r14, r30
     be2:	81 11       	cpse	r24, r1
     be4:	b3 cf       	rjmp	.-154    	; 0xb4c <vfprintf+0x82>
     be6:	98 2f       	mov	r25, r24
     be8:	9f 7d       	andi	r25, 0xDF	; 223
     bea:	95 54       	subi	r25, 0x45	; 69
     bec:	93 30       	cpi	r25, 0x03	; 3
     bee:	28 f4       	brcc	.+10     	; 0xbfa <vfprintf+0x130>
     bf0:	0c 5f       	subi	r16, 0xFC	; 252
     bf2:	1f 4f       	sbci	r17, 0xFF	; 255
     bf4:	9f e3       	ldi	r25, 0x3F	; 63
     bf6:	99 83       	std	Y+1, r25	; 0x01
     bf8:	0d c0       	rjmp	.+26     	; 0xc14 <vfprintf+0x14a>
     bfa:	83 36       	cpi	r24, 0x63	; 99
     bfc:	31 f0       	breq	.+12     	; 0xc0a <vfprintf+0x140>
     bfe:	83 37       	cpi	r24, 0x73	; 115
     c00:	71 f0       	breq	.+28     	; 0xc1e <vfprintf+0x154>
     c02:	83 35       	cpi	r24, 0x53	; 83
     c04:	09 f0       	breq	.+2      	; 0xc08 <vfprintf+0x13e>
     c06:	55 c0       	rjmp	.+170    	; 0xcb2 <vfprintf+0x1e8>
     c08:	20 c0       	rjmp	.+64     	; 0xc4a <vfprintf+0x180>
     c0a:	f8 01       	movw	r30, r16
     c0c:	80 81       	ld	r24, Z
     c0e:	89 83       	std	Y+1, r24	; 0x01
     c10:	0e 5f       	subi	r16, 0xFE	; 254
     c12:	1f 4f       	sbci	r17, 0xFF	; 255
     c14:	88 24       	eor	r8, r8
     c16:	83 94       	inc	r8
     c18:	91 2c       	mov	r9, r1
     c1a:	53 01       	movw	r10, r6
     c1c:	12 c0       	rjmp	.+36     	; 0xc42 <vfprintf+0x178>
     c1e:	28 01       	movw	r4, r16
     c20:	f2 e0       	ldi	r31, 0x02	; 2
     c22:	4f 0e       	add	r4, r31
     c24:	51 1c       	adc	r5, r1
     c26:	f8 01       	movw	r30, r16
     c28:	a0 80       	ld	r10, Z
     c2a:	b1 80       	ldd	r11, Z+1	; 0x01
     c2c:	36 fe       	sbrs	r3, 6
     c2e:	03 c0       	rjmp	.+6      	; 0xc36 <vfprintf+0x16c>
     c30:	69 2d       	mov	r22, r9
     c32:	70 e0       	ldi	r23, 0x00	; 0
     c34:	02 c0       	rjmp	.+4      	; 0xc3a <vfprintf+0x170>
     c36:	6f ef       	ldi	r22, 0xFF	; 255
     c38:	7f ef       	ldi	r23, 0xFF	; 255
     c3a:	c5 01       	movw	r24, r10
     c3c:	4e d1       	rcall	.+668    	; 0xeda <strnlen>
     c3e:	4c 01       	movw	r8, r24
     c40:	82 01       	movw	r16, r4
     c42:	f3 2d       	mov	r31, r3
     c44:	ff 77       	andi	r31, 0x7F	; 127
     c46:	3f 2e       	mov	r3, r31
     c48:	15 c0       	rjmp	.+42     	; 0xc74 <vfprintf+0x1aa>
     c4a:	28 01       	movw	r4, r16
     c4c:	22 e0       	ldi	r18, 0x02	; 2
     c4e:	42 0e       	add	r4, r18
     c50:	51 1c       	adc	r5, r1
     c52:	f8 01       	movw	r30, r16
     c54:	a0 80       	ld	r10, Z
     c56:	b1 80       	ldd	r11, Z+1	; 0x01
     c58:	36 fe       	sbrs	r3, 6
     c5a:	03 c0       	rjmp	.+6      	; 0xc62 <vfprintf+0x198>
     c5c:	69 2d       	mov	r22, r9
     c5e:	70 e0       	ldi	r23, 0x00	; 0
     c60:	02 c0       	rjmp	.+4      	; 0xc66 <vfprintf+0x19c>
     c62:	6f ef       	ldi	r22, 0xFF	; 255
     c64:	7f ef       	ldi	r23, 0xFF	; 255
     c66:	c5 01       	movw	r24, r10
     c68:	2d d1       	rcall	.+602    	; 0xec4 <strnlen_P>
     c6a:	4c 01       	movw	r8, r24
     c6c:	f3 2d       	mov	r31, r3
     c6e:	f0 68       	ori	r31, 0x80	; 128
     c70:	3f 2e       	mov	r3, r31
     c72:	82 01       	movw	r16, r4
     c74:	33 fc       	sbrc	r3, 3
     c76:	19 c0       	rjmp	.+50     	; 0xcaa <vfprintf+0x1e0>
     c78:	82 2d       	mov	r24, r2
     c7a:	90 e0       	ldi	r25, 0x00	; 0
     c7c:	88 16       	cp	r8, r24
     c7e:	99 06       	cpc	r9, r25
     c80:	a0 f4       	brcc	.+40     	; 0xcaa <vfprintf+0x1e0>
     c82:	b6 01       	movw	r22, r12
     c84:	80 e2       	ldi	r24, 0x20	; 32
     c86:	90 e0       	ldi	r25, 0x00	; 0
     c88:	33 d1       	rcall	.+614    	; 0xef0 <fputc>
     c8a:	2a 94       	dec	r2
     c8c:	f5 cf       	rjmp	.-22     	; 0xc78 <vfprintf+0x1ae>
     c8e:	f5 01       	movw	r30, r10
     c90:	37 fc       	sbrc	r3, 7
     c92:	85 91       	lpm	r24, Z+
     c94:	37 fe       	sbrs	r3, 7
     c96:	81 91       	ld	r24, Z+
     c98:	5f 01       	movw	r10, r30
     c9a:	b6 01       	movw	r22, r12
     c9c:	90 e0       	ldi	r25, 0x00	; 0
     c9e:	28 d1       	rcall	.+592    	; 0xef0 <fputc>
     ca0:	21 10       	cpse	r2, r1
     ca2:	2a 94       	dec	r2
     ca4:	21 e0       	ldi	r18, 0x01	; 1
     ca6:	82 1a       	sub	r8, r18
     ca8:	91 08       	sbc	r9, r1
     caa:	81 14       	cp	r8, r1
     cac:	91 04       	cpc	r9, r1
     cae:	79 f7       	brne	.-34     	; 0xc8e <vfprintf+0x1c4>
     cb0:	e1 c0       	rjmp	.+450    	; 0xe74 <vfprintf+0x3aa>
     cb2:	84 36       	cpi	r24, 0x64	; 100
     cb4:	11 f0       	breq	.+4      	; 0xcba <vfprintf+0x1f0>
     cb6:	89 36       	cpi	r24, 0x69	; 105
     cb8:	39 f5       	brne	.+78     	; 0xd08 <vfprintf+0x23e>
     cba:	f8 01       	movw	r30, r16
     cbc:	37 fe       	sbrs	r3, 7
     cbe:	07 c0       	rjmp	.+14     	; 0xcce <vfprintf+0x204>
     cc0:	60 81       	ld	r22, Z
     cc2:	71 81       	ldd	r23, Z+1	; 0x01
     cc4:	82 81       	ldd	r24, Z+2	; 0x02
     cc6:	93 81       	ldd	r25, Z+3	; 0x03
     cc8:	0c 5f       	subi	r16, 0xFC	; 252
     cca:	1f 4f       	sbci	r17, 0xFF	; 255
     ccc:	08 c0       	rjmp	.+16     	; 0xcde <vfprintf+0x214>
     cce:	60 81       	ld	r22, Z
     cd0:	71 81       	ldd	r23, Z+1	; 0x01
     cd2:	07 2e       	mov	r0, r23
     cd4:	00 0c       	add	r0, r0
     cd6:	88 0b       	sbc	r24, r24
     cd8:	99 0b       	sbc	r25, r25
     cda:	0e 5f       	subi	r16, 0xFE	; 254
     cdc:	1f 4f       	sbci	r17, 0xFF	; 255
     cde:	f3 2d       	mov	r31, r3
     ce0:	ff 76       	andi	r31, 0x6F	; 111
     ce2:	3f 2e       	mov	r3, r31
     ce4:	97 ff       	sbrs	r25, 7
     ce6:	09 c0       	rjmp	.+18     	; 0xcfa <vfprintf+0x230>
     ce8:	90 95       	com	r25
     cea:	80 95       	com	r24
     cec:	70 95       	com	r23
     cee:	61 95       	neg	r22
     cf0:	7f 4f       	sbci	r23, 0xFF	; 255
     cf2:	8f 4f       	sbci	r24, 0xFF	; 255
     cf4:	9f 4f       	sbci	r25, 0xFF	; 255
     cf6:	f0 68       	ori	r31, 0x80	; 128
     cf8:	3f 2e       	mov	r3, r31
     cfa:	2a e0       	ldi	r18, 0x0A	; 10
     cfc:	30 e0       	ldi	r19, 0x00	; 0
     cfe:	a3 01       	movw	r20, r6
     d00:	33 d1       	rcall	.+614    	; 0xf68 <__ultoa_invert>
     d02:	88 2e       	mov	r8, r24
     d04:	86 18       	sub	r8, r6
     d06:	44 c0       	rjmp	.+136    	; 0xd90 <vfprintf+0x2c6>
     d08:	85 37       	cpi	r24, 0x75	; 117
     d0a:	31 f4       	brne	.+12     	; 0xd18 <vfprintf+0x24e>
     d0c:	23 2d       	mov	r18, r3
     d0e:	2f 7e       	andi	r18, 0xEF	; 239
     d10:	b2 2e       	mov	r11, r18
     d12:	2a e0       	ldi	r18, 0x0A	; 10
     d14:	30 e0       	ldi	r19, 0x00	; 0
     d16:	25 c0       	rjmp	.+74     	; 0xd62 <vfprintf+0x298>
     d18:	93 2d       	mov	r25, r3
     d1a:	99 7f       	andi	r25, 0xF9	; 249
     d1c:	b9 2e       	mov	r11, r25
     d1e:	8f 36       	cpi	r24, 0x6F	; 111
     d20:	c1 f0       	breq	.+48     	; 0xd52 <vfprintf+0x288>
     d22:	18 f4       	brcc	.+6      	; 0xd2a <vfprintf+0x260>
     d24:	88 35       	cpi	r24, 0x58	; 88
     d26:	79 f0       	breq	.+30     	; 0xd46 <vfprintf+0x27c>
     d28:	ae c0       	rjmp	.+348    	; 0xe86 <vfprintf+0x3bc>
     d2a:	80 37       	cpi	r24, 0x70	; 112
     d2c:	19 f0       	breq	.+6      	; 0xd34 <vfprintf+0x26a>
     d2e:	88 37       	cpi	r24, 0x78	; 120
     d30:	21 f0       	breq	.+8      	; 0xd3a <vfprintf+0x270>
     d32:	a9 c0       	rjmp	.+338    	; 0xe86 <vfprintf+0x3bc>
     d34:	e9 2f       	mov	r30, r25
     d36:	e0 61       	ori	r30, 0x10	; 16
     d38:	be 2e       	mov	r11, r30
     d3a:	b4 fe       	sbrs	r11, 4
     d3c:	0d c0       	rjmp	.+26     	; 0xd58 <vfprintf+0x28e>
     d3e:	fb 2d       	mov	r31, r11
     d40:	f4 60       	ori	r31, 0x04	; 4
     d42:	bf 2e       	mov	r11, r31
     d44:	09 c0       	rjmp	.+18     	; 0xd58 <vfprintf+0x28e>
     d46:	34 fe       	sbrs	r3, 4
     d48:	0a c0       	rjmp	.+20     	; 0xd5e <vfprintf+0x294>
     d4a:	29 2f       	mov	r18, r25
     d4c:	26 60       	ori	r18, 0x06	; 6
     d4e:	b2 2e       	mov	r11, r18
     d50:	06 c0       	rjmp	.+12     	; 0xd5e <vfprintf+0x294>
     d52:	28 e0       	ldi	r18, 0x08	; 8
     d54:	30 e0       	ldi	r19, 0x00	; 0
     d56:	05 c0       	rjmp	.+10     	; 0xd62 <vfprintf+0x298>
     d58:	20 e1       	ldi	r18, 0x10	; 16
     d5a:	30 e0       	ldi	r19, 0x00	; 0
     d5c:	02 c0       	rjmp	.+4      	; 0xd62 <vfprintf+0x298>
     d5e:	20 e1       	ldi	r18, 0x10	; 16
     d60:	32 e0       	ldi	r19, 0x02	; 2
     d62:	f8 01       	movw	r30, r16
     d64:	b7 fe       	sbrs	r11, 7
     d66:	07 c0       	rjmp	.+14     	; 0xd76 <vfprintf+0x2ac>
     d68:	60 81       	ld	r22, Z
     d6a:	71 81       	ldd	r23, Z+1	; 0x01
     d6c:	82 81       	ldd	r24, Z+2	; 0x02
     d6e:	93 81       	ldd	r25, Z+3	; 0x03
     d70:	0c 5f       	subi	r16, 0xFC	; 252
     d72:	1f 4f       	sbci	r17, 0xFF	; 255
     d74:	06 c0       	rjmp	.+12     	; 0xd82 <vfprintf+0x2b8>
     d76:	60 81       	ld	r22, Z
     d78:	71 81       	ldd	r23, Z+1	; 0x01
     d7a:	80 e0       	ldi	r24, 0x00	; 0
     d7c:	90 e0       	ldi	r25, 0x00	; 0
     d7e:	0e 5f       	subi	r16, 0xFE	; 254
     d80:	1f 4f       	sbci	r17, 0xFF	; 255
     d82:	a3 01       	movw	r20, r6
     d84:	f1 d0       	rcall	.+482    	; 0xf68 <__ultoa_invert>
     d86:	88 2e       	mov	r8, r24
     d88:	86 18       	sub	r8, r6
     d8a:	fb 2d       	mov	r31, r11
     d8c:	ff 77       	andi	r31, 0x7F	; 127
     d8e:	3f 2e       	mov	r3, r31
     d90:	36 fe       	sbrs	r3, 6
     d92:	0d c0       	rjmp	.+26     	; 0xdae <vfprintf+0x2e4>
     d94:	23 2d       	mov	r18, r3
     d96:	2e 7f       	andi	r18, 0xFE	; 254
     d98:	a2 2e       	mov	r10, r18
     d9a:	89 14       	cp	r8, r9
     d9c:	58 f4       	brcc	.+22     	; 0xdb4 <vfprintf+0x2ea>
     d9e:	34 fe       	sbrs	r3, 4
     da0:	0b c0       	rjmp	.+22     	; 0xdb8 <vfprintf+0x2ee>
     da2:	32 fc       	sbrc	r3, 2
     da4:	09 c0       	rjmp	.+18     	; 0xdb8 <vfprintf+0x2ee>
     da6:	83 2d       	mov	r24, r3
     da8:	8e 7e       	andi	r24, 0xEE	; 238
     daa:	a8 2e       	mov	r10, r24
     dac:	05 c0       	rjmp	.+10     	; 0xdb8 <vfprintf+0x2ee>
     dae:	b8 2c       	mov	r11, r8
     db0:	a3 2c       	mov	r10, r3
     db2:	03 c0       	rjmp	.+6      	; 0xdba <vfprintf+0x2f0>
     db4:	b8 2c       	mov	r11, r8
     db6:	01 c0       	rjmp	.+2      	; 0xdba <vfprintf+0x2f0>
     db8:	b9 2c       	mov	r11, r9
     dba:	a4 fe       	sbrs	r10, 4
     dbc:	0f c0       	rjmp	.+30     	; 0xddc <vfprintf+0x312>
     dbe:	fe 01       	movw	r30, r28
     dc0:	e8 0d       	add	r30, r8
     dc2:	f1 1d       	adc	r31, r1
     dc4:	80 81       	ld	r24, Z
     dc6:	80 33       	cpi	r24, 0x30	; 48
     dc8:	21 f4       	brne	.+8      	; 0xdd2 <vfprintf+0x308>
     dca:	9a 2d       	mov	r25, r10
     dcc:	99 7e       	andi	r25, 0xE9	; 233
     dce:	a9 2e       	mov	r10, r25
     dd0:	09 c0       	rjmp	.+18     	; 0xde4 <vfprintf+0x31a>
     dd2:	a2 fe       	sbrs	r10, 2
     dd4:	06 c0       	rjmp	.+12     	; 0xde2 <vfprintf+0x318>
     dd6:	b3 94       	inc	r11
     dd8:	b3 94       	inc	r11
     dda:	04 c0       	rjmp	.+8      	; 0xde4 <vfprintf+0x31a>
     ddc:	8a 2d       	mov	r24, r10
     dde:	86 78       	andi	r24, 0x86	; 134
     de0:	09 f0       	breq	.+2      	; 0xde4 <vfprintf+0x31a>
     de2:	b3 94       	inc	r11
     de4:	a3 fc       	sbrc	r10, 3
     de6:	10 c0       	rjmp	.+32     	; 0xe08 <vfprintf+0x33e>
     de8:	a0 fe       	sbrs	r10, 0
     dea:	06 c0       	rjmp	.+12     	; 0xdf8 <vfprintf+0x32e>
     dec:	b2 14       	cp	r11, r2
     dee:	80 f4       	brcc	.+32     	; 0xe10 <vfprintf+0x346>
     df0:	28 0c       	add	r2, r8
     df2:	92 2c       	mov	r9, r2
     df4:	9b 18       	sub	r9, r11
     df6:	0d c0       	rjmp	.+26     	; 0xe12 <vfprintf+0x348>
     df8:	b2 14       	cp	r11, r2
     dfa:	58 f4       	brcc	.+22     	; 0xe12 <vfprintf+0x348>
     dfc:	b6 01       	movw	r22, r12
     dfe:	80 e2       	ldi	r24, 0x20	; 32
     e00:	90 e0       	ldi	r25, 0x00	; 0
     e02:	76 d0       	rcall	.+236    	; 0xef0 <fputc>
     e04:	b3 94       	inc	r11
     e06:	f8 cf       	rjmp	.-16     	; 0xdf8 <vfprintf+0x32e>
     e08:	b2 14       	cp	r11, r2
     e0a:	18 f4       	brcc	.+6      	; 0xe12 <vfprintf+0x348>
     e0c:	2b 18       	sub	r2, r11
     e0e:	02 c0       	rjmp	.+4      	; 0xe14 <vfprintf+0x34a>
     e10:	98 2c       	mov	r9, r8
     e12:	21 2c       	mov	r2, r1
     e14:	a4 fe       	sbrs	r10, 4
     e16:	0f c0       	rjmp	.+30     	; 0xe36 <vfprintf+0x36c>
     e18:	b6 01       	movw	r22, r12
     e1a:	80 e3       	ldi	r24, 0x30	; 48
     e1c:	90 e0       	ldi	r25, 0x00	; 0
     e1e:	68 d0       	rcall	.+208    	; 0xef0 <fputc>
     e20:	a2 fe       	sbrs	r10, 2
     e22:	16 c0       	rjmp	.+44     	; 0xe50 <vfprintf+0x386>
     e24:	a1 fc       	sbrc	r10, 1
     e26:	03 c0       	rjmp	.+6      	; 0xe2e <vfprintf+0x364>
     e28:	88 e7       	ldi	r24, 0x78	; 120
     e2a:	90 e0       	ldi	r25, 0x00	; 0
     e2c:	02 c0       	rjmp	.+4      	; 0xe32 <vfprintf+0x368>
     e2e:	88 e5       	ldi	r24, 0x58	; 88
     e30:	90 e0       	ldi	r25, 0x00	; 0
     e32:	b6 01       	movw	r22, r12
     e34:	0c c0       	rjmp	.+24     	; 0xe4e <vfprintf+0x384>
     e36:	8a 2d       	mov	r24, r10
     e38:	86 78       	andi	r24, 0x86	; 134
     e3a:	51 f0       	breq	.+20     	; 0xe50 <vfprintf+0x386>
     e3c:	a1 fe       	sbrs	r10, 1
     e3e:	02 c0       	rjmp	.+4      	; 0xe44 <vfprintf+0x37a>
     e40:	8b e2       	ldi	r24, 0x2B	; 43
     e42:	01 c0       	rjmp	.+2      	; 0xe46 <vfprintf+0x37c>
     e44:	80 e2       	ldi	r24, 0x20	; 32
     e46:	a7 fc       	sbrc	r10, 7
     e48:	8d e2       	ldi	r24, 0x2D	; 45
     e4a:	b6 01       	movw	r22, r12
     e4c:	90 e0       	ldi	r25, 0x00	; 0
     e4e:	50 d0       	rcall	.+160    	; 0xef0 <fputc>
     e50:	89 14       	cp	r8, r9
     e52:	30 f4       	brcc	.+12     	; 0xe60 <vfprintf+0x396>
     e54:	b6 01       	movw	r22, r12
     e56:	80 e3       	ldi	r24, 0x30	; 48
     e58:	90 e0       	ldi	r25, 0x00	; 0
     e5a:	4a d0       	rcall	.+148    	; 0xef0 <fputc>
     e5c:	9a 94       	dec	r9
     e5e:	f8 cf       	rjmp	.-16     	; 0xe50 <vfprintf+0x386>
     e60:	8a 94       	dec	r8
     e62:	f3 01       	movw	r30, r6
     e64:	e8 0d       	add	r30, r8
     e66:	f1 1d       	adc	r31, r1
     e68:	80 81       	ld	r24, Z
     e6a:	b6 01       	movw	r22, r12
     e6c:	90 e0       	ldi	r25, 0x00	; 0
     e6e:	40 d0       	rcall	.+128    	; 0xef0 <fputc>
     e70:	81 10       	cpse	r8, r1
     e72:	f6 cf       	rjmp	.-20     	; 0xe60 <vfprintf+0x396>
     e74:	22 20       	and	r2, r2
     e76:	09 f4       	brne	.+2      	; 0xe7a <vfprintf+0x3b0>
     e78:	4e ce       	rjmp	.-868    	; 0xb16 <vfprintf+0x4c>
     e7a:	b6 01       	movw	r22, r12
     e7c:	80 e2       	ldi	r24, 0x20	; 32
     e7e:	90 e0       	ldi	r25, 0x00	; 0
     e80:	37 d0       	rcall	.+110    	; 0xef0 <fputc>
     e82:	2a 94       	dec	r2
     e84:	f7 cf       	rjmp	.-18     	; 0xe74 <vfprintf+0x3aa>
     e86:	f6 01       	movw	r30, r12
     e88:	86 81       	ldd	r24, Z+6	; 0x06
     e8a:	97 81       	ldd	r25, Z+7	; 0x07
     e8c:	02 c0       	rjmp	.+4      	; 0xe92 <vfprintf+0x3c8>
     e8e:	8f ef       	ldi	r24, 0xFF	; 255
     e90:	9f ef       	ldi	r25, 0xFF	; 255
     e92:	2b 96       	adiw	r28, 0x0b	; 11
     e94:	0f b6       	in	r0, 0x3f	; 63
     e96:	f8 94       	cli
     e98:	de bf       	out	0x3e, r29	; 62
     e9a:	0f be       	out	0x3f, r0	; 63
     e9c:	cd bf       	out	0x3d, r28	; 61
     e9e:	df 91       	pop	r29
     ea0:	cf 91       	pop	r28
     ea2:	1f 91       	pop	r17
     ea4:	0f 91       	pop	r16
     ea6:	ff 90       	pop	r15
     ea8:	ef 90       	pop	r14
     eaa:	df 90       	pop	r13
     eac:	cf 90       	pop	r12
     eae:	bf 90       	pop	r11
     eb0:	af 90       	pop	r10
     eb2:	9f 90       	pop	r9
     eb4:	8f 90       	pop	r8
     eb6:	7f 90       	pop	r7
     eb8:	6f 90       	pop	r6
     eba:	5f 90       	pop	r5
     ebc:	4f 90       	pop	r4
     ebe:	3f 90       	pop	r3
     ec0:	2f 90       	pop	r2
     ec2:	08 95       	ret

00000ec4 <strnlen_P>:
     ec4:	fc 01       	movw	r30, r24
     ec6:	05 90       	lpm	r0, Z+
     ec8:	61 50       	subi	r22, 0x01	; 1
     eca:	70 40       	sbci	r23, 0x00	; 0
     ecc:	01 10       	cpse	r0, r1
     ece:	d8 f7       	brcc	.-10     	; 0xec6 <strnlen_P+0x2>
     ed0:	80 95       	com	r24
     ed2:	90 95       	com	r25
     ed4:	8e 0f       	add	r24, r30
     ed6:	9f 1f       	adc	r25, r31
     ed8:	08 95       	ret

00000eda <strnlen>:
     eda:	fc 01       	movw	r30, r24
     edc:	61 50       	subi	r22, 0x01	; 1
     ede:	70 40       	sbci	r23, 0x00	; 0
     ee0:	01 90       	ld	r0, Z+
     ee2:	01 10       	cpse	r0, r1
     ee4:	d8 f7       	brcc	.-10     	; 0xedc <strnlen+0x2>
     ee6:	80 95       	com	r24
     ee8:	90 95       	com	r25
     eea:	8e 0f       	add	r24, r30
     eec:	9f 1f       	adc	r25, r31
     eee:	08 95       	ret

00000ef0 <fputc>:
     ef0:	0f 93       	push	r16
     ef2:	1f 93       	push	r17
     ef4:	cf 93       	push	r28
     ef6:	df 93       	push	r29
     ef8:	fb 01       	movw	r30, r22
     efa:	23 81       	ldd	r18, Z+3	; 0x03
     efc:	21 fd       	sbrc	r18, 1
     efe:	03 c0       	rjmp	.+6      	; 0xf06 <fputc+0x16>
     f00:	8f ef       	ldi	r24, 0xFF	; 255
     f02:	9f ef       	ldi	r25, 0xFF	; 255
     f04:	2c c0       	rjmp	.+88     	; 0xf5e <fputc+0x6e>
     f06:	22 ff       	sbrs	r18, 2
     f08:	16 c0       	rjmp	.+44     	; 0xf36 <fputc+0x46>
     f0a:	46 81       	ldd	r20, Z+6	; 0x06
     f0c:	57 81       	ldd	r21, Z+7	; 0x07
     f0e:	24 81       	ldd	r18, Z+4	; 0x04
     f10:	35 81       	ldd	r19, Z+5	; 0x05
     f12:	42 17       	cp	r20, r18
     f14:	53 07       	cpc	r21, r19
     f16:	44 f4       	brge	.+16     	; 0xf28 <fputc+0x38>
     f18:	a0 81       	ld	r26, Z
     f1a:	b1 81       	ldd	r27, Z+1	; 0x01
     f1c:	9d 01       	movw	r18, r26
     f1e:	2f 5f       	subi	r18, 0xFF	; 255
     f20:	3f 4f       	sbci	r19, 0xFF	; 255
     f22:	31 83       	std	Z+1, r19	; 0x01
     f24:	20 83       	st	Z, r18
     f26:	8c 93       	st	X, r24
     f28:	26 81       	ldd	r18, Z+6	; 0x06
     f2a:	37 81       	ldd	r19, Z+7	; 0x07
     f2c:	2f 5f       	subi	r18, 0xFF	; 255
     f2e:	3f 4f       	sbci	r19, 0xFF	; 255
     f30:	37 83       	std	Z+7, r19	; 0x07
     f32:	26 83       	std	Z+6, r18	; 0x06
     f34:	14 c0       	rjmp	.+40     	; 0xf5e <fputc+0x6e>
     f36:	8b 01       	movw	r16, r22
     f38:	ec 01       	movw	r28, r24
     f3a:	fb 01       	movw	r30, r22
     f3c:	00 84       	ldd	r0, Z+8	; 0x08
     f3e:	f1 85       	ldd	r31, Z+9	; 0x09
     f40:	e0 2d       	mov	r30, r0
     f42:	09 95       	icall
     f44:	89 2b       	or	r24, r25
     f46:	e1 f6       	brne	.-72     	; 0xf00 <fputc+0x10>
     f48:	d8 01       	movw	r26, r16
     f4a:	16 96       	adiw	r26, 0x06	; 6
     f4c:	8d 91       	ld	r24, X+
     f4e:	9c 91       	ld	r25, X
     f50:	17 97       	sbiw	r26, 0x07	; 7
     f52:	01 96       	adiw	r24, 0x01	; 1
     f54:	17 96       	adiw	r26, 0x07	; 7
     f56:	9c 93       	st	X, r25
     f58:	8e 93       	st	-X, r24
     f5a:	16 97       	sbiw	r26, 0x06	; 6
     f5c:	ce 01       	movw	r24, r28
     f5e:	df 91       	pop	r29
     f60:	cf 91       	pop	r28
     f62:	1f 91       	pop	r17
     f64:	0f 91       	pop	r16
     f66:	08 95       	ret

00000f68 <__ultoa_invert>:
     f68:	fa 01       	movw	r30, r20
     f6a:	aa 27       	eor	r26, r26
     f6c:	28 30       	cpi	r18, 0x08	; 8
     f6e:	51 f1       	breq	.+84     	; 0xfc4 <__ultoa_invert+0x5c>
     f70:	20 31       	cpi	r18, 0x10	; 16
     f72:	81 f1       	breq	.+96     	; 0xfd4 <__ultoa_invert+0x6c>
     f74:	e8 94       	clt
     f76:	6f 93       	push	r22
     f78:	6e 7f       	andi	r22, 0xFE	; 254
     f7a:	6e 5f       	subi	r22, 0xFE	; 254
     f7c:	7f 4f       	sbci	r23, 0xFF	; 255
     f7e:	8f 4f       	sbci	r24, 0xFF	; 255
     f80:	9f 4f       	sbci	r25, 0xFF	; 255
     f82:	af 4f       	sbci	r26, 0xFF	; 255
     f84:	b1 e0       	ldi	r27, 0x01	; 1
     f86:	3e d0       	rcall	.+124    	; 0x1004 <__DATA_REGION_LENGTH__+0x4>
     f88:	b4 e0       	ldi	r27, 0x04	; 4
     f8a:	3c d0       	rcall	.+120    	; 0x1004 <__DATA_REGION_LENGTH__+0x4>
     f8c:	67 0f       	add	r22, r23
     f8e:	78 1f       	adc	r23, r24
     f90:	89 1f       	adc	r24, r25
     f92:	9a 1f       	adc	r25, r26
     f94:	a1 1d       	adc	r26, r1
     f96:	68 0f       	add	r22, r24
     f98:	79 1f       	adc	r23, r25
     f9a:	8a 1f       	adc	r24, r26
     f9c:	91 1d       	adc	r25, r1
     f9e:	a1 1d       	adc	r26, r1
     fa0:	6a 0f       	add	r22, r26
     fa2:	71 1d       	adc	r23, r1
     fa4:	81 1d       	adc	r24, r1
     fa6:	91 1d       	adc	r25, r1
     fa8:	a1 1d       	adc	r26, r1
     faa:	20 d0       	rcall	.+64     	; 0xfec <__ultoa_invert+0x84>
     fac:	09 f4       	brne	.+2      	; 0xfb0 <__ultoa_invert+0x48>
     fae:	68 94       	set
     fb0:	3f 91       	pop	r19
     fb2:	2a e0       	ldi	r18, 0x0A	; 10
     fb4:	26 9f       	mul	r18, r22
     fb6:	11 24       	eor	r1, r1
     fb8:	30 19       	sub	r19, r0
     fba:	30 5d       	subi	r19, 0xD0	; 208
     fbc:	31 93       	st	Z+, r19
     fbe:	de f6       	brtc	.-74     	; 0xf76 <__ultoa_invert+0xe>
     fc0:	cf 01       	movw	r24, r30
     fc2:	08 95       	ret
     fc4:	46 2f       	mov	r20, r22
     fc6:	47 70       	andi	r20, 0x07	; 7
     fc8:	40 5d       	subi	r20, 0xD0	; 208
     fca:	41 93       	st	Z+, r20
     fcc:	b3 e0       	ldi	r27, 0x03	; 3
     fce:	0f d0       	rcall	.+30     	; 0xfee <__ultoa_invert+0x86>
     fd0:	c9 f7       	brne	.-14     	; 0xfc4 <__ultoa_invert+0x5c>
     fd2:	f6 cf       	rjmp	.-20     	; 0xfc0 <__ultoa_invert+0x58>
     fd4:	46 2f       	mov	r20, r22
     fd6:	4f 70       	andi	r20, 0x0F	; 15
     fd8:	40 5d       	subi	r20, 0xD0	; 208
     fda:	4a 33       	cpi	r20, 0x3A	; 58
     fdc:	18 f0       	brcs	.+6      	; 0xfe4 <__ultoa_invert+0x7c>
     fde:	49 5d       	subi	r20, 0xD9	; 217
     fe0:	31 fd       	sbrc	r19, 1
     fe2:	40 52       	subi	r20, 0x20	; 32
     fe4:	41 93       	st	Z+, r20
     fe6:	02 d0       	rcall	.+4      	; 0xfec <__ultoa_invert+0x84>
     fe8:	a9 f7       	brne	.-22     	; 0xfd4 <__ultoa_invert+0x6c>
     fea:	ea cf       	rjmp	.-44     	; 0xfc0 <__ultoa_invert+0x58>
     fec:	b4 e0       	ldi	r27, 0x04	; 4
     fee:	a6 95       	lsr	r26
     ff0:	97 95       	ror	r25
     ff2:	87 95       	ror	r24
     ff4:	77 95       	ror	r23
     ff6:	67 95       	ror	r22
     ff8:	ba 95       	dec	r27
     ffa:	c9 f7       	brne	.-14     	; 0xfee <__ultoa_invert+0x86>
     ffc:	00 97       	sbiw	r24, 0x00	; 0
     ffe:	61 05       	cpc	r22, r1
    1000:	71 05       	cpc	r23, r1
    1002:	08 95       	ret
    1004:	9b 01       	movw	r18, r22
    1006:	ac 01       	movw	r20, r24
    1008:	0a 2e       	mov	r0, r26
    100a:	06 94       	lsr	r0
    100c:	57 95       	ror	r21
    100e:	47 95       	ror	r20
    1010:	37 95       	ror	r19
    1012:	27 95       	ror	r18
    1014:	ba 95       	dec	r27
    1016:	c9 f7       	brne	.-14     	; 0x100a <__DATA_REGION_LENGTH__+0xa>
    1018:	62 0f       	add	r22, r18
    101a:	73 1f       	adc	r23, r19
    101c:	84 1f       	adc	r24, r20
    101e:	95 1f       	adc	r25, r21
    1020:	a0 1d       	adc	r26, r0
    1022:	08 95       	ret

00001024 <_exit>:
    1024:	f8 94       	cli

00001026 <__stop_program>:
    1026:	ff cf       	rjmp	.-2      	; 0x1026 <__stop_program>
