
Buzzer.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000027c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000228  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000027c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002ac  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000060  00000000  00000000  000002ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000ace  00000000  00000000  0000034c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000089a  00000000  00000000  00000e1a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003d7  00000000  00000000  000016b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000094  00000000  00000000  00001a8c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000465  00000000  00000000  00001b20  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000185  00000000  00000000  00001f85  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000040  00000000  00000000  0000210a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	4b c0       	rjmp	.+150    	; 0x9c <__bad_interrupt>
   6:	00 00       	nop
   8:	49 c0       	rjmp	.+146    	; 0x9c <__bad_interrupt>
   a:	00 00       	nop
   c:	47 c0       	rjmp	.+142    	; 0x9c <__bad_interrupt>
   e:	00 00       	nop
  10:	45 c0       	rjmp	.+138    	; 0x9c <__bad_interrupt>
  12:	00 00       	nop
  14:	43 c0       	rjmp	.+134    	; 0x9c <__bad_interrupt>
  16:	00 00       	nop
  18:	41 c0       	rjmp	.+130    	; 0x9c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	3f c0       	rjmp	.+126    	; 0x9c <__bad_interrupt>
  1e:	00 00       	nop
  20:	3d c0       	rjmp	.+122    	; 0x9c <__bad_interrupt>
  22:	00 00       	nop
  24:	3b c0       	rjmp	.+118    	; 0x9c <__bad_interrupt>
  26:	00 00       	nop
  28:	39 c0       	rjmp	.+114    	; 0x9c <__bad_interrupt>
  2a:	00 00       	nop
  2c:	37 c0       	rjmp	.+110    	; 0x9c <__bad_interrupt>
  2e:	00 00       	nop
  30:	35 c0       	rjmp	.+106    	; 0x9c <__bad_interrupt>
  32:	00 00       	nop
  34:	33 c0       	rjmp	.+102    	; 0x9c <__bad_interrupt>
  36:	00 00       	nop
  38:	31 c0       	rjmp	.+98     	; 0x9c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	2f c0       	rjmp	.+94     	; 0x9c <__bad_interrupt>
  3e:	00 00       	nop
  40:	2d c0       	rjmp	.+90     	; 0x9c <__bad_interrupt>
  42:	00 00       	nop
  44:	2b c0       	rjmp	.+86     	; 0x9c <__bad_interrupt>
  46:	00 00       	nop
  48:	29 c0       	rjmp	.+82     	; 0x9c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	27 c0       	rjmp	.+78     	; 0x9c <__bad_interrupt>
  4e:	00 00       	nop
  50:	25 c0       	rjmp	.+74     	; 0x9c <__bad_interrupt>
  52:	00 00       	nop
  54:	23 c0       	rjmp	.+70     	; 0x9c <__bad_interrupt>
  56:	00 00       	nop
  58:	21 c0       	rjmp	.+66     	; 0x9c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	1f c0       	rjmp	.+62     	; 0x9c <__bad_interrupt>
  5e:	00 00       	nop
  60:	1d c0       	rjmp	.+58     	; 0x9c <__bad_interrupt>
  62:	00 00       	nop
  64:	1b c0       	rjmp	.+54     	; 0x9c <__bad_interrupt>
  66:	00 00       	nop
  68:	19 c0       	rjmp	.+50     	; 0x9c <__bad_interrupt>
  6a:	00 00       	nop
  6c:	17 c0       	rjmp	.+46     	; 0x9c <__bad_interrupt>
  6e:	00 00       	nop
  70:	15 c0       	rjmp	.+42     	; 0x9c <__bad_interrupt>
  72:	00 00       	nop
  74:	13 c0       	rjmp	.+38     	; 0x9c <__bad_interrupt>
  76:	00 00       	nop
  78:	11 c0       	rjmp	.+34     	; 0x9c <__bad_interrupt>
  7a:	00 00       	nop
  7c:	0f c0       	rjmp	.+30     	; 0x9c <__bad_interrupt>
  7e:	00 00       	nop
  80:	0d c0       	rjmp	.+26     	; 0x9c <__bad_interrupt>
  82:	00 00       	nop
  84:	0b c0       	rjmp	.+22     	; 0x9c <__bad_interrupt>
  86:	00 00       	nop
  88:	09 c0       	rjmp	.+18     	; 0x9c <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	84 d0       	rcall	.+264    	; 0x1a2 <main>
  9a:	c4 c0       	rjmp	.+392    	; 0x224 <_exit>

0000009c <__bad_interrupt>:
  9c:	b1 cf       	rjmp	.-158    	; 0x0 <__vectors>

0000009e <Buzzer_init>:

void Buzzer_init(){
	//TIM3 FastPWM, TOP ICR3 ,DutyCycle OCR3A, preScaler 1/64, NON-INVERTING
	// Frequency: 1Khz, Duty Cycle 50%
	
	TCCR3B |= ((0<<CS32)|(1<<CS31)|(1<<CS30));
  9e:	ea e8       	ldi	r30, 0x8A	; 138
  a0:	f0 e0       	ldi	r31, 0x00	; 0
  a2:	80 81       	ld	r24, Z
  a4:	83 60       	ori	r24, 0x03	; 3
  a6:	80 83       	st	Z, r24
	TCCR3B |= (1<<WGM33)| (1<<WGM32);
  a8:	80 81       	ld	r24, Z
  aa:	88 61       	ori	r24, 0x18	; 24
  ac:	80 83       	st	Z, r24
	TCCR3A |= (1<<WGM31)| (0<<WGM30); //Fast PWM 14
  ae:	eb e8       	ldi	r30, 0x8B	; 139
  b0:	f0 e0       	ldi	r31, 0x00	; 0
  b2:	80 81       	ld	r24, Z
  b4:	82 60       	ori	r24, 0x02	; 2
  b6:	80 83       	st	Z, r24
	
	DDRE |= (1<<3);
  b8:	82 b1       	in	r24, 0x02	; 2
  ba:	88 60       	ori	r24, 0x08	; 8
  bc:	82 b9       	out	0x02, r24	; 2
  be:	08 95       	ret

000000c0 <Buzzer_SoundON>:
}

void Buzzer_SoundON(){
	TCCR3A |= (1<<COM3A1) | (0<<COM3A0);
  c0:	eb e8       	ldi	r30, 0x8B	; 139
  c2:	f0 e0       	ldi	r31, 0x00	; 0
  c4:	80 81       	ld	r24, Z
  c6:	80 68       	ori	r24, 0x80	; 128
  c8:	80 83       	st	Z, r24
  ca:	08 95       	ret

000000cc <Buzzer_SoundOFF>:
}

void Buzzer_SoundOFF(){
	TCCR3A &= ~((1<<COM3A1) | (1<<COM3A0));
  cc:	eb e8       	ldi	r30, 0x8B	; 139
  ce:	f0 e0       	ldi	r31, 0x00	; 0
  d0:	80 81       	ld	r24, Z
  d2:	8f 73       	andi	r24, 0x3F	; 63
  d4:	80 83       	st	Z, r24
  d6:	08 95       	ret

000000d8 <Buzzer_makeHertz>:
	TCNT3 = 0;
	Buzzer_SoundOFF();
}

void Buzzer_makeHertz(uint16_t hertz){
	if (hertz < 100) hertz =100;
  d8:	84 36       	cpi	r24, 0x64	; 100
  da:	91 05       	cpc	r25, r1
  dc:	28 f0       	brcs	.+10     	; 0xe8 <Buzzer_makeHertz+0x10>
	else if(hertz >5000) hertz = 5000;
  de:	89 38       	cpi	r24, 0x89	; 137
  e0:	23 e1       	ldi	r18, 0x13	; 19
  e2:	92 07       	cpc	r25, r18
  e4:	20 f4       	brcc	.+8      	; 0xee <Buzzer_makeHertz+0x16>
  e6:	05 c0       	rjmp	.+10     	; 0xf2 <Buzzer_makeHertz+0x1a>
	TCNT3 = 0;
	Buzzer_SoundOFF();
}

void Buzzer_makeHertz(uint16_t hertz){
	if (hertz < 100) hertz =100;
  e8:	84 e6       	ldi	r24, 0x64	; 100
  ea:	90 e0       	ldi	r25, 0x00	; 0
  ec:	02 c0       	rjmp	.+4      	; 0xf2 <Buzzer_makeHertz+0x1a>
	else if(hertz >5000) hertz = 5000;
  ee:	88 e8       	ldi	r24, 0x88	; 136
  f0:	93 e1       	ldi	r25, 0x13	; 19
	Buzzer_ICR = (250000/ hertz)-1;
  f2:	9c 01       	movw	r18, r24
  f4:	40 e0       	ldi	r20, 0x00	; 0
  f6:	50 e0       	ldi	r21, 0x00	; 0
  f8:	60 e9       	ldi	r22, 0x90	; 144
  fa:	70 ed       	ldi	r23, 0xD0	; 208
  fc:	83 e0       	ldi	r24, 0x03	; 3
  fe:	90 e0       	ldi	r25, 0x00	; 0
 100:	53 d0       	rcall	.+166    	; 0x1a8 <__divmodsi4>
 102:	21 50       	subi	r18, 0x01	; 1
 104:	31 09       	sbc	r19, r1
 106:	e0 e8       	ldi	r30, 0x80	; 128
 108:	f0 e0       	ldi	r31, 0x00	; 0
 10a:	31 83       	std	Z+1, r19	; 0x01
 10c:	20 83       	st	Z, r18
	Buzzer_OCR = Buzzer_ICR/2;
 10e:	80 81       	ld	r24, Z
 110:	91 81       	ldd	r25, Z+1	; 0x01
 112:	96 95       	lsr	r25
 114:	87 95       	ror	r24
 116:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
 11a:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
 11e:	08 95       	ret

00000120 <Buzzer_buttonOn>:
void Buzzer_SoundOFF(){
	TCCR3A &= ~((1<<COM3A1) | (1<<COM3A0));
}


void Buzzer_buttonOn(){
 120:	cf 93       	push	r28
 122:	df 93       	push	r29
	Buzzer_SoundON();
 124:	cd df       	rcall	.-102    	; 0xc0 <Buzzer_SoundON>
	Buzzer_makeHertz(1006);		// 6옥타브 도
 126:	8e ee       	ldi	r24, 0xEE	; 238
 128:	93 e0       	ldi	r25, 0x03	; 3
 12a:	d6 df       	rcall	.-84     	; 0xd8 <Buzzer_makeHertz>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 12c:	2f ef       	ldi	r18, 0xFF	; 255
 12e:	81 ee       	ldi	r24, 0xE1	; 225
 130:	94 e0       	ldi	r25, 0x04	; 4
 132:	21 50       	subi	r18, 0x01	; 1
 134:	80 40       	sbci	r24, 0x00	; 0
 136:	90 40       	sbci	r25, 0x00	; 0
 138:	e1 f7       	brne	.-8      	; 0x132 <Buzzer_buttonOn+0x12>
 13a:	00 c0       	rjmp	.+0      	; 0x13c <Buzzer_buttonOn+0x1c>
 13c:	00 00       	nop
	_delay_ms(100);
	TCNT3 = 0;
 13e:	c8 e8       	ldi	r28, 0x88	; 136
 140:	d0 e0       	ldi	r29, 0x00	; 0
 142:	19 82       	std	Y+1, r1	; 0x01
 144:	18 82       	st	Y, r1
	Buzzer_makeHertz(1318);		// 6옥타브 미
 146:	86 e2       	ldi	r24, 0x26	; 38
 148:	95 e0       	ldi	r25, 0x05	; 5
 14a:	c6 df       	rcall	.-116    	; 0xd8 <Buzzer_makeHertz>
 14c:	2f ef       	ldi	r18, 0xFF	; 255
 14e:	81 ee       	ldi	r24, 0xE1	; 225
 150:	94 e0       	ldi	r25, 0x04	; 4
 152:	21 50       	subi	r18, 0x01	; 1
 154:	80 40       	sbci	r24, 0x00	; 0
 156:	90 40       	sbci	r25, 0x00	; 0
 158:	e1 f7       	brne	.-8      	; 0x152 <Buzzer_buttonOn+0x32>
 15a:	00 c0       	rjmp	.+0      	; 0x15c <Buzzer_buttonOn+0x3c>
 15c:	00 00       	nop
	_delay_ms(100);
	TCNT3 = 0;
 15e:	19 82       	std	Y+1, r1	; 0x01
	Buzzer_makeHertz(1567);		// 6옥타브 솔
 160:	18 82       	st	Y, r1
 162:	8f e1       	ldi	r24, 0x1F	; 31
 164:	96 e0       	ldi	r25, 0x06	; 6
 166:	b8 df       	rcall	.-144    	; 0xd8 <Buzzer_makeHertz>
 168:	2f ef       	ldi	r18, 0xFF	; 255
 16a:	81 ee       	ldi	r24, 0xE1	; 225
 16c:	94 e0       	ldi	r25, 0x04	; 4
 16e:	21 50       	subi	r18, 0x01	; 1
 170:	80 40       	sbci	r24, 0x00	; 0
 172:	90 40       	sbci	r25, 0x00	; 0
 174:	e1 f7       	brne	.-8      	; 0x16e <Buzzer_buttonOn+0x4e>
 176:	00 c0       	rjmp	.+0      	; 0x178 <Buzzer_buttonOn+0x58>
 178:	00 00       	nop
	_delay_ms(100);
	TCNT3 = 0;
 17a:	19 82       	std	Y+1, r1	; 0x01
	Buzzer_makeHertz(2093);		// 7옥타브 도
 17c:	18 82       	st	Y, r1
 17e:	8d e2       	ldi	r24, 0x2D	; 45
 180:	98 e0       	ldi	r25, 0x08	; 8
 182:	aa df       	rcall	.-172    	; 0xd8 <Buzzer_makeHertz>
 184:	2f ef       	ldi	r18, 0xFF	; 255
 186:	81 ee       	ldi	r24, 0xE1	; 225
 188:	94 e0       	ldi	r25, 0x04	; 4
 18a:	21 50       	subi	r18, 0x01	; 1
 18c:	80 40       	sbci	r24, 0x00	; 0
 18e:	90 40       	sbci	r25, 0x00	; 0
 190:	e1 f7       	brne	.-8      	; 0x18a <Buzzer_buttonOn+0x6a>
 192:	00 c0       	rjmp	.+0      	; 0x194 <Buzzer_buttonOn+0x74>
	_delay_ms(100);
	TCNT3 = 0;
 194:	00 00       	nop
 196:	19 82       	std	Y+1, r1	; 0x01
	Buzzer_SoundOFF();
 198:	18 82       	st	Y, r1
 19a:	98 df       	rcall	.-208    	; 0xcc <Buzzer_SoundOFF>
}
 19c:	df 91       	pop	r29
 19e:	cf 91       	pop	r28
 1a0:	08 95       	ret

000001a2 <main>:


int main(void)
{
	
	Buzzer_init();
 1a2:	7d df       	rcall	.-262    	; 0x9e <Buzzer_init>
	
	while (1)
	{
		Buzzer_buttonOn();
 1a4:	bd df       	rcall	.-134    	; 0x120 <Buzzer_buttonOn>
 1a6:	fe cf       	rjmp	.-4      	; 0x1a4 <main+0x2>

000001a8 <__divmodsi4>:
 1a8:	05 2e       	mov	r0, r21
 1aa:	97 fb       	bst	r25, 7
 1ac:	16 f4       	brtc	.+4      	; 0x1b2 <__divmodsi4+0xa>
 1ae:	00 94       	com	r0
 1b0:	0f d0       	rcall	.+30     	; 0x1d0 <__negsi2>
 1b2:	57 fd       	sbrc	r21, 7
 1b4:	05 d0       	rcall	.+10     	; 0x1c0 <__divmodsi4_neg2>
 1b6:	14 d0       	rcall	.+40     	; 0x1e0 <__udivmodsi4>
 1b8:	07 fc       	sbrc	r0, 7
 1ba:	02 d0       	rcall	.+4      	; 0x1c0 <__divmodsi4_neg2>
 1bc:	46 f4       	brtc	.+16     	; 0x1ce <__divmodsi4_exit>
 1be:	08 c0       	rjmp	.+16     	; 0x1d0 <__negsi2>

000001c0 <__divmodsi4_neg2>:
 1c0:	50 95       	com	r21
 1c2:	40 95       	com	r20
 1c4:	30 95       	com	r19
 1c6:	21 95       	neg	r18
 1c8:	3f 4f       	sbci	r19, 0xFF	; 255
 1ca:	4f 4f       	sbci	r20, 0xFF	; 255
 1cc:	5f 4f       	sbci	r21, 0xFF	; 255

000001ce <__divmodsi4_exit>:
 1ce:	08 95       	ret

000001d0 <__negsi2>:
 1d0:	90 95       	com	r25
 1d2:	80 95       	com	r24
 1d4:	70 95       	com	r23
 1d6:	61 95       	neg	r22
 1d8:	7f 4f       	sbci	r23, 0xFF	; 255
 1da:	8f 4f       	sbci	r24, 0xFF	; 255
 1dc:	9f 4f       	sbci	r25, 0xFF	; 255
 1de:	08 95       	ret

000001e0 <__udivmodsi4>:
 1e0:	a1 e2       	ldi	r26, 0x21	; 33
 1e2:	1a 2e       	mov	r1, r26
 1e4:	aa 1b       	sub	r26, r26
 1e6:	bb 1b       	sub	r27, r27
 1e8:	fd 01       	movw	r30, r26
 1ea:	0d c0       	rjmp	.+26     	; 0x206 <__udivmodsi4_ep>

000001ec <__udivmodsi4_loop>:
 1ec:	aa 1f       	adc	r26, r26
 1ee:	bb 1f       	adc	r27, r27
 1f0:	ee 1f       	adc	r30, r30
 1f2:	ff 1f       	adc	r31, r31
 1f4:	a2 17       	cp	r26, r18
 1f6:	b3 07       	cpc	r27, r19
 1f8:	e4 07       	cpc	r30, r20
 1fa:	f5 07       	cpc	r31, r21
 1fc:	20 f0       	brcs	.+8      	; 0x206 <__udivmodsi4_ep>
 1fe:	a2 1b       	sub	r26, r18
 200:	b3 0b       	sbc	r27, r19
 202:	e4 0b       	sbc	r30, r20
 204:	f5 0b       	sbc	r31, r21

00000206 <__udivmodsi4_ep>:
 206:	66 1f       	adc	r22, r22
 208:	77 1f       	adc	r23, r23
 20a:	88 1f       	adc	r24, r24
 20c:	99 1f       	adc	r25, r25
 20e:	1a 94       	dec	r1
 210:	69 f7       	brne	.-38     	; 0x1ec <__udivmodsi4_loop>
 212:	60 95       	com	r22
 214:	70 95       	com	r23
 216:	80 95       	com	r24
 218:	90 95       	com	r25
 21a:	9b 01       	movw	r18, r22
 21c:	ac 01       	movw	r20, r24
 21e:	bd 01       	movw	r22, r26
 220:	cf 01       	movw	r24, r30
 222:	08 95       	ret

00000224 <_exit>:
 224:	f8 94       	cli

00000226 <__stop_program>:
 226:	ff cf       	rjmp	.-2      	; 0x226 <__stop_program>
