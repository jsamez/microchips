
StopWatch.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  00000440  000004d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000440  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000c  0080010a  0080010a  000004de  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000004de  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000510  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000f8  00000000  00000000  00000550  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001219  00000000  00000000  00000648  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000cd2  00000000  00000000  00001861  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000008ac  00000000  00000000  00002533  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000174  00000000  00000000  00002de0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005ff  00000000  00000000  00002f54  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000424  00000000  00000000  00003553  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a8  00000000  00000000  00003977  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e0 e4       	ldi	r30, 0x40	; 64
  a0:	f4 e0       	ldi	r31, 0x04	; 4
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	aa 30       	cpi	r26, 0x0A	; 10
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	aa e0       	ldi	r26, 0x0A	; 10
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a6 31       	cpi	r26, 0x16	; 22
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	8f d1       	rcall	.+798    	; 0x3e2 <main>
  c4:	bb c1       	rjmp	.+886    	; 0x43c <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <StopWatch_init>:
button_t btnMode;
uint16_t counter;
uint8_t StopwatchState;

void StopWatch_init(){
	FND_init();
  c8:	6c d0       	rcall	.+216    	; 0x1a2 <FND_init>
	Button_init(&btnMode, &DDRA, &PINA, 0);
  ca:	20 e0       	ldi	r18, 0x00	; 0
  cc:	49 e3       	ldi	r20, 0x39	; 57
  ce:	50 e0       	ldi	r21, 0x00	; 0
  d0:	6a e3       	ldi	r22, 0x3A	; 58
  d2:	70 e0       	ldi	r23, 0x00	; 0
  d4:	80 e1       	ldi	r24, 0x10	; 16
  d6:	91 e0       	ldi	r25, 0x01	; 1
  d8:	2c d0       	rcall	.+88     	; 0x132 <Button_init>
	counter = 0;
  da:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <counter+0x1>
  de:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <counter>
	StopwatchState = Stop;
  e2:	81 e0       	ldi	r24, 0x01	; 1
  e4:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <StopwatchState>
  e8:	08 95       	ret

000000ea <StopWatch_run>:
}

void StopWatch_run(){
	switch (StopwatchState){
  ea:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <StopwatchState>
  ee:	88 23       	and	r24, r24
  f0:	59 f0       	breq	.+22     	; 0x108 <StopWatch_run+0x1e>
  f2:	81 30       	cpi	r24, 0x01	; 1
  f4:	e9 f4       	brne	.+58     	; 0x130 <StopWatch_run+0x46>
		
		case Stop:
		FND_ISR_Process();
  f6:	6f d1       	rcall	.+734    	; 0x3d6 <FND_ISR_Process>
		if(button_getstate(&btnMode) == ACT_RELEASED)
  f8:	80 e1       	ldi	r24, 0x10	; 16
  fa:	91 e0       	ldi	r25, 0x01	; 1
  fc:	27 d0       	rcall	.+78     	; 0x14c <button_getstate>
  fe:	81 30       	cpi	r24, 0x01	; 1
 100:	b9 f4       	brne	.+46     	; 0x130 <StopWatch_run+0x46>
		{
			StopwatchState = Start;
 102:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <StopwatchState>
		}
		break;
		
		case Start:
		FND_ISR_Process();
 106:	08 95       	ret
 108:	66 d1       	rcall	.+716    	; 0x3d6 <FND_ISR_Process>
		FND_setFndData(counter++);
 10a:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <counter>
 10e:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <counter+0x1>
 112:	9c 01       	movw	r18, r24
 114:	2f 5f       	subi	r18, 0xFF	; 255
 116:	3f 4f       	sbci	r19, 0xFF	; 255
 118:	30 93 0f 01 	sts	0x010F, r19	; 0x80010f <counter+0x1>
 11c:	20 93 0e 01 	sts	0x010E, r18	; 0x80010e <counter>
		if(button_getstate(&btnMode) == ACT_RELEASED)
 120:	55 d1       	rcall	.+682    	; 0x3cc <FND_setFndData>
 122:	80 e1       	ldi	r24, 0x10	; 16
 124:	91 e0       	ldi	r25, 0x01	; 1
 126:	12 d0       	rcall	.+36     	; 0x14c <button_getstate>
 128:	81 30       	cpi	r24, 0x01	; 1
 12a:	11 f4       	brne	.+4      	; 0x130 <StopWatch_run+0x46>
		{
			StopwatchState = Stop;
 12c:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <StopwatchState>
 130:	08 95       	ret

00000132 <Button_init>:
ï»¿#include "button.h"


void Button_init(button_t *btn, volatile uint8_t *ddr, volatile uint8_t *pin, uint8_t pinnum){
 132:	fc 01       	movw	r30, r24
 134:	cb 01       	movw	r24, r22
	btn ->DDR =ddr;
 136:	71 83       	std	Z+1, r23	; 0x01
 138:	60 83       	st	Z, r22
	btn->PIN = pin;
 13a:	53 83       	std	Z+3, r21	; 0x03
 13c:	42 83       	std	Z+2, r20	; 0x02
	btn->pinNum = pinnum;
 13e:	25 83       	std	Z+5, r18	; 0x05
	btn->pS = 1;
 140:	31 e0       	ldi	r19, 0x01	; 1
 142:	34 83       	std	Z+4, r19	; 0x04
	Gpio_initPin(ddr,1,pinnum);
 144:	42 2f       	mov	r20, r18
 146:	61 e0       	ldi	r22, 0x01	; 1
 148:	4f c1       	rjmp	.+670    	; 0x3e8 <Gpio_initPin>
 14a:	08 95       	ret

0000014c <button_getstate>:
	
}

uint8_t button_getstate(button_t *btn){
 14c:	fc 01       	movw	r30, r24
	
	uint8_t curState = *btn->PIN &(1<<btn->pinNum);
 14e:	a2 81       	ldd	r26, Z+2	; 0x02
 150:	b3 81       	ldd	r27, Z+3	; 0x03
 152:	8c 91       	ld	r24, X
 154:	21 e0       	ldi	r18, 0x01	; 1
 156:	30 e0       	ldi	r19, 0x00	; 0
 158:	05 80       	ldd	r0, Z+5	; 0x05
 15a:	02 c0       	rjmp	.+4      	; 0x160 <button_getstate+0x14>
 15c:	22 0f       	add	r18, r18
 15e:	33 1f       	adc	r19, r19
 160:	0a 94       	dec	r0
 162:	e2 f7       	brpl	.-8      	; 0x15c <button_getstate+0x10>
 164:	28 23       	and	r18, r24
	if ((curState == 0) &&(btn->pS = 1)){
 166:	59 f4       	brne	.+22     	; 0x17e <button_getstate+0x32>
 168:	81 e0       	ldi	r24, 0x01	; 1
 16a:	84 83       	std	Z+4, r24	; 0x04
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 16c:	8f e3       	ldi	r24, 0x3F	; 63
 16e:	9c e9       	ldi	r25, 0x9C	; 156
 170:	01 97       	sbiw	r24, 0x01	; 1
 172:	f1 f7       	brne	.-4      	; 0x170 <button_getstate+0x24>
 174:	00 c0       	rjmp	.+0      	; 0x176 <button_getstate+0x2a>
 176:	00 00       	nop
		_delay_ms(10);
		btn->pS = PUSHED;
 178:	14 82       	std	Z+4, r1	; 0x04
		
		
		return ACT_PUSHED;
 17a:	80 e0       	ldi	r24, 0x00	; 0
 17c:	08 95       	ret
	}
	else if ((curState != 0 )&&(btn->pS == 0)){
 17e:	22 23       	and	r18, r18
 180:	61 f0       	breq	.+24     	; 0x19a <button_getstate+0x4e>
 182:	84 81       	ldd	r24, Z+4	; 0x04
 184:	81 11       	cpse	r24, r1
 186:	0b c0       	rjmp	.+22     	; 0x19e <button_getstate+0x52>
 188:	8f e3       	ldi	r24, 0x3F	; 63
 18a:	9c e9       	ldi	r25, 0x9C	; 156
 18c:	01 97       	sbiw	r24, 0x01	; 1
 18e:	f1 f7       	brne	.-4      	; 0x18c <button_getstate+0x40>
 190:	00 c0       	rjmp	.+0      	; 0x192 <button_getstate+0x46>
 192:	00 00       	nop
		_delay_ms(10);
		btn->pS = RELEASED;
 194:	81 e0       	ldi	r24, 0x01	; 1
 196:	84 83       	std	Z+4, r24	; 0x04
		return ACT_RELEASED;
 198:	08 95       	ret
	}
	
	return ACT_NONE;
 19a:	82 e0       	ldi	r24, 0x02	; 2
 19c:	08 95       	ret
 19e:	82 e0       	ldi	r24, 0x02	; 2
 1a0:	08 95       	ret

000001a2 <FND_init>:


uint16_t fndData = 0;

void FND_init(){
	FND_DIGIT_DDR	|= ((1<<FND_DIGIT_4)|(1<<FND_DIGIT_3)|(1<<FND_DIGIT_2)|(1<<FND_DIGIT_1)); 
 1a2:	82 b1       	in	r24, 0x02	; 2
 1a4:	80 6f       	ori	r24, 0xF0	; 240
 1a6:	82 b9       	out	0x02, r24	; 2
	FND_DATA_DDR	= 0xff;
 1a8:	8f ef       	ldi	r24, 0xFF	; 255
 1aa:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
 1ae:	08 95       	ret

000001b0 <FND_dispNum>:
}

void FND_dispNum(uint16_t fndNum){
 1b0:	cf 93       	push	r28
 1b2:	df 93       	push	r29
 1b4:	cd b7       	in	r28, 0x3d	; 61
 1b6:	de b7       	in	r29, 0x3e	; 62
 1b8:	2a 97       	sbiw	r28, 0x0a	; 10
 1ba:	0f b6       	in	r0, 0x3f	; 63
 1bc:	f8 94       	cli
 1be:	de bf       	out	0x3e, r29	; 62
 1c0:	0f be       	out	0x3f, r0	; 63
 1c2:	cd bf       	out	0x3d, r28	; 61
 1c4:	ac 01       	movw	r20, r24
	
	uint8_t fndFont[] = {0x3f,0x06,0x5b,0x4f,0x66,0x6d,0x7d,0x07,0x7f,0x6f};
 1c6:	8a e0       	ldi	r24, 0x0A	; 10
 1c8:	e0 e0       	ldi	r30, 0x00	; 0
 1ca:	f1 e0       	ldi	r31, 0x01	; 1
 1cc:	de 01       	movw	r26, r28
 1ce:	11 96       	adiw	r26, 0x01	; 1
 1d0:	01 90       	ld	r0, Z+
 1d2:	0d 92       	st	X+, r0
 1d4:	8a 95       	dec	r24
 1d6:	e1 f7       	brne	.-8      	; 0x1d0 <FND_dispNum+0x20>
	
	static uint8_t fndDigitState = 0;
	
	fndDigitState = (fndDigitState+1)%4;
 1d8:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <__data_end>
 1dc:	90 e0       	ldi	r25, 0x00	; 0
 1de:	01 96       	adiw	r24, 0x01	; 1
 1e0:	83 70       	andi	r24, 0x03	; 3
 1e2:	90 78       	andi	r25, 0x80	; 128
 1e4:	99 23       	and	r25, r25
 1e6:	24 f4       	brge	.+8      	; 0x1f0 <FND_dispNum+0x40>
 1e8:	01 97       	sbiw	r24, 0x01	; 1
 1ea:	8c 6f       	ori	r24, 0xFC	; 252
 1ec:	9f 6f       	ori	r25, 0xFF	; 255
 1ee:	01 96       	adiw	r24, 0x01	; 1
 1f0:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__data_end>
	switch (fndDigitState)
 1f4:	81 30       	cpi	r24, 0x01	; 1
 1f6:	09 f4       	brne	.+2      	; 0x1fa <FND_dispNum+0x4a>
 1f8:	46 c0       	rjmp	.+140    	; 0x286 <FND_dispNum+0xd6>
 1fa:	38 f0       	brcs	.+14     	; 0x20a <FND_dispNum+0x5a>
 1fc:	82 30       	cpi	r24, 0x02	; 2
 1fe:	09 f4       	brne	.+2      	; 0x202 <FND_dispNum+0x52>
 200:	7a c0       	rjmp	.+244    	; 0x2f6 <FND_dispNum+0x146>
 202:	83 30       	cpi	r24, 0x03	; 3
 204:	09 f4       	brne	.+2      	; 0x208 <FND_dispNum+0x58>
 206:	ad c0       	rjmp	.+346    	; 0x362 <FND_dispNum+0x1b2>
 208:	d8 c0       	rjmp	.+432    	; 0x3ba <FND_dispNum+0x20a>
	{
		case 0:
		PORTE |= ((1<<7)|(1<<6)|(1<<5)|(1<<4));
 20a:	83 b1       	in	r24, 0x03	; 3
 20c:	80 6f       	ori	r24, 0xF0	; 240
 20e:	83 b9       	out	0x03, r24	; 3
		PORTF = fndFont[fndNum/1000%10];
 210:	9a 01       	movw	r18, r20
 212:	36 95       	lsr	r19
 214:	27 95       	ror	r18
 216:	36 95       	lsr	r19
 218:	27 95       	ror	r18
 21a:	36 95       	lsr	r19
 21c:	27 95       	ror	r18
 21e:	a5 ec       	ldi	r26, 0xC5	; 197
 220:	b0 e2       	ldi	r27, 0x20	; 32
 222:	fd d0       	rcall	.+506    	; 0x41e <__umulhisi3>
 224:	ac 01       	movw	r20, r24
 226:	52 95       	swap	r21
 228:	42 95       	swap	r20
 22a:	4f 70       	andi	r20, 0x0F	; 15
 22c:	45 27       	eor	r20, r21
 22e:	5f 70       	andi	r21, 0x0F	; 15
 230:	45 27       	eor	r20, r21
 232:	9a 01       	movw	r18, r20
 234:	ad ec       	ldi	r26, 0xCD	; 205
 236:	bc ec       	ldi	r27, 0xCC	; 204
 238:	f2 d0       	rcall	.+484    	; 0x41e <__umulhisi3>
 23a:	96 95       	lsr	r25
 23c:	87 95       	ror	r24
 23e:	96 95       	lsr	r25
 240:	87 95       	ror	r24
 242:	96 95       	lsr	r25
 244:	87 95       	ror	r24
 246:	9c 01       	movw	r18, r24
 248:	22 0f       	add	r18, r18
 24a:	33 1f       	adc	r19, r19
 24c:	88 0f       	add	r24, r24
 24e:	99 1f       	adc	r25, r25
 250:	88 0f       	add	r24, r24
 252:	99 1f       	adc	r25, r25
 254:	88 0f       	add	r24, r24
 256:	99 1f       	adc	r25, r25
 258:	82 0f       	add	r24, r18
 25a:	93 1f       	adc	r25, r19
 25c:	9a 01       	movw	r18, r20
 25e:	28 1b       	sub	r18, r24
 260:	39 0b       	sbc	r19, r25
 262:	e1 e0       	ldi	r30, 0x01	; 1
 264:	f0 e0       	ldi	r31, 0x00	; 0
 266:	ec 0f       	add	r30, r28
 268:	fd 1f       	adc	r31, r29
 26a:	e2 0f       	add	r30, r18
 26c:	f3 1f       	adc	r31, r19
 26e:	80 81       	ld	r24, Z
 270:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
		PORTE = ~(1<<4);
 274:	8f ee       	ldi	r24, 0xEF	; 239
 276:	83 b9       	out	0x03, r24	; 3
 278:	8f e9       	ldi	r24, 0x9F	; 159
 27a:	9f e0       	ldi	r25, 0x0F	; 15
 27c:	01 97       	sbiw	r24, 0x01	; 1
 27e:	f1 f7       	brne	.-4      	; 0x27c <FND_dispNum+0xcc>
 280:	00 c0       	rjmp	.+0      	; 0x282 <FND_dispNum+0xd2>
 282:	00 00       	nop
 284:	9a c0       	rjmp	.+308    	; 0x3ba <FND_dispNum+0x20a>
		_delay_ms(1);
		break;
		
		case 1:
		PORTE |= ((1<<7)|(1<<6)|(1<<5)|(1<<4));
 286:	83 b1       	in	r24, 0x03	; 3
 288:	80 6f       	ori	r24, 0xF0	; 240
 28a:	83 b9       	out	0x03, r24	; 3
		PORTF = fndFont[fndNum/100%10];
 28c:	9a 01       	movw	r18, r20
 28e:	36 95       	lsr	r19
 290:	27 95       	ror	r18
 292:	36 95       	lsr	r19
 294:	27 95       	ror	r18
 296:	ab e7       	ldi	r26, 0x7B	; 123
 298:	b4 e1       	ldi	r27, 0x14	; 20
 29a:	c1 d0       	rcall	.+386    	; 0x41e <__umulhisi3>
 29c:	ac 01       	movw	r20, r24
 29e:	56 95       	lsr	r21
 2a0:	47 95       	ror	r20
 2a2:	9a 01       	movw	r18, r20
 2a4:	ad ec       	ldi	r26, 0xCD	; 205
 2a6:	bc ec       	ldi	r27, 0xCC	; 204
 2a8:	ba d0       	rcall	.+372    	; 0x41e <__umulhisi3>
 2aa:	96 95       	lsr	r25
 2ac:	87 95       	ror	r24
 2ae:	96 95       	lsr	r25
 2b0:	87 95       	ror	r24
 2b2:	96 95       	lsr	r25
 2b4:	87 95       	ror	r24
 2b6:	9c 01       	movw	r18, r24
 2b8:	22 0f       	add	r18, r18
 2ba:	33 1f       	adc	r19, r19
 2bc:	88 0f       	add	r24, r24
 2be:	99 1f       	adc	r25, r25
 2c0:	88 0f       	add	r24, r24
 2c2:	99 1f       	adc	r25, r25
 2c4:	88 0f       	add	r24, r24
 2c6:	99 1f       	adc	r25, r25
 2c8:	82 0f       	add	r24, r18
 2ca:	93 1f       	adc	r25, r19
 2cc:	9a 01       	movw	r18, r20
 2ce:	28 1b       	sub	r18, r24
 2d0:	39 0b       	sbc	r19, r25
 2d2:	e1 e0       	ldi	r30, 0x01	; 1
 2d4:	f0 e0       	ldi	r31, 0x00	; 0
 2d6:	ec 0f       	add	r30, r28
 2d8:	fd 1f       	adc	r31, r29
 2da:	e2 0f       	add	r30, r18
 2dc:	f3 1f       	adc	r31, r19
 2de:	80 81       	ld	r24, Z
 2e0:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
		PORTE = ~(1<<5);
 2e4:	8f ed       	ldi	r24, 0xDF	; 223
 2e6:	83 b9       	out	0x03, r24	; 3
 2e8:	8f e9       	ldi	r24, 0x9F	; 159
 2ea:	9f e0       	ldi	r25, 0x0F	; 15
 2ec:	01 97       	sbiw	r24, 0x01	; 1
 2ee:	f1 f7       	brne	.-4      	; 0x2ec <FND_dispNum+0x13c>
 2f0:	00 c0       	rjmp	.+0      	; 0x2f2 <FND_dispNum+0x142>
 2f2:	00 00       	nop
 2f4:	62 c0       	rjmp	.+196    	; 0x3ba <FND_dispNum+0x20a>
		_delay_ms(1);
		break;
		case 2:
		PORTE |= ((1<<7)|(1<<6)|(1<<5)|(1<<4));
 2f6:	83 b1       	in	r24, 0x03	; 3
 2f8:	80 6f       	ori	r24, 0xF0	; 240
		PORTF = fndFont[fndNum/10%10];
 2fa:	83 b9       	out	0x03, r24	; 3
 2fc:	9a 01       	movw	r18, r20
 2fe:	ad ec       	ldi	r26, 0xCD	; 205
 300:	bc ec       	ldi	r27, 0xCC	; 204
 302:	8d d0       	rcall	.+282    	; 0x41e <__umulhisi3>
 304:	ac 01       	movw	r20, r24
 306:	56 95       	lsr	r21
 308:	47 95       	ror	r20
 30a:	56 95       	lsr	r21
 30c:	47 95       	ror	r20
 30e:	56 95       	lsr	r21
 310:	47 95       	ror	r20
 312:	9a 01       	movw	r18, r20
 314:	84 d0       	rcall	.+264    	; 0x41e <__umulhisi3>
 316:	96 95       	lsr	r25
 318:	87 95       	ror	r24
 31a:	96 95       	lsr	r25
 31c:	87 95       	ror	r24
 31e:	96 95       	lsr	r25
 320:	87 95       	ror	r24
 322:	9c 01       	movw	r18, r24
 324:	22 0f       	add	r18, r18
 326:	33 1f       	adc	r19, r19
 328:	88 0f       	add	r24, r24
 32a:	99 1f       	adc	r25, r25
 32c:	88 0f       	add	r24, r24
 32e:	99 1f       	adc	r25, r25
 330:	88 0f       	add	r24, r24
 332:	99 1f       	adc	r25, r25
 334:	82 0f       	add	r24, r18
 336:	93 1f       	adc	r25, r19
 338:	9a 01       	movw	r18, r20
 33a:	28 1b       	sub	r18, r24
 33c:	39 0b       	sbc	r19, r25
 33e:	e1 e0       	ldi	r30, 0x01	; 1
 340:	f0 e0       	ldi	r31, 0x00	; 0
 342:	ec 0f       	add	r30, r28
 344:	fd 1f       	adc	r31, r29
 346:	e2 0f       	add	r30, r18
 348:	f3 1f       	adc	r31, r19
 34a:	80 81       	ld	r24, Z
 34c:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
		PORTE = ~(1<<6);
 350:	8f eb       	ldi	r24, 0xBF	; 191
 352:	83 b9       	out	0x03, r24	; 3
 354:	8f e9       	ldi	r24, 0x9F	; 159
 356:	9f e0       	ldi	r25, 0x0F	; 15
 358:	01 97       	sbiw	r24, 0x01	; 1
 35a:	f1 f7       	brne	.-4      	; 0x358 <FND_dispNum+0x1a8>
 35c:	00 c0       	rjmp	.+0      	; 0x35e <FND_dispNum+0x1ae>
 35e:	00 00       	nop
 360:	2c c0       	rjmp	.+88     	; 0x3ba <FND_dispNum+0x20a>
		_delay_ms(1);
		break;
		case 3:
		PORTE |= ((1<<7)|(1<<6)|(1<<5)|(1<<4));
 362:	83 b1       	in	r24, 0x03	; 3
 364:	80 6f       	ori	r24, 0xF0	; 240
		PORTF = fndFont[fndNum%10];
 366:	83 b9       	out	0x03, r24	; 3
 368:	9a 01       	movw	r18, r20
 36a:	ad ec       	ldi	r26, 0xCD	; 205
 36c:	bc ec       	ldi	r27, 0xCC	; 204
 36e:	57 d0       	rcall	.+174    	; 0x41e <__umulhisi3>
 370:	96 95       	lsr	r25
 372:	87 95       	ror	r24
 374:	96 95       	lsr	r25
 376:	87 95       	ror	r24
 378:	96 95       	lsr	r25
 37a:	87 95       	ror	r24
 37c:	9c 01       	movw	r18, r24
 37e:	22 0f       	add	r18, r18
 380:	33 1f       	adc	r19, r19
 382:	88 0f       	add	r24, r24
 384:	99 1f       	adc	r25, r25
 386:	88 0f       	add	r24, r24
 388:	99 1f       	adc	r25, r25
 38a:	88 0f       	add	r24, r24
 38c:	99 1f       	adc	r25, r25
 38e:	82 0f       	add	r24, r18
 390:	93 1f       	adc	r25, r19
 392:	9a 01       	movw	r18, r20
 394:	28 1b       	sub	r18, r24
 396:	39 0b       	sbc	r19, r25
 398:	e1 e0       	ldi	r30, 0x01	; 1
 39a:	f0 e0       	ldi	r31, 0x00	; 0
 39c:	ec 0f       	add	r30, r28
 39e:	fd 1f       	adc	r31, r29
 3a0:	e2 0f       	add	r30, r18
 3a2:	f3 1f       	adc	r31, r19
 3a4:	80 81       	ld	r24, Z
 3a6:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
		PORTE = ~(1<<7);
 3aa:	8f e7       	ldi	r24, 0x7F	; 127
 3ac:	83 b9       	out	0x03, r24	; 3
 3ae:	8f e9       	ldi	r24, 0x9F	; 159
 3b0:	9f e0       	ldi	r25, 0x0F	; 15
 3b2:	01 97       	sbiw	r24, 0x01	; 1
 3b4:	f1 f7       	brne	.-4      	; 0x3b2 <FND_dispNum+0x202>
 3b6:	00 c0       	rjmp	.+0      	; 0x3b8 <FND_dispNum+0x208>
 3b8:	00 00       	nop
		_delay_ms(1);
		break;
	}
}
 3ba:	2a 96       	adiw	r28, 0x0a	; 10
 3bc:	0f b6       	in	r0, 0x3f	; 63
 3be:	f8 94       	cli
 3c0:	de bf       	out	0x3e, r29	; 62
 3c2:	0f be       	out	0x3f, r0	; 63
 3c4:	cd bf       	out	0x3d, r28	; 61
 3c6:	df 91       	pop	r29
 3c8:	cf 91       	pop	r28
 3ca:	08 95       	ret

000003cc <FND_setFndData>:

void FND_setFndData(uint16_t data){
	fndData = data;
 3cc:	90 93 0c 01 	sts	0x010C, r25	; 0x80010c <fndData+0x1>
 3d0:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <fndData>
 3d4:	08 95       	ret

000003d6 <FND_ISR_Process>:
}

void FND_ISR_Process(){
	FND_dispNum(fndData);
 3d6:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <fndData>
 3da:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <fndData+0x1>
 3de:	e8 ce       	rjmp	.-560    	; 0x1b0 <FND_dispNum>
 3e0:	08 95       	ret

000003e2 <main>:
	TCNT0 = 130;
}

int main(void)
{
	StopWatch_init();
 3e2:	72 de       	rcall	.-796    	; 0xc8 <StopWatch_init>
	
    while (1) 
    {
		StopWatch_run();
 3e4:	82 de       	rcall	.-764    	; 0xea <StopWatch_run>
 3e6:	fe cf       	rjmp	.-4      	; 0x3e4 <main+0x2>

000003e8 <Gpio_initPin>:
 3e8:	61 11       	cpse	r22, r1
	
}

void Gpio_initPin(volatile uint8_t *DDR, uint8_t dir, uint8_t pinNum){
	
	if(dir == OUTPUT){
 3ea:	0c c0       	rjmp	.+24     	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
		*DDR |= (1<<pinNum);
 3ec:	fc 01       	movw	r30, r24
 3ee:	50 81       	ld	r21, Z
 3f0:	21 e0       	ldi	r18, 0x01	; 1
 3f2:	30 e0       	ldi	r19, 0x00	; 0
 3f4:	02 c0       	rjmp	.+4      	; 0x3fa <Gpio_initPin+0x12>
 3f6:	22 0f       	add	r18, r18
 3f8:	33 1f       	adc	r19, r19
 3fa:	4a 95       	dec	r20
 3fc:	e2 f7       	brpl	.-8      	; 0x3f6 <Gpio_initPin+0xe>
 3fe:	25 2b       	or	r18, r21
 400:	20 83       	st	Z, r18
 402:	08 95       	ret
	}
	else{
		*DDR &= ~(1<<pinNum); 
 404:	fc 01       	movw	r30, r24
 406:	50 81       	ld	r21, Z
 408:	21 e0       	ldi	r18, 0x01	; 1
 40a:	30 e0       	ldi	r19, 0x00	; 0
 40c:	02 c0       	rjmp	.+4      	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
 40e:	22 0f       	add	r18, r18
 410:	33 1f       	adc	r19, r19
 412:	4a 95       	dec	r20
 414:	e2 f7       	brpl	.-8      	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
 416:	20 95       	com	r18
 418:	25 23       	and	r18, r21
 41a:	20 83       	st	Z, r18
 41c:	08 95       	ret

0000041e <__umulhisi3>:
 41e:	a2 9f       	mul	r26, r18
 420:	b0 01       	movw	r22, r0
 422:	b3 9f       	mul	r27, r19
 424:	c0 01       	movw	r24, r0
 426:	a3 9f       	mul	r26, r19
 428:	70 0d       	add	r23, r0
 42a:	81 1d       	adc	r24, r1
 42c:	11 24       	eor	r1, r1
 42e:	91 1d       	adc	r25, r1
 430:	b2 9f       	mul	r27, r18
 432:	70 0d       	add	r23, r0
 434:	81 1d       	adc	r24, r1
 436:	11 24       	eor	r1, r1
 438:	91 1d       	adc	r25, r1
 43a:	08 95       	ret

0000043c <_exit>:
 43c:	f8 94       	cli

0000043e <__stop_program>:
 43e:	ff cf       	rjmp	.-2      	; 0x43e <__stop_program>
