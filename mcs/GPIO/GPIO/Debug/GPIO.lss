
GPIO.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  000001f8  0000028c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001f8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  0080010a  0080010a  00000296  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000296  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002c8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000030  00000000  00000000  00000308  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000a40  00000000  00000000  00000338  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008cf  00000000  00000000  00000d78  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000033c  00000000  00000000  00001647  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000054  00000000  00000000  00001984  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000438  00000000  00000000  000019d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000144  00000000  00000000  00001e10  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000020  00000000  00000000  00001f54  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e8 ef       	ldi	r30, 0xF8	; 248
  a0:	f1 e0       	ldi	r31, 0x01	; 1
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	aa 30       	cpi	r26, 0x0A	; 10
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	aa e0       	ldi	r26, 0x0A	; 10
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	ab 30       	cpi	r26, 0x0B	; 11
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	4f d0       	rcall	.+158    	; 0x162 <main>
  c4:	97 c0       	rjmp	.+302    	; 0x1f4 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <AUTOCONTROL>:

enum{AUTO, MANUAL, CONTROL};
uint8_t ledData=0b00100001;
uint8_t buttonState;

void AUTOCONTROL(int a[], int *pi){
  c8:	fb 01       	movw	r30, r22
	LED_PORT = ledData;
  ca:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  ce:	22 bb       	out	0x12, r18	; 18
	ledData = a[*pi];
  d0:	20 81       	ld	r18, Z
  d2:	31 81       	ldd	r19, Z+1	; 0x01
  d4:	22 0f       	add	r18, r18
  d6:	33 1f       	adc	r19, r19
  d8:	82 0f       	add	r24, r18
  da:	93 1f       	adc	r25, r19
  dc:	dc 01       	movw	r26, r24
  de:	8c 91       	ld	r24, X
  e0:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	if(1 == *pi%2){
  e4:	80 81       	ld	r24, Z
  e6:	91 81       	ldd	r25, Z+1	; 0x01
  e8:	81 70       	andi	r24, 0x01	; 1
  ea:	90 78       	andi	r25, 0x80	; 128
  ec:	99 23       	and	r25, r25
  ee:	24 f4       	brge	.+8      	; 0xf8 <AUTOCONTROL+0x30>
  f0:	01 97       	sbiw	r24, 0x01	; 1
  f2:	8e 6f       	ori	r24, 0xFE	; 254
  f4:	9f 6f       	ori	r25, 0xFF	; 255
  f6:	01 96       	adiw	r24, 0x01	; 1
  f8:	01 97       	sbiw	r24, 0x01	; 1
  fa:	51 f4       	brne	.+20     	; 0x110 <AUTOCONTROL+0x48>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  fc:	bf ef       	ldi	r27, 0xFF	; 255
  fe:	23 ed       	ldi	r18, 0xD3	; 211
 100:	80 e3       	ldi	r24, 0x30	; 48
 102:	b1 50       	subi	r27, 0x01	; 1
 104:	20 40       	sbci	r18, 0x00	; 0
 106:	80 40       	sbci	r24, 0x00	; 0
 108:	e1 f7       	brne	.-8      	; 0x102 <AUTOCONTROL+0x3a>
 10a:	00 c0       	rjmp	.+0      	; 0x10c <AUTOCONTROL+0x44>
 10c:	00 00       	nop
 10e:	09 c0       	rjmp	.+18     	; 0x122 <AUTOCONTROL+0x5a>
 110:	9f ef       	ldi	r25, 0xFF	; 255
 112:	ab e7       	ldi	r26, 0x7B	; 123
 114:	b2 e9       	ldi	r27, 0x92	; 146
 116:	91 50       	subi	r25, 0x01	; 1
 118:	a0 40       	sbci	r26, 0x00	; 0
 11a:	b0 40       	sbci	r27, 0x00	; 0
 11c:	e1 f7       	brne	.-8      	; 0x116 <AUTOCONTROL+0x4e>
 11e:	00 c0       	rjmp	.+0      	; 0x120 <AUTOCONTROL+0x58>
 120:	00 00       	nop
		_delay_ms(1000);
	}
	else{
		_delay_ms(3000);
	}
	*pi=*pi+1;
 122:	80 81       	ld	r24, Z
 124:	91 81       	ldd	r25, Z+1	; 0x01
 126:	01 96       	adiw	r24, 0x01	; 1
 128:	91 83       	std	Z+1, r25	; 0x01
 12a:	80 83       	st	Z, r24
 12c:	08 95       	ret

0000012e <Manual>:
}

void Manual(int a[], int *pi){
 12e:	9c 01       	movw	r18, r24
	LED_PORT =ledData;
 130:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 134:	92 bb       	out	0x12, r25	; 18
	if((buttonState & (1<<BUTTON_CONTROL))==0){
 136:	90 91 0a 01 	lds	r25, 0x010A	; 0x80010a <__data_end>
 13a:	92 fd       	sbrc	r25, 2
 13c:	11 c0       	rjmp	.+34     	; 0x160 <Manual+0x32>
		ledData=a[*pi];
 13e:	db 01       	movw	r26, r22
 140:	ed 91       	ld	r30, X+
 142:	fc 91       	ld	r31, X
 144:	11 97       	sbiw	r26, 0x01	; 1
 146:	ee 0f       	add	r30, r30
 148:	ff 1f       	adc	r31, r31
 14a:	e2 0f       	add	r30, r18
 14c:	f3 1f       	adc	r31, r19
 14e:	80 81       	ld	r24, Z
 150:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		*pi=*pi+1;
 154:	8d 91       	ld	r24, X+
 156:	9c 91       	ld	r25, X
 158:	11 97       	sbiw	r26, 0x01	; 1
 15a:	01 96       	adiw	r24, 0x01	; 1
 15c:	8d 93       	st	X+, r24
 15e:	9c 93       	st	X, r25
 160:	08 95       	ret

00000162 <main>:
	}
}


int main(void)
{
 162:	cf 93       	push	r28
 164:	df 93       	push	r29
 166:	cd b7       	in	r28, 0x3d	; 61
 168:	de b7       	in	r29, 0x3e	; 62
 16a:	2a 97       	sbiw	r28, 0x0a	; 10
 16c:	0f b6       	in	r0, 0x3f	; 63
 16e:	f8 94       	cli
 170:	de bf       	out	0x3e, r29	; 62
 172:	0f be       	out	0x3f, r0	; 63
 174:	cd bf       	out	0x3d, r28	; 61
	LED_DDR = 0xff;
 176:	8f ef       	ldi	r24, 0xFF	; 255
 178:	81 bb       	out	0x11, r24	; 17
	BUTTON_DDR = 0b00000000;
 17a:	1a ba       	out	0x1a, r1	; 26
	BUTTON_PORT = 0xff;
 17c:	8b bb       	out	0x1b, r24	; 27
	
	
	uint8_t ledState = AUTO;
	int colors[4] = {0b00100010, 0b00001100, 0b00010100, 0b00100001};
 17e:	88 e0       	ldi	r24, 0x08	; 8
 180:	e1 e0       	ldi	r30, 0x01	; 1
 182:	f1 e0       	ldi	r31, 0x01	; 1
 184:	de 01       	movw	r26, r28
 186:	11 96       	adiw	r26, 0x01	; 1
 188:	01 90       	ld	r0, Z+
 18a:	0d 92       	st	X+, r0
 18c:	8a 95       	dec	r24
 18e:	e1 f7       	brne	.-8      	; 0x188 <main+0x26>
	int i=0;
 190:	1a 86       	std	Y+10, r1	; 0x0a
 192:	19 86       	std	Y+9, r1	; 0x09
	LED_DDR = 0xff;
	BUTTON_DDR = 0b00000000;
	BUTTON_PORT = 0xff;
	
	
	uint8_t ledState = AUTO;
 194:	10 e0       	ldi	r17, 0x00	; 0
	

	/* Replace with your application code */
	while (1)
	{
		buttonState = BUTTON_PIN;
 196:	89 b3       	in	r24, 0x19	; 25
 198:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__data_end>
		if((buttonState & (1<<BUTTON_AUTO))==0){
 19c:	80 ff       	sbrs	r24, 0
			ledState = AUTO;
 19e:	10 e0       	ldi	r17, 0x00	; 0
		}
		if((buttonState & (1<<BUTTON_MANUAL))==0){
 1a0:	81 ff       	sbrs	r24, 1
			ledState = MANUAL;
 1a2:	11 e0       	ldi	r17, 0x01	; 1
		}
		
		switch(ledState){
 1a4:	11 23       	and	r17, r17
 1a6:	19 f0       	breq	.+6      	; 0x1ae <main+0x4c>
 1a8:	11 30       	cpi	r17, 0x01	; 1
 1aa:	71 f0       	breq	.+28     	; 0x1c8 <main+0x66>
 1ac:	f4 cf       	rjmp	.-24     	; 0x196 <main+0x34>
			case AUTO:
			AUTOCONTROL(colors, &i);
 1ae:	be 01       	movw	r22, r28
 1b0:	67 5f       	subi	r22, 0xF7	; 247
 1b2:	7f 4f       	sbci	r23, 0xFF	; 255
 1b4:	ce 01       	movw	r24, r28
 1b6:	01 96       	adiw	r24, 0x01	; 1
 1b8:	87 df       	rcall	.-242    	; 0xc8 <AUTOCONTROL>
			if(i==4){
 1ba:	89 85       	ldd	r24, Y+9	; 0x09
 1bc:	9a 85       	ldd	r25, Y+10	; 0x0a
 1be:	04 97       	sbiw	r24, 0x04	; 4
 1c0:	51 f7       	brne	.-44     	; 0x196 <main+0x34>
				i=0;
 1c2:	1a 86       	std	Y+10, r1	; 0x0a
 1c4:	19 86       	std	Y+9, r1	; 0x09
 1c6:	e7 cf       	rjmp	.-50     	; 0x196 <main+0x34>
			}
			break;
			
			case MANUAL:
			Manual(colors,&i);
 1c8:	be 01       	movw	r22, r28
 1ca:	67 5f       	subi	r22, 0xF7	; 247
 1cc:	7f 4f       	sbci	r23, 0xFF	; 255
 1ce:	ce 01       	movw	r24, r28
 1d0:	01 96       	adiw	r24, 0x01	; 1
 1d2:	ad df       	rcall	.-166    	; 0x12e <Manual>
			if(i==4){
 1d4:	89 85       	ldd	r24, Y+9	; 0x09
 1d6:	9a 85       	ldd	r25, Y+10	; 0x0a
 1d8:	04 97       	sbiw	r24, 0x04	; 4
 1da:	11 f4       	brne	.+4      	; 0x1e0 <main+0x7e>
				i=0;
 1dc:	1a 86       	std	Y+10, r1	; 0x0a
 1de:	19 86       	std	Y+9, r1	; 0x09
 1e0:	2f ef       	ldi	r18, 0xFF	; 255
 1e2:	89 ec       	ldi	r24, 0xC9	; 201
 1e4:	98 e0       	ldi	r25, 0x08	; 8
 1e6:	21 50       	subi	r18, 0x01	; 1
 1e8:	80 40       	sbci	r24, 0x00	; 0
 1ea:	90 40       	sbci	r25, 0x00	; 0
 1ec:	e1 f7       	brne	.-8      	; 0x1e6 <main+0x84>
 1ee:	00 c0       	rjmp	.+0      	; 0x1f0 <main+0x8e>
 1f0:	00 00       	nop
 1f2:	d1 cf       	rjmp	.-94     	; 0x196 <main+0x34>

000001f4 <_exit>:
 1f4:	f8 94       	cli

000001f6 <__stop_program>:
 1f6:	ff cf       	rjmp	.-2      	; 0x1f6 <__stop_program>
