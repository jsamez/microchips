
TrafficSignal.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000462  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000003ee  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001d  00800100  00800100  00000462  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000462  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000494  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c8  00000000  00000000  000004d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001045  00000000  00000000  0000059c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000af2  00000000  00000000  000015e1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000007a9  00000000  00000000  000020d3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000012c  00000000  00000000  0000287c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005ee  00000000  00000000  000029a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000163  00000000  00000000  00002f96  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000088  00000000  00000000  000030f9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	53 c0       	rjmp	.+166    	; 0xac <__bad_interrupt>
   6:	00 00       	nop
   8:	51 c0       	rjmp	.+162    	; 0xac <__bad_interrupt>
   a:	00 00       	nop
   c:	4f c0       	rjmp	.+158    	; 0xac <__bad_interrupt>
   e:	00 00       	nop
  10:	4d c0       	rjmp	.+154    	; 0xac <__bad_interrupt>
  12:	00 00       	nop
  14:	4b c0       	rjmp	.+150    	; 0xac <__bad_interrupt>
  16:	00 00       	nop
  18:	49 c0       	rjmp	.+146    	; 0xac <__bad_interrupt>
  1a:	00 00       	nop
  1c:	47 c0       	rjmp	.+142    	; 0xac <__bad_interrupt>
  1e:	00 00       	nop
  20:	45 c0       	rjmp	.+138    	; 0xac <__bad_interrupt>
  22:	00 00       	nop
  24:	43 c0       	rjmp	.+134    	; 0xac <__bad_interrupt>
  26:	00 00       	nop
  28:	41 c0       	rjmp	.+130    	; 0xac <__bad_interrupt>
  2a:	00 00       	nop
  2c:	3f c0       	rjmp	.+126    	; 0xac <__bad_interrupt>
  2e:	00 00       	nop
  30:	3d c0       	rjmp	.+122    	; 0xac <__bad_interrupt>
  32:	00 00       	nop
  34:	3b c0       	rjmp	.+118    	; 0xac <__bad_interrupt>
  36:	00 00       	nop
  38:	39 c0       	rjmp	.+114    	; 0xac <__bad_interrupt>
  3a:	00 00       	nop
  3c:	37 c0       	rjmp	.+110    	; 0xac <__bad_interrupt>
  3e:	00 00       	nop
  40:	35 c0       	rjmp	.+106    	; 0xac <__bad_interrupt>
  42:	00 00       	nop
  44:	33 c0       	rjmp	.+102    	; 0xac <__bad_interrupt>
  46:	00 00       	nop
  48:	31 c0       	rjmp	.+98     	; 0xac <__bad_interrupt>
  4a:	00 00       	nop
  4c:	2f c0       	rjmp	.+94     	; 0xac <__bad_interrupt>
  4e:	00 00       	nop
  50:	2d c0       	rjmp	.+90     	; 0xac <__bad_interrupt>
  52:	00 00       	nop
  54:	2b c0       	rjmp	.+86     	; 0xac <__bad_interrupt>
  56:	00 00       	nop
  58:	29 c0       	rjmp	.+82     	; 0xac <__bad_interrupt>
  5a:	00 00       	nop
  5c:	27 c0       	rjmp	.+78     	; 0xac <__bad_interrupt>
  5e:	00 00       	nop
  60:	25 c0       	rjmp	.+74     	; 0xac <__bad_interrupt>
  62:	00 00       	nop
  64:	23 c0       	rjmp	.+70     	; 0xac <__bad_interrupt>
  66:	00 00       	nop
  68:	21 c0       	rjmp	.+66     	; 0xac <__bad_interrupt>
  6a:	00 00       	nop
  6c:	1f c0       	rjmp	.+62     	; 0xac <__bad_interrupt>
  6e:	00 00       	nop
  70:	1d c0       	rjmp	.+58     	; 0xac <__bad_interrupt>
  72:	00 00       	nop
  74:	1b c0       	rjmp	.+54     	; 0xac <__bad_interrupt>
  76:	00 00       	nop
  78:	19 c0       	rjmp	.+50     	; 0xac <__bad_interrupt>
  7a:	00 00       	nop
  7c:	17 c0       	rjmp	.+46     	; 0xac <__bad_interrupt>
  7e:	00 00       	nop
  80:	15 c0       	rjmp	.+42     	; 0xac <__bad_interrupt>
  82:	00 00       	nop
  84:	13 c0       	rjmp	.+38     	; 0xac <__bad_interrupt>
  86:	00 00       	nop
  88:	11 c0       	rjmp	.+34     	; 0xac <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	ad 31       	cpi	r26, 0x1D	; 29
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	9d d1       	rcall	.+826    	; 0x3e4 <main>
  aa:	9f c1       	rjmp	.+830    	; 0x3ea <_exit>

000000ac <__bad_interrupt>:
  ac:	a9 cf       	rjmp	.-174    	; 0x0 <__vectors>

000000ae <TrafficSignal_init>:
uint8_t trafficData;


void TrafficSignal_init(){
	
	trafficState = RED_GREEN;
  ae:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <trafficState>
	timeTick = 0;
  b2:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <timeTick>
  b6:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <timeTick+0x1>
  ba:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <timeTick+0x2>
  be:	10 92 1b 01 	sts	0x011B, r1	; 0x80011b <timeTick+0x3>
	
	LED_init();
  c2:	8b d1       	rcall	.+790    	; 0x3da <LED_init>
	Button_init(&btnAuto, &DDRA, &PINA, 0);
  c4:	20 e0       	ldi	r18, 0x00	; 0
  c6:	49 e3       	ldi	r20, 0x39	; 57
  c8:	50 e0       	ldi	r21, 0x00	; 0
  ca:	6a e3       	ldi	r22, 0x3A	; 58
  cc:	70 e0       	ldi	r23, 0x00	; 0
  ce:	8c e0       	ldi	r24, 0x0C	; 12
  d0:	91 e0       	ldi	r25, 0x01	; 1
  d2:	43 d1       	rcall	.+646    	; 0x35a <Button_init>
	Button_init(&btnManual, &DDRA, &PINA, 1);
  d4:	21 e0       	ldi	r18, 0x01	; 1
  d6:	49 e3       	ldi	r20, 0x39	; 57
  d8:	50 e0       	ldi	r21, 0x00	; 0
  da:	6a e3       	ldi	r22, 0x3A	; 58
  dc:	70 e0       	ldi	r23, 0x00	; 0
  de:	82 e1       	ldi	r24, 0x12	; 18
  e0:	91 e0       	ldi	r25, 0x01	; 1
  e2:	3b d1       	rcall	.+630    	; 0x35a <Button_init>
	Button_init(&btnCtrl, &DDRA, &PINA, 2);
  e4:	22 e0       	ldi	r18, 0x02	; 2
  e6:	49 e3       	ldi	r20, 0x39	; 57
  e8:	50 e0       	ldi	r21, 0x00	; 0
  ea:	6a e3       	ldi	r22, 0x3A	; 58
  ec:	70 e0       	ldi	r23, 0x00	; 0
  ee:	84 e0       	ldi	r24, 0x04	; 4
  f0:	91 e0       	ldi	r25, 0x01	; 1
  f2:	33 d1       	rcall	.+614    	; 0x35a <Button_init>
	//TRAFFIC_BUTTON_PORT = 0xff
	
	trafficModeState = AUTO;
  f4:	10 92 1c 01 	sts	0x011C, r1	; 0x80011c <trafficModeState>
  f8:	08 95       	ret

000000fa <TrafficSignal_REDGREEN>:
}


void TrafficSignal_REDGREEN()
{
	trafficData = (1<<TRAFFIC_LIGHT_VRED) | (1<<TRAFFIC_LIGHT_HGREEN);
  fa:	8c e0       	ldi	r24, 0x0C	; 12
  fc:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <trafficData>
	LED_WriteData(trafficData);
 100:	6f c1       	rjmp	.+734    	; 0x3e0 <LED_WriteData>
 102:	08 95       	ret

00000104 <TrafficSignal_REDYELLOW>:
}

void TrafficSignal_REDYELLOW()
{
	trafficData = (1<<TRAFFIC_LIGHT_VRED) | (1<<TRAFFIC_LIGHT_HYELLOW);
 104:	84 e1       	ldi	r24, 0x14	; 20
 106:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <trafficData>
	LED_WriteData(trafficData);
 10a:	6a c1       	rjmp	.+724    	; 0x3e0 <LED_WriteData>
 10c:	08 95       	ret

0000010e <TrafficSignal_GREENRED>:
}

void TrafficSignal_GREENRED()
{
	trafficData = (1<<TRAFFIC_LIGHT_VGREEN) | (1<<TRAFFIC_LIGHT_HRED);
 10e:	81 e2       	ldi	r24, 0x21	; 33
 110:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <trafficData>
	LED_WriteData(trafficData);
 114:	65 c1       	rjmp	.+714    	; 0x3e0 <LED_WriteData>
 116:	08 95       	ret

00000118 <TrafficSignal_YELLOWRED>:
}

void TrafficSignal_YELLOWRED()
{
	trafficData = (1<<TRAFFIC_LIGHT_VYELLOW) | (1<<TRAFFIC_LIGHT_HRED);
 118:	82 e2       	ldi	r24, 0x22	; 34
 11a:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <trafficData>
	LED_WriteData(trafficData);
 11e:	60 c1       	rjmp	.+704    	; 0x3e0 <LED_WriteData>
 120:	08 95       	ret

00000122 <TrafficSignal_AUTO>:
	timeTick++;
}


void TrafficSignal_AUTO()
{
 122:	0f 93       	push	r16
 124:	1f 93       	push	r17
	static uint32_t prevTime = 0;
	
	switch(trafficState)
 126:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <trafficState>
 12a:	81 30       	cpi	r24, 0x01	; 1
 12c:	99 f1       	breq	.+102    	; 0x194 <TrafficSignal_AUTO+0x72>
 12e:	38 f0       	brcs	.+14     	; 0x13e <TrafficSignal_AUTO+0x1c>
 130:	82 30       	cpi	r24, 0x02	; 2
 132:	09 f4       	brne	.+2      	; 0x136 <TrafficSignal_AUTO+0x14>
 134:	5a c0       	rjmp	.+180    	; 0x1ea <TrafficSignal_AUTO+0xc8>
 136:	83 30       	cpi	r24, 0x03	; 3
 138:	09 f4       	brne	.+2      	; 0x13c <TrafficSignal_AUTO+0x1a>
 13a:	81 c0       	rjmp	.+258    	; 0x23e <TrafficSignal_AUTO+0x11c>
 13c:	a8 c0       	rjmp	.+336    	; 0x28e <TrafficSignal_AUTO+0x16c>
	{
		case RED_GREEN :
		TrafficSignal_REDGREEN();
 13e:	dd df       	rcall	.-70     	; 0xfa <TrafficSignal_REDGREEN>
		if(timeTick - prevTime >= 3000)
 140:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <timeTick>
 144:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <timeTick+0x1>
 148:	a0 91 1a 01 	lds	r26, 0x011A	; 0x80011a <timeTick+0x2>
 14c:	b0 91 1b 01 	lds	r27, 0x011B	; 0x80011b <timeTick+0x3>
 150:	40 91 00 01 	lds	r20, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 154:	50 91 01 01 	lds	r21, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 158:	60 91 02 01 	lds	r22, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 15c:	70 91 03 01 	lds	r23, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 160:	8c 01       	movw	r16, r24
 162:	9d 01       	movw	r18, r26
 164:	04 1b       	sub	r16, r20
 166:	15 0b       	sbc	r17, r21
 168:	26 0b       	sbc	r18, r22
 16a:	37 0b       	sbc	r19, r23
 16c:	b9 01       	movw	r22, r18
 16e:	a8 01       	movw	r20, r16
 170:	48 3b       	cpi	r20, 0xB8	; 184
 172:	5b 40       	sbci	r21, 0x0B	; 11
 174:	61 05       	cpc	r22, r1
 176:	71 05       	cpc	r23, r1
 178:	08 f4       	brcc	.+2      	; 0x17c <TrafficSignal_AUTO+0x5a>
 17a:	89 c0       	rjmp	.+274    	; 0x28e <TrafficSignal_AUTO+0x16c>
		{
			prevTime = timeTick;
 17c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 180:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 184:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 188:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
			trafficState = RED_YELLOW;
 18c:	81 e0       	ldi	r24, 0x01	; 1
 18e:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <trafficState>
		}
		break;
		case RED_YELLOW :
		TrafficSignal_REDYELLOW();
 192:	7d c0       	rjmp	.+250    	; 0x28e <TrafficSignal_AUTO+0x16c>
 194:	b7 df       	rcall	.-146    	; 0x104 <TrafficSignal_REDYELLOW>
		if(timeTick - prevTime >= 1000)
 196:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <timeTick>
 19a:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <timeTick+0x1>
 19e:	a0 91 1a 01 	lds	r26, 0x011A	; 0x80011a <timeTick+0x2>
 1a2:	b0 91 1b 01 	lds	r27, 0x011B	; 0x80011b <timeTick+0x3>
 1a6:	40 91 00 01 	lds	r20, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 1aa:	50 91 01 01 	lds	r21, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 1ae:	60 91 02 01 	lds	r22, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 1b2:	70 91 03 01 	lds	r23, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 1b6:	8c 01       	movw	r16, r24
 1b8:	9d 01       	movw	r18, r26
 1ba:	04 1b       	sub	r16, r20
 1bc:	15 0b       	sbc	r17, r21
 1be:	26 0b       	sbc	r18, r22
 1c0:	37 0b       	sbc	r19, r23
 1c2:	b9 01       	movw	r22, r18
 1c4:	a8 01       	movw	r20, r16
 1c6:	48 3e       	cpi	r20, 0xE8	; 232
 1c8:	53 40       	sbci	r21, 0x03	; 3
 1ca:	61 05       	cpc	r22, r1
 1cc:	71 05       	cpc	r23, r1
 1ce:	08 f4       	brcc	.+2      	; 0x1d2 <TrafficSignal_AUTO+0xb0>
 1d0:	5e c0       	rjmp	.+188    	; 0x28e <TrafficSignal_AUTO+0x16c>
		{
			prevTime = timeTick;
 1d2:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 1d6:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 1da:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 1de:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
			trafficState = GREEN_RED;
 1e2:	82 e0       	ldi	r24, 0x02	; 2
 1e4:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <trafficState>
		}
		break;
		case GREEN_RED :
		TrafficSignal_GREENRED();
 1e8:	52 c0       	rjmp	.+164    	; 0x28e <TrafficSignal_AUTO+0x16c>
 1ea:	91 df       	rcall	.-222    	; 0x10e <TrafficSignal_GREENRED>
		if(timeTick - prevTime >= 3000)
 1ec:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <timeTick>
 1f0:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <timeTick+0x1>
 1f4:	a0 91 1a 01 	lds	r26, 0x011A	; 0x80011a <timeTick+0x2>
 1f8:	b0 91 1b 01 	lds	r27, 0x011B	; 0x80011b <timeTick+0x3>
 1fc:	40 91 00 01 	lds	r20, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 200:	50 91 01 01 	lds	r21, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 204:	60 91 02 01 	lds	r22, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 208:	70 91 03 01 	lds	r23, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 20c:	8c 01       	movw	r16, r24
 20e:	9d 01       	movw	r18, r26
 210:	04 1b       	sub	r16, r20
 212:	15 0b       	sbc	r17, r21
 214:	26 0b       	sbc	r18, r22
 216:	37 0b       	sbc	r19, r23
 218:	b9 01       	movw	r22, r18
 21a:	a8 01       	movw	r20, r16
 21c:	48 3b       	cpi	r20, 0xB8	; 184
 21e:	5b 40       	sbci	r21, 0x0B	; 11
 220:	61 05       	cpc	r22, r1
 222:	71 05       	cpc	r23, r1
 224:	a0 f1       	brcs	.+104    	; 0x28e <TrafficSignal_AUTO+0x16c>
		{
			prevTime = timeTick;
 226:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 22a:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 22e:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 232:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
			trafficState = YELLOW_RED;
 236:	83 e0       	ldi	r24, 0x03	; 3
 238:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <trafficState>
		}
		break;
		case YELLOW_RED :
		TrafficSignal_YELLOWRED();
 23c:	28 c0       	rjmp	.+80     	; 0x28e <TrafficSignal_AUTO+0x16c>
 23e:	6c df       	rcall	.-296    	; 0x118 <TrafficSignal_YELLOWRED>
		if(timeTick - prevTime >= 1000)
 240:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <timeTick>
 244:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <timeTick+0x1>
 248:	a0 91 1a 01 	lds	r26, 0x011A	; 0x80011a <timeTick+0x2>
 24c:	b0 91 1b 01 	lds	r27, 0x011B	; 0x80011b <timeTick+0x3>
 250:	40 91 00 01 	lds	r20, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 254:	50 91 01 01 	lds	r21, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 258:	60 91 02 01 	lds	r22, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 25c:	70 91 03 01 	lds	r23, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 260:	8c 01       	movw	r16, r24
 262:	9d 01       	movw	r18, r26
 264:	04 1b       	sub	r16, r20
 266:	15 0b       	sbc	r17, r21
 268:	26 0b       	sbc	r18, r22
 26a:	37 0b       	sbc	r19, r23
 26c:	b9 01       	movw	r22, r18
 26e:	a8 01       	movw	r20, r16
 270:	48 3e       	cpi	r20, 0xE8	; 232
 272:	53 40       	sbci	r21, 0x03	; 3
 274:	61 05       	cpc	r22, r1
 276:	71 05       	cpc	r23, r1
 278:	50 f0       	brcs	.+20     	; 0x28e <TrafficSignal_AUTO+0x16c>
		{
			prevTime = timeTick;
 27a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 27e:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 282:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 286:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
			trafficState = RED_GREEN;
 28a:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <trafficState>
		}
		break;
	}
}
 28e:	1f 91       	pop	r17
 290:	0f 91       	pop	r16
 292:	08 95       	ret

00000294 <TrafficSignal_MANUAL>:

void TrafficSignal_MANUAL()
{
	switch(trafficState)
 294:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <trafficState>
 298:	81 30       	cpi	r24, 0x01	; 1
 29a:	79 f0       	breq	.+30     	; 0x2ba <TrafficSignal_MANUAL+0x26>
 29c:	28 f0       	brcs	.+10     	; 0x2a8 <TrafficSignal_MANUAL+0x14>
 29e:	82 30       	cpi	r24, 0x02	; 2
 2a0:	b1 f0       	breq	.+44     	; 0x2ce <TrafficSignal_MANUAL+0x3a>
 2a2:	83 30       	cpi	r24, 0x03	; 3
 2a4:	f1 f0       	breq	.+60     	; 0x2e2 <TrafficSignal_MANUAL+0x4e>
 2a6:	08 95       	ret
	{	
	
		
		case RED_GREEN :
		TrafficSignal_REDGREEN();
 2a8:	28 df       	rcall	.-432    	; 0xfa <TrafficSignal_REDGREEN>
		if(button_getstate(&btnCtrl) == ACT_RELEASED)
 2aa:	84 e0       	ldi	r24, 0x04	; 4
 2ac:	91 e0       	ldi	r25, 0x01	; 1
 2ae:	6a d0       	rcall	.+212    	; 0x384 <button_getstate>
 2b0:	81 30       	cpi	r24, 0x01	; 1
 2b2:	f9 f4       	brne	.+62     	; 0x2f2 <TrafficSignal_MANUAL+0x5e>
		{
			trafficState = RED_YELLOW;
 2b4:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <trafficState>
		}
		break;
		case RED_YELLOW :
		TrafficSignal_REDYELLOW();
 2b8:	08 95       	ret
		if(button_getstate(&btnCtrl) == ACT_RELEASED)		
 2ba:	24 df       	rcall	.-440    	; 0x104 <TrafficSignal_REDYELLOW>
 2bc:	84 e0       	ldi	r24, 0x04	; 4
 2be:	91 e0       	ldi	r25, 0x01	; 1
 2c0:	61 d0       	rcall	.+194    	; 0x384 <button_getstate>
 2c2:	81 30       	cpi	r24, 0x01	; 1
 2c4:	b1 f4       	brne	.+44     	; 0x2f2 <TrafficSignal_MANUAL+0x5e>
		{
			trafficState = GREEN_RED;
 2c6:	82 e0       	ldi	r24, 0x02	; 2
 2c8:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <trafficState>
		}
		break;
		case GREEN_RED :
		TrafficSignal_GREENRED();
 2cc:	08 95       	ret
 2ce:	1f df       	rcall	.-450    	; 0x10e <TrafficSignal_GREENRED>
		if(button_getstate(&btnCtrl) == ACT_RELEASED)		
 2d0:	84 e0       	ldi	r24, 0x04	; 4
 2d2:	91 e0       	ldi	r25, 0x01	; 1
 2d4:	57 d0       	rcall	.+174    	; 0x384 <button_getstate>
 2d6:	81 30       	cpi	r24, 0x01	; 1
 2d8:	61 f4       	brne	.+24     	; 0x2f2 <TrafficSignal_MANUAL+0x5e>
		{
			trafficState = YELLOW_RED;
 2da:	83 e0       	ldi	r24, 0x03	; 3
 2dc:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <trafficState>
		}
		break;
		case YELLOW_RED :
		TrafficSignal_YELLOWRED();
 2e0:	08 95       	ret
 2e2:	1a df       	rcall	.-460    	; 0x118 <TrafficSignal_YELLOWRED>
		if(button_getstate(&btnCtrl) == ACT_RELEASED)		
 2e4:	84 e0       	ldi	r24, 0x04	; 4
 2e6:	91 e0       	ldi	r25, 0x01	; 1
 2e8:	4d d0       	rcall	.+154    	; 0x384 <button_getstate>
 2ea:	81 30       	cpi	r24, 0x01	; 1
 2ec:	11 f4       	brne	.+4      	; 0x2f2 <TrafficSignal_MANUAL+0x5e>
 2ee:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <trafficState>
		{
			trafficState = RED_GREEN;
 2f2:	08 95       	ret

000002f4 <TrafficSignal_run>:
 2f4:	8c e0       	ldi	r24, 0x0C	; 12
}

void TrafficSignal_run(){
	
	//Event Process
	if(button_getstate(&btnAuto) == ACT_RELEASED)
 2f6:	91 e0       	ldi	r25, 0x01	; 1
 2f8:	45 d0       	rcall	.+138    	; 0x384 <button_getstate>
 2fa:	81 30       	cpi	r24, 0x01	; 1
 2fc:	19 f4       	brne	.+6      	; 0x304 <TrafficSignal_run+0x10>
	{
		trafficModeState = AUTO;
 2fe:	10 92 1c 01 	sts	0x011C, r1	; 0x80011c <trafficModeState>
 302:	07 c0       	rjmp	.+14     	; 0x312 <TrafficSignal_run+0x1e>
	}
	else if(button_getstate(&btnManual) == ACT_RELEASED)
 304:	82 e1       	ldi	r24, 0x12	; 18
 306:	91 e0       	ldi	r25, 0x01	; 1
 308:	3d d0       	rcall	.+122    	; 0x384 <button_getstate>
 30a:	81 30       	cpi	r24, 0x01	; 1
 30c:	11 f4       	brne	.+4      	; 0x312 <TrafficSignal_run+0x1e>
	{
		trafficModeState = MANUAL;
 30e:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <trafficModeState>
	}
	
	
	// State Running
	switch (trafficModeState)
 312:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <trafficModeState>
 316:	88 23       	and	r24, r24
 318:	19 f0       	breq	.+6      	; 0x320 <TrafficSignal_run+0x2c>
 31a:	81 30       	cpi	r24, 0x01	; 1
 31c:	19 f0       	breq	.+6      	; 0x324 <TrafficSignal_run+0x30>
	{
		case AUTO :
		TrafficSignal_AUTO();
 31e:	03 c0       	rjmp	.+6      	; 0x326 <TrafficSignal_run+0x32>
		break;
 320:	00 df       	rcall	.-512    	; 0x122 <TrafficSignal_AUTO>
		case MANUAL :
		TrafficSignal_MANUAL();
 322:	01 c0       	rjmp	.+2      	; 0x326 <TrafficSignal_run+0x32>
 324:	b7 df       	rcall	.-146    	; 0x294 <TrafficSignal_MANUAL>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 326:	8f e9       	ldi	r24, 0x9F	; 159
 328:	9f e0       	ldi	r25, 0x0F	; 15
 32a:	01 97       	sbiw	r24, 0x01	; 1
 32c:	f1 f7       	brne	.-4      	; 0x32a <TrafficSignal_run+0x36>
 32e:	00 c0       	rjmp	.+0      	; 0x330 <TrafficSignal_run+0x3c>
 330:	00 00       	nop
		break;
	}
	
	_delay_ms(1);
	timeTick++;
 332:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <timeTick>
 336:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <timeTick+0x1>
 33a:	a0 91 1a 01 	lds	r26, 0x011A	; 0x80011a <timeTick+0x2>
 33e:	b0 91 1b 01 	lds	r27, 0x011B	; 0x80011b <timeTick+0x3>
 342:	01 96       	adiw	r24, 0x01	; 1
 344:	a1 1d       	adc	r26, r1
 346:	b1 1d       	adc	r27, r1
 348:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <timeTick>
 34c:	90 93 19 01 	sts	0x0119, r25	; 0x800119 <timeTick+0x1>
 350:	a0 93 1a 01 	sts	0x011A, r26	; 0x80011a <timeTick+0x2>
 354:	b0 93 1b 01 	sts	0x011B, r27	; 0x80011b <timeTick+0x3>
 358:	08 95       	ret

0000035a <Button_init>:
﻿#include "button.h"


void Button_init(button_t *btn, volatile uint8_t *ddr, volatile uint8_t *pin, uint8_t pinnum){
 35a:	fc 01       	movw	r30, r24
	btn ->DDR =ddr;
 35c:	71 83       	std	Z+1, r23	; 0x01
 35e:	60 83       	st	Z, r22
	btn->PIN = pin;
 360:	53 83       	std	Z+3, r21	; 0x03
 362:	42 83       	std	Z+2, r20	; 0x02
	btn->pinNum = pinnum;
 364:	25 83       	std	Z+5, r18	; 0x05
	btn->pS = 1;
 366:	81 e0       	ldi	r24, 0x01	; 1
 368:	84 83       	std	Z+4, r24	; 0x04
	*btn->DDR &= ~(1<<btn->pinNum);
 36a:	fb 01       	movw	r30, r22
 36c:	30 81       	ld	r19, Z
 36e:	81 e0       	ldi	r24, 0x01	; 1
 370:	90 e0       	ldi	r25, 0x00	; 0
 372:	02 c0       	rjmp	.+4      	; 0x378 <Button_init+0x1e>
 374:	88 0f       	add	r24, r24
 376:	99 1f       	adc	r25, r25
 378:	2a 95       	dec	r18
 37a:	e2 f7       	brpl	.-8      	; 0x374 <Button_init+0x1a>
 37c:	80 95       	com	r24
 37e:	83 23       	and	r24, r19
 380:	80 83       	st	Z, r24
 382:	08 95       	ret

00000384 <button_getstate>:
	
}

uint8_t button_getstate(button_t *btn){
 384:	fc 01       	movw	r30, r24
	
	uint8_t curState = *btn->PIN &(1<<btn->pinNum);
 386:	a2 81       	ldd	r26, Z+2	; 0x02
 388:	b3 81       	ldd	r27, Z+3	; 0x03
 38a:	8c 91       	ld	r24, X
 38c:	21 e0       	ldi	r18, 0x01	; 1
 38e:	30 e0       	ldi	r19, 0x00	; 0
 390:	05 80       	ldd	r0, Z+5	; 0x05
 392:	02 c0       	rjmp	.+4      	; 0x398 <button_getstate+0x14>
 394:	22 0f       	add	r18, r18
 396:	33 1f       	adc	r19, r19
 398:	0a 94       	dec	r0
 39a:	e2 f7       	brpl	.-8      	; 0x394 <button_getstate+0x10>
 39c:	28 23       	and	r18, r24
	if ((curState == 0) &&(btn->pS = 1)){
 39e:	59 f4       	brne	.+22     	; 0x3b6 <button_getstate+0x32>
 3a0:	81 e0       	ldi	r24, 0x01	; 1
 3a2:	84 83       	std	Z+4, r24	; 0x04
 3a4:	8f e3       	ldi	r24, 0x3F	; 63
 3a6:	9c e9       	ldi	r25, 0x9C	; 156
 3a8:	01 97       	sbiw	r24, 0x01	; 1
 3aa:	f1 f7       	brne	.-4      	; 0x3a8 <button_getstate+0x24>
 3ac:	00 c0       	rjmp	.+0      	; 0x3ae <button_getstate+0x2a>
 3ae:	00 00       	nop
		_delay_ms(10);
		btn->pS = PUSHED;
 3b0:	14 82       	std	Z+4, r1	; 0x04
		
		
		return ACT_PUSHED;
 3b2:	80 e0       	ldi	r24, 0x00	; 0
 3b4:	08 95       	ret
	}
	else if ((curState != 0 )&&(btn->pS == 0)){
 3b6:	22 23       	and	r18, r18
 3b8:	61 f0       	breq	.+24     	; 0x3d2 <button_getstate+0x4e>
 3ba:	84 81       	ldd	r24, Z+4	; 0x04
 3bc:	81 11       	cpse	r24, r1
 3be:	0b c0       	rjmp	.+22     	; 0x3d6 <button_getstate+0x52>
 3c0:	8f e3       	ldi	r24, 0x3F	; 63
 3c2:	9c e9       	ldi	r25, 0x9C	; 156
 3c4:	01 97       	sbiw	r24, 0x01	; 1
 3c6:	f1 f7       	brne	.-4      	; 0x3c4 <button_getstate+0x40>
 3c8:	00 c0       	rjmp	.+0      	; 0x3ca <button_getstate+0x46>
 3ca:	00 00       	nop
		_delay_ms(10);
		btn->pS = RELEASED;
 3cc:	81 e0       	ldi	r24, 0x01	; 1
 3ce:	84 83       	std	Z+4, r24	; 0x04
		return ACT_RELEASED;
 3d0:	08 95       	ret
	}
	
	return ACT_NONE;
 3d2:	82 e0       	ldi	r24, 0x02	; 2
 3d4:	08 95       	ret
 3d6:	82 e0       	ldi	r24, 0x02	; 2
 3d8:	08 95       	ret

000003da <LED_init>:
﻿#include "LED.h"

void LED_init(){
	LED_DDR = 0xff;
 3da:	8f ef       	ldi	r24, 0xFF	; 255
 3dc:	81 bb       	out	0x11, r24	; 17
 3de:	08 95       	ret

000003e0 <LED_WriteData>:
	
}


void LED_WriteData(uint8_t data){
	LED_PORT = data;
 3e0:	82 bb       	out	0x12, r24	; 18
 3e2:	08 95       	ret

000003e4 <main>:



int main(void)
{
	TrafficSignal_init();
 3e4:	64 de       	rcall	.-824    	; 0xae <TrafficSignal_init>
	
	while (1)
	{
		TrafficSignal_run();
 3e6:	86 df       	rcall	.-244    	; 0x2f4 <TrafficSignal_run>
 3e8:	fe cf       	rjmp	.-4      	; 0x3e6 <main+0x2>

000003ea <_exit>:
 3ea:	f8 94       	cli

000003ec <__stop_program>:
 3ec:	ff cf       	rjmp	.-2      	; 0x3ec <__stop_program>
