
TrafficSignal.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000045e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000003ea  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001c  00800100  00800100  0000045e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000045e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000490  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000110  00000000  00000000  000004d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000012b8  00000000  00000000  000005e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c2d  00000000  00000000  00001898  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000904  00000000  00000000  000024c5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001a0  00000000  00000000  00002dcc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006fb  00000000  00000000  00002f6c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000274  00000000  00000000  00003667  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c0  00000000  00000000  000038db  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	53 c0       	rjmp	.+166    	; 0xac <__bad_interrupt>
   6:	00 00       	nop
   8:	51 c0       	rjmp	.+162    	; 0xac <__bad_interrupt>
   a:	00 00       	nop
   c:	4f c0       	rjmp	.+158    	; 0xac <__bad_interrupt>
   e:	00 00       	nop
  10:	4d c0       	rjmp	.+154    	; 0xac <__bad_interrupt>
  12:	00 00       	nop
  14:	4b c0       	rjmp	.+150    	; 0xac <__bad_interrupt>
  16:	00 00       	nop
  18:	49 c0       	rjmp	.+146    	; 0xac <__bad_interrupt>
  1a:	00 00       	nop
  1c:	47 c0       	rjmp	.+142    	; 0xac <__bad_interrupt>
  1e:	00 00       	nop
  20:	45 c0       	rjmp	.+138    	; 0xac <__bad_interrupt>
  22:	00 00       	nop
  24:	43 c0       	rjmp	.+134    	; 0xac <__bad_interrupt>
  26:	00 00       	nop
  28:	41 c0       	rjmp	.+130    	; 0xac <__bad_interrupt>
  2a:	00 00       	nop
  2c:	3f c0       	rjmp	.+126    	; 0xac <__bad_interrupt>
  2e:	00 00       	nop
  30:	3d c0       	rjmp	.+122    	; 0xac <__bad_interrupt>
  32:	00 00       	nop
  34:	3b c0       	rjmp	.+118    	; 0xac <__bad_interrupt>
  36:	00 00       	nop
  38:	39 c0       	rjmp	.+114    	; 0xac <__bad_interrupt>
  3a:	00 00       	nop
  3c:	37 c0       	rjmp	.+110    	; 0xac <__bad_interrupt>
  3e:	00 00       	nop
  40:	35 c0       	rjmp	.+106    	; 0xac <__bad_interrupt>
  42:	00 00       	nop
  44:	33 c0       	rjmp	.+102    	; 0xac <__bad_interrupt>
  46:	00 00       	nop
  48:	31 c0       	rjmp	.+98     	; 0xac <__bad_interrupt>
  4a:	00 00       	nop
  4c:	2f c0       	rjmp	.+94     	; 0xac <__bad_interrupt>
  4e:	00 00       	nop
  50:	2d c0       	rjmp	.+90     	; 0xac <__bad_interrupt>
  52:	00 00       	nop
  54:	2b c0       	rjmp	.+86     	; 0xac <__bad_interrupt>
  56:	00 00       	nop
  58:	29 c0       	rjmp	.+82     	; 0xac <__bad_interrupt>
  5a:	00 00       	nop
  5c:	27 c0       	rjmp	.+78     	; 0xac <__bad_interrupt>
  5e:	00 00       	nop
  60:	25 c0       	rjmp	.+74     	; 0xac <__bad_interrupt>
  62:	00 00       	nop
  64:	23 c0       	rjmp	.+70     	; 0xac <__bad_interrupt>
  66:	00 00       	nop
  68:	21 c0       	rjmp	.+66     	; 0xac <__bad_interrupt>
  6a:	00 00       	nop
  6c:	1f c0       	rjmp	.+62     	; 0xac <__bad_interrupt>
  6e:	00 00       	nop
  70:	1d c0       	rjmp	.+58     	; 0xac <__bad_interrupt>
  72:	00 00       	nop
  74:	1b c0       	rjmp	.+54     	; 0xac <__bad_interrupt>
  76:	00 00       	nop
  78:	19 c0       	rjmp	.+50     	; 0xac <__bad_interrupt>
  7a:	00 00       	nop
  7c:	17 c0       	rjmp	.+46     	; 0xac <__bad_interrupt>
  7e:	00 00       	nop
  80:	15 c0       	rjmp	.+42     	; 0xac <__bad_interrupt>
  82:	00 00       	nop
  84:	13 c0       	rjmp	.+38     	; 0xac <__bad_interrupt>
  86:	00 00       	nop
  88:	11 c0       	rjmp	.+34     	; 0xac <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	ac 31       	cpi	r26, 0x1C	; 28
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	80 d1       	rcall	.+768    	; 0x3aa <main>
  aa:	9d c1       	rjmp	.+826    	; 0x3e6 <_exit>

000000ac <__bad_interrupt>:
  ac:	a9 cf       	rjmp	.-174    	; 0x0 <__vectors>

000000ae <standinglight_init>:
uint8_t	trafficState=RED_GREEN;

void standinglight_init(){
	

	Button_init(&btnNext, &DDRA, &PINA,0);
  ae:	20 e0       	ldi	r18, 0x00	; 0
  b0:	49 e3       	ldi	r20, 0x39	; 57
  b2:	50 e0       	ldi	r21, 0x00	; 0
  b4:	6a e3       	ldi	r22, 0x3A	; 58
  b6:	70 e0       	ldi	r23, 0x00	; 0
  b8:	86 e1       	ldi	r24, 0x16	; 22
  ba:	91 e0       	ldi	r25, 0x01	; 1
  bc:	2f d1       	rcall	.+606    	; 0x31c <Button_init>
	Button_init(&btnPrev, &DDRA, &PINA,1);
  be:	21 e0       	ldi	r18, 0x01	; 1
  c0:	49 e3       	ldi	r20, 0x39	; 57
  c2:	50 e0       	ldi	r21, 0x00	; 0
  c4:	6a e3       	ldi	r22, 0x3A	; 58
  c6:	70 e0       	ldi	r23, 0x00	; 0
  c8:	8a e0       	ldi	r24, 0x0A	; 10
  ca:	91 e0       	ldi	r25, 0x01	; 1
  cc:	27 d1       	rcall	.+590    	; 0x31c <Button_init>
	Button_init(&btnCon, &DDRA, &PINA,2);
  ce:	22 e0       	ldi	r18, 0x02	; 2
  d0:	49 e3       	ldi	r20, 0x39	; 57
  d2:	50 e0       	ldi	r21, 0x00	; 0
  d4:	6a e3       	ldi	r22, 0x3A	; 58
  d6:	70 e0       	ldi	r23, 0x00	; 0
  d8:	80 e1       	ldi	r24, 0x10	; 16
  da:	91 e0       	ldi	r25, 0x01	; 1
	
	LED_init();
  dc:	1f d1       	rcall	.+574    	; 0x31c <Button_init>
  de:	56 d1       	rcall	.+684    	; 0x38c <LED_init>
	ledstate = AUTO;
  e0:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <ledstate>
  e4:	08 95       	ret

000000e6 <TrafficSignal_AUTO>:
	




void TrafficSignal_AUTO(){
  e6:	0f 93       	push	r16
  e8:	1f 93       	push	r17
	static uint32_t prevTime = 0;
	
	switch(trafficState){
  ea:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <trafficState>
  ee:	81 30       	cpi	r24, 0x01	; 1
  f0:	99 f1       	breq	.+102    	; 0x158 <TrafficSignal_AUTO+0x72>
  f2:	38 f0       	brcs	.+14     	; 0x102 <TrafficSignal_AUTO+0x1c>
  f4:	82 30       	cpi	r24, 0x02	; 2
  f6:	09 f4       	brne	.+2      	; 0xfa <TrafficSignal_AUTO+0x14>
  f8:	5a c0       	rjmp	.+180    	; 0x1ae <TrafficSignal_AUTO+0xc8>
  fa:	83 30       	cpi	r24, 0x03	; 3
  fc:	09 f4       	brne	.+2      	; 0x100 <TrafficSignal_AUTO+0x1a>
  fe:	81 c0       	rjmp	.+258    	; 0x202 <TrafficSignal_AUTO+0x11c>
 100:	a8 c0       	rjmp	.+336    	; 0x252 <TrafficSignal_AUTO+0x16c>
		case RED_GREEN:
		TrafficSifnal_REDGREEN();
 102:	47 d1       	rcall	.+654    	; 0x392 <TrafficSifnal_REDGREEN>
		if(timetic - prevTime >= 3000){
 104:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <timetic>
 108:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <timetic+0x1>
 10c:	a0 91 07 01 	lds	r26, 0x0107	; 0x800107 <timetic+0x2>
 110:	b0 91 08 01 	lds	r27, 0x0108	; 0x800108 <timetic+0x3>
 114:	40 91 00 01 	lds	r20, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 118:	50 91 01 01 	lds	r21, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 11c:	60 91 02 01 	lds	r22, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 120:	70 91 03 01 	lds	r23, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 124:	8c 01       	movw	r16, r24
 126:	9d 01       	movw	r18, r26
 128:	04 1b       	sub	r16, r20
 12a:	15 0b       	sbc	r17, r21
 12c:	26 0b       	sbc	r18, r22
 12e:	37 0b       	sbc	r19, r23
 130:	b9 01       	movw	r22, r18
 132:	a8 01       	movw	r20, r16
 134:	48 3b       	cpi	r20, 0xB8	; 184
 136:	5b 40       	sbci	r21, 0x0B	; 11
 138:	61 05       	cpc	r22, r1
 13a:	71 05       	cpc	r23, r1
 13c:	08 f4       	brcc	.+2      	; 0x140 <TrafficSignal_AUTO+0x5a>
 13e:	89 c0       	rjmp	.+274    	; 0x252 <TrafficSignal_AUTO+0x16c>
			prevTime = timetic;
 140:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 144:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 148:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 14c:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
			trafficState = RED_YELLOW;
 150:	81 e0       	ldi	r24, 0x01	; 1
 152:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <trafficState>
		}
		break;
		
		case RED_YELLOW:
		TrafficSifnal_REDYELLOW();
 156:	7d c0       	rjmp	.+250    	; 0x252 <TrafficSignal_AUTO+0x16c>
 158:	1f d1       	rcall	.+574    	; 0x398 <TrafficSifnal_REDYELLOW>
		if(timetic - prevTime >= 1000){
 15a:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <timetic>
 15e:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <timetic+0x1>
 162:	a0 91 07 01 	lds	r26, 0x0107	; 0x800107 <timetic+0x2>
 166:	b0 91 08 01 	lds	r27, 0x0108	; 0x800108 <timetic+0x3>
 16a:	40 91 00 01 	lds	r20, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 16e:	50 91 01 01 	lds	r21, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 172:	60 91 02 01 	lds	r22, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 176:	70 91 03 01 	lds	r23, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 17a:	8c 01       	movw	r16, r24
 17c:	9d 01       	movw	r18, r26
 17e:	04 1b       	sub	r16, r20
 180:	15 0b       	sbc	r17, r21
 182:	26 0b       	sbc	r18, r22
 184:	37 0b       	sbc	r19, r23
 186:	b9 01       	movw	r22, r18
 188:	a8 01       	movw	r20, r16
 18a:	48 3e       	cpi	r20, 0xE8	; 232
 18c:	53 40       	sbci	r21, 0x03	; 3
 18e:	61 05       	cpc	r22, r1
 190:	71 05       	cpc	r23, r1
 192:	08 f4       	brcc	.+2      	; 0x196 <TrafficSignal_AUTO+0xb0>
 194:	5e c0       	rjmp	.+188    	; 0x252 <TrafficSignal_AUTO+0x16c>
			prevTime = timetic;
 196:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 19a:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 19e:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 1a2:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
			trafficState = GREEN_RED;
 1a6:	82 e0       	ldi	r24, 0x02	; 2
 1a8:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <trafficState>
		}
		
		break;
		
		case GREEN_RED:
		TrafficSifnal_GREENRED();
 1ac:	52 c0       	rjmp	.+164    	; 0x252 <TrafficSignal_AUTO+0x16c>
 1ae:	f7 d0       	rcall	.+494    	; 0x39e <TrafficSifnal_GREENRED>
		if(timetic - prevTime >= 3000){
 1b0:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <timetic>
 1b4:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <timetic+0x1>
 1b8:	a0 91 07 01 	lds	r26, 0x0107	; 0x800107 <timetic+0x2>
 1bc:	b0 91 08 01 	lds	r27, 0x0108	; 0x800108 <timetic+0x3>
 1c0:	40 91 00 01 	lds	r20, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 1c4:	50 91 01 01 	lds	r21, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 1c8:	60 91 02 01 	lds	r22, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 1cc:	70 91 03 01 	lds	r23, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 1d0:	8c 01       	movw	r16, r24
 1d2:	9d 01       	movw	r18, r26
 1d4:	04 1b       	sub	r16, r20
 1d6:	15 0b       	sbc	r17, r21
 1d8:	26 0b       	sbc	r18, r22
 1da:	37 0b       	sbc	r19, r23
 1dc:	b9 01       	movw	r22, r18
 1de:	a8 01       	movw	r20, r16
 1e0:	48 3b       	cpi	r20, 0xB8	; 184
 1e2:	5b 40       	sbci	r21, 0x0B	; 11
 1e4:	61 05       	cpc	r22, r1
 1e6:	71 05       	cpc	r23, r1
 1e8:	a0 f1       	brcs	.+104    	; 0x252 <TrafficSignal_AUTO+0x16c>
			prevTime = timetic;
 1ea:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 1ee:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 1f2:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 1f6:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
			trafficState = YELLOW_RED;
 1fa:	83 e0       	ldi	r24, 0x03	; 3
 1fc:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <trafficState>
		}
		
		break;
		
		case YELLOW_RED:
		TrafficSifnal_YELLOWRED();
 200:	28 c0       	rjmp	.+80     	; 0x252 <TrafficSignal_AUTO+0x16c>
 202:	d0 d0       	rcall	.+416    	; 0x3a4 <TrafficSifnal_YELLOWRED>
		if(timetic - prevTime >= 1000){
 204:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <timetic>
 208:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <timetic+0x1>
 20c:	a0 91 07 01 	lds	r26, 0x0107	; 0x800107 <timetic+0x2>
 210:	b0 91 08 01 	lds	r27, 0x0108	; 0x800108 <timetic+0x3>
 214:	40 91 00 01 	lds	r20, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 218:	50 91 01 01 	lds	r21, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 21c:	60 91 02 01 	lds	r22, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 220:	70 91 03 01 	lds	r23, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 224:	8c 01       	movw	r16, r24
 226:	9d 01       	movw	r18, r26
 228:	04 1b       	sub	r16, r20
 22a:	15 0b       	sbc	r17, r21
 22c:	26 0b       	sbc	r18, r22
 22e:	37 0b       	sbc	r19, r23
 230:	b9 01       	movw	r22, r18
 232:	a8 01       	movw	r20, r16
 234:	48 3e       	cpi	r20, 0xE8	; 232
 236:	53 40       	sbci	r21, 0x03	; 3
 238:	61 05       	cpc	r22, r1
 23a:	71 05       	cpc	r23, r1
 23c:	50 f0       	brcs	.+20     	; 0x252 <TrafficSignal_AUTO+0x16c>
			prevTime = timetic;
 23e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 242:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 246:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 24a:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
			trafficState = RED_GREEN;
 24e:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <trafficState>
		}
		
		break;
	}
	
}
 252:	1f 91       	pop	r17
 254:	0f 91       	pop	r16
 256:	08 95       	ret

00000258 <TrafficSignal_MANUAL>:

void TrafficSignal_MANUAL(){
	
	
	switch(trafficState){
 258:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <trafficState>
 25c:	81 30       	cpi	r24, 0x01	; 1
 25e:	79 f0       	breq	.+30     	; 0x27e <TrafficSignal_MANUAL+0x26>
 260:	28 f0       	brcs	.+10     	; 0x26c <TrafficSignal_MANUAL+0x14>
 262:	82 30       	cpi	r24, 0x02	; 2
 264:	b1 f0       	breq	.+44     	; 0x292 <TrafficSignal_MANUAL+0x3a>
 266:	83 30       	cpi	r24, 0x03	; 3
 268:	f1 f0       	breq	.+60     	; 0x2a6 <TrafficSignal_MANUAL+0x4e>
 26a:	08 95       	ret
		case RED_GREEN:
		TrafficSifnal_REDGREEN();
 26c:	92 d0       	rcall	.+292    	; 0x392 <TrafficSifnal_REDGREEN>
		if(button_getstate(&btnCon)==ACT_RELEASED){
 26e:	80 e1       	ldi	r24, 0x10	; 16
 270:	91 e0       	ldi	r25, 0x01	; 1
 272:	61 d0       	rcall	.+194    	; 0x336 <button_getstate>
 274:	81 30       	cpi	r24, 0x01	; 1
 276:	f9 f4       	brne	.+62     	; 0x2b6 <TrafficSignal_MANUAL+0x5e>
			trafficState = RED_YELLOW;
 278:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <trafficState>
		}
		break;
		
		case RED_YELLOW:
		TrafficSifnal_REDYELLOW();
 27c:	08 95       	ret
		if(button_getstate(&btnCon)==ACT_RELEASED){
 27e:	8c d0       	rcall	.+280    	; 0x398 <TrafficSifnal_REDYELLOW>
 280:	80 e1       	ldi	r24, 0x10	; 16
 282:	91 e0       	ldi	r25, 0x01	; 1
 284:	58 d0       	rcall	.+176    	; 0x336 <button_getstate>
 286:	81 30       	cpi	r24, 0x01	; 1
 288:	b1 f4       	brne	.+44     	; 0x2b6 <TrafficSignal_MANUAL+0x5e>
			trafficState = GREEN_RED;
 28a:	82 e0       	ldi	r24, 0x02	; 2
 28c:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <trafficState>
		}
		break;
		
		case GREEN_RED:
		TrafficSifnal_GREENRED();
 290:	08 95       	ret
 292:	85 d0       	rcall	.+266    	; 0x39e <TrafficSifnal_GREENRED>
		if(button_getstate(&btnCon)==ACT_RELEASED){
 294:	80 e1       	ldi	r24, 0x10	; 16
 296:	91 e0       	ldi	r25, 0x01	; 1
 298:	4e d0       	rcall	.+156    	; 0x336 <button_getstate>
 29a:	81 30       	cpi	r24, 0x01	; 1
 29c:	61 f4       	brne	.+24     	; 0x2b6 <TrafficSignal_MANUAL+0x5e>
			trafficState = YELLOW_RED;
 29e:	83 e0       	ldi	r24, 0x03	; 3
 2a0:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <trafficState>
		}
		break;
		
		case YELLOW_RED:
		TrafficSifnal_YELLOWRED();
 2a4:	08 95       	ret
 2a6:	7e d0       	rcall	.+252    	; 0x3a4 <TrafficSifnal_YELLOWRED>
		if(button_getstate(&btnCon)==ACT_RELEASED){
 2a8:	80 e1       	ldi	r24, 0x10	; 16
 2aa:	91 e0       	ldi	r25, 0x01	; 1
 2ac:	44 d0       	rcall	.+136    	; 0x336 <button_getstate>
 2ae:	81 30       	cpi	r24, 0x01	; 1
 2b0:	11 f4       	brne	.+4      	; 0x2b6 <TrafficSignal_MANUAL+0x5e>
 2b2:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <trafficState>
			trafficState = RED_GREEN;
 2b6:	08 95       	ret

000002b8 <standinglight_execute>:
 2b8:	86 e1       	ldi	r24, 0x16	; 22
	
}

void standinglight_execute(){
	
	if(button_getstate(&btnNext)==ACT_RELEASED){
 2ba:	91 e0       	ldi	r25, 0x01	; 1
 2bc:	3c d0       	rcall	.+120    	; 0x336 <button_getstate>
 2be:	81 30       	cpi	r24, 0x01	; 1
 2c0:	11 f4       	brne	.+4      	; 0x2c6 <standinglight_execute+0xe>
		ledstate = AUTO;
 2c2:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <ledstate>
	}
	if(button_getstate(&btnPrev)==ACT_RELEASED){
 2c6:	8a e0       	ldi	r24, 0x0A	; 10
 2c8:	91 e0       	ldi	r25, 0x01	; 1
 2ca:	35 d0       	rcall	.+106    	; 0x336 <button_getstate>
 2cc:	81 30       	cpi	r24, 0x01	; 1
 2ce:	11 f4       	brne	.+4      	; 0x2d4 <standinglight_execute+0x1c>
		ledstate = MANUAL;
 2d0:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <ledstate>
	}
	switch(ledstate)
 2d4:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <ledstate>
 2d8:	88 23       	and	r24, r24
 2da:	19 f0       	breq	.+6      	; 0x2e2 <standinglight_execute+0x2a>
 2dc:	81 30       	cpi	r24, 0x01	; 1
 2de:	19 f0       	breq	.+6      	; 0x2e6 <standinglight_execute+0x2e>
	{
			case AUTO:
			TrafficSignal_AUTO();
 2e0:	03 c0       	rjmp	.+6      	; 0x2e8 <standinglight_execute+0x30>
			break;
 2e2:	01 df       	rcall	.-510    	; 0xe6 <TrafficSignal_AUTO>
			
			case MANUAL:
			TrafficSignal_MANUAL();
 2e4:	01 c0       	rjmp	.+2      	; 0x2e8 <standinglight_execute+0x30>
 2e6:	b8 df       	rcall	.-144    	; 0x258 <TrafficSignal_MANUAL>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2e8:	8f e9       	ldi	r24, 0x9F	; 159
 2ea:	9f e0       	ldi	r25, 0x0F	; 15
 2ec:	01 97       	sbiw	r24, 0x01	; 1
 2ee:	f1 f7       	brne	.-4      	; 0x2ec <standinglight_execute+0x34>
 2f0:	00 c0       	rjmp	.+0      	; 0x2f2 <standinglight_execute+0x3a>
 2f2:	00 00       	nop
			break;
		}
		_delay_ms(1);
		timetic++;
 2f4:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <timetic>
 2f8:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <timetic+0x1>
 2fc:	a0 91 07 01 	lds	r26, 0x0107	; 0x800107 <timetic+0x2>
 300:	b0 91 08 01 	lds	r27, 0x0108	; 0x800108 <timetic+0x3>
 304:	01 96       	adiw	r24, 0x01	; 1
 306:	a1 1d       	adc	r26, r1
 308:	b1 1d       	adc	r27, r1
 30a:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <timetic>
 30e:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <timetic+0x1>
 312:	a0 93 07 01 	sts	0x0107, r26	; 0x800107 <timetic+0x2>
 316:	b0 93 08 01 	sts	0x0108, r27	; 0x800108 <timetic+0x3>
 31a:	08 95       	ret

0000031c <Button_init>:
﻿#include "button.h"


void Button_init(button_t *btn, volatile uint8_t *ddr, volatile uint8_t *pin, uint8_t pinnum){
 31c:	fc 01       	movw	r30, r24
 31e:	cb 01       	movw	r24, r22
	btn ->DDR =ddr;
 320:	71 83       	std	Z+1, r23	; 0x01
 322:	60 83       	st	Z, r22
	btn->PIN = pin;
 324:	53 83       	std	Z+3, r21	; 0x03
 326:	42 83       	std	Z+2, r20	; 0x02
	btn->pinNum = pinnum;
 328:	25 83       	std	Z+5, r18	; 0x05
	btn->pS = 1;
 32a:	31 e0       	ldi	r19, 0x01	; 1
 32c:	34 83       	std	Z+4, r19	; 0x04
	Gpio_initPin(ddr,1,pinnum);
 32e:	42 2f       	mov	r20, r18
 330:	61 e0       	ldi	r22, 0x01	; 1
 332:	3e c0       	rjmp	.+124    	; 0x3b0 <Gpio_initPin>
 334:	08 95       	ret

00000336 <button_getstate>:
	
}

uint8_t button_getstate(button_t *btn){
 336:	fc 01       	movw	r30, r24
	
	uint8_t curState = *btn->PIN &(1<<btn->pinNum);
 338:	a2 81       	ldd	r26, Z+2	; 0x02
 33a:	b3 81       	ldd	r27, Z+3	; 0x03
 33c:	8c 91       	ld	r24, X
 33e:	21 e0       	ldi	r18, 0x01	; 1
 340:	30 e0       	ldi	r19, 0x00	; 0
 342:	05 80       	ldd	r0, Z+5	; 0x05
 344:	02 c0       	rjmp	.+4      	; 0x34a <button_getstate+0x14>
 346:	22 0f       	add	r18, r18
 348:	33 1f       	adc	r19, r19
 34a:	0a 94       	dec	r0
 34c:	e2 f7       	brpl	.-8      	; 0x346 <button_getstate+0x10>
 34e:	28 23       	and	r18, r24
	if ((curState == 0) &&(btn->pS = 1)){
 350:	59 f4       	brne	.+22     	; 0x368 <button_getstate+0x32>
 352:	81 e0       	ldi	r24, 0x01	; 1
 354:	84 83       	std	Z+4, r24	; 0x04
 356:	8f e3       	ldi	r24, 0x3F	; 63
 358:	9c e9       	ldi	r25, 0x9C	; 156
 35a:	01 97       	sbiw	r24, 0x01	; 1
 35c:	f1 f7       	brne	.-4      	; 0x35a <button_getstate+0x24>
 35e:	00 c0       	rjmp	.+0      	; 0x360 <button_getstate+0x2a>
 360:	00 00       	nop
		_delay_ms(10);
		btn->pS = PUSHED;
 362:	14 82       	std	Z+4, r1	; 0x04
		
		
		return ACT_PUSHED;
 364:	80 e0       	ldi	r24, 0x00	; 0
 366:	08 95       	ret
	}
	else if ((curState != 0 )&&(btn->pS == 0)){
 368:	22 23       	and	r18, r18
 36a:	61 f0       	breq	.+24     	; 0x384 <button_getstate+0x4e>
 36c:	84 81       	ldd	r24, Z+4	; 0x04
 36e:	81 11       	cpse	r24, r1
 370:	0b c0       	rjmp	.+22     	; 0x388 <button_getstate+0x52>
 372:	8f e3       	ldi	r24, 0x3F	; 63
 374:	9c e9       	ldi	r25, 0x9C	; 156
 376:	01 97       	sbiw	r24, 0x01	; 1
 378:	f1 f7       	brne	.-4      	; 0x376 <button_getstate+0x40>
 37a:	00 c0       	rjmp	.+0      	; 0x37c <button_getstate+0x46>
 37c:	00 00       	nop
		_delay_ms(10);
		btn->pS = RELEASED;
 37e:	81 e0       	ldi	r24, 0x01	; 1
 380:	84 83       	std	Z+4, r24	; 0x04
		return ACT_RELEASED;
 382:	08 95       	ret
	}
	
	return ACT_NONE;
 384:	82 e0       	ldi	r24, 0x02	; 2
 386:	08 95       	ret
 388:	82 e0       	ldi	r24, 0x02	; 2
 38a:	08 95       	ret

0000038c <LED_init>:
	
}


void LED_WriteData(uint8_t data){
	LED_PORT = data;
 38c:	8f ef       	ldi	r24, 0xFF	; 255
 38e:	81 bb       	out	0x11, r24	; 17
 390:	08 95       	ret

00000392 <TrafficSifnal_REDGREEN>:
}


void TrafficSifnal_REDGREEN(){
	LED_PORT = (1<<TRAFFIC_LIGHT_hRED) | (1<<TRAFFIC_LIGHT_vGREEN);
 392:	81 e2       	ldi	r24, 0x21	; 33
 394:	82 bb       	out	0x12, r24	; 18
 396:	08 95       	ret

00000398 <TrafficSifnal_REDYELLOW>:
}

void TrafficSifnal_REDYELLOW(){
	LED_PORT = (1<<TRAFFIC_LIGHT_hRED) | (1<<TRAFFIC_LIGHT_vYELLOW);
 398:	82 e2       	ldi	r24, 0x22	; 34
 39a:	82 bb       	out	0x12, r24	; 18
 39c:	08 95       	ret

0000039e <TrafficSifnal_GREENRED>:
}

void TrafficSifnal_GREENRED(){
	LED_PORT = (1<<TRAFFIC_LIGHT_hGREEN) | (1<<TRAFFIC_LIGHT_vRED);
 39e:	8c e0       	ldi	r24, 0x0C	; 12
 3a0:	82 bb       	out	0x12, r24	; 18
 3a2:	08 95       	ret

000003a4 <TrafficSifnal_YELLOWRED>:
}

void TrafficSifnal_YELLOWRED(){
	LED_PORT = (1<<TRAFFIC_LIGHT_hYELLOW) | (1<<TRAFFIC_LIGHT_vRED);
 3a4:	84 e1       	ldi	r24, 0x14	; 20
 3a6:	82 bb       	out	0x12, r24	; 18
 3a8:	08 95       	ret

000003aa <main>:
#include <util/delay.h>
#include "ap/TrafficSignal/trafficsignal.h"

int main(void)
{
	standinglight_init();
 3aa:	81 de       	rcall	.-766    	; 0xae <standinglight_init>

	while (1)
	{
		standinglight_execute();
 3ac:	85 df       	rcall	.-246    	; 0x2b8 <standinglight_execute>
 3ae:	fe cf       	rjmp	.-4      	; 0x3ac <main+0x2>

000003b0 <Gpio_initPin>:
 3b0:	61 11       	cpse	r22, r1
	
}

void Gpio_initPin(volatile uint8_t *DDR, uint8_t dir, uint8_t pinNum){
	
	if(dir == OUTPUT){
 3b2:	0c c0       	rjmp	.+24     	; 0x3cc <Gpio_initPin+0x1c>
		*DDR |= (1<<pinNum);
 3b4:	fc 01       	movw	r30, r24
 3b6:	50 81       	ld	r21, Z
 3b8:	21 e0       	ldi	r18, 0x01	; 1
 3ba:	30 e0       	ldi	r19, 0x00	; 0
 3bc:	02 c0       	rjmp	.+4      	; 0x3c2 <Gpio_initPin+0x12>
 3be:	22 0f       	add	r18, r18
 3c0:	33 1f       	adc	r19, r19
 3c2:	4a 95       	dec	r20
 3c4:	e2 f7       	brpl	.-8      	; 0x3be <Gpio_initPin+0xe>
 3c6:	25 2b       	or	r18, r21
 3c8:	20 83       	st	Z, r18
 3ca:	08 95       	ret
	}
	else{
		*DDR &= ~(1<<pinNum); 
 3cc:	fc 01       	movw	r30, r24
 3ce:	50 81       	ld	r21, Z
 3d0:	21 e0       	ldi	r18, 0x01	; 1
 3d2:	30 e0       	ldi	r19, 0x00	; 0
 3d4:	02 c0       	rjmp	.+4      	; 0x3da <Gpio_initPin+0x2a>
 3d6:	22 0f       	add	r18, r18
 3d8:	33 1f       	adc	r19, r19
 3da:	4a 95       	dec	r20
 3dc:	e2 f7       	brpl	.-8      	; 0x3d6 <Gpio_initPin+0x26>
 3de:	20 95       	com	r18
 3e0:	25 23       	and	r18, r21
 3e2:	20 83       	st	Z, r18
 3e4:	08 95       	ret

000003e6 <_exit>:
 3e6:	f8 94       	cli

000003e8 <__stop_program>:
 3e8:	ff cf       	rjmp	.-2      	; 0x3e8 <__stop_program>
