
projrct2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  00000354  000003e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000354  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000009  00800102  00800102  000003ea  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003ea  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000041c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000058  00000000  00000000  0000045c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000ac5  00000000  00000000  000004b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000899  00000000  00000000  00000f79  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000480  00000000  00000000  00001812  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000a0  00000000  00000000  00001c94  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004f6  00000000  00000000  00001d34  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000151  00000000  00000000  0000222a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000048  00000000  00000000  0000237b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e4 e5       	ldi	r30, 0x54	; 84
  a0:	f3 e0       	ldi	r31, 0x03	; 3
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a2 30       	cpi	r26, 0x02	; 2
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a2 e0       	ldi	r26, 0x02	; 2
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	ab 30       	cpi	r26, 0x0B	; 11
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	15 d1       	rcall	.+554    	; 0x2ee <main>
  c4:	45 c1       	rjmp	.+650    	; 0x350 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <TrafficSifnal_REDGREEN>:
enum{RED_GREEN, RED_YELLOW, GREEN_RED, YELLOW_RED};

uint8_t	trafficState=RED_GREEN;
uint32_t timetic;
void TrafficSifnal_REDGREEN(){
	TRAFFIC_LED_PORT = (1<<TRAFFIC_LIGHT_hRED) | (1<<TRAFFIC_LIGHT_vGREEN);
  c8:	81 e2       	ldi	r24, 0x21	; 33
  ca:	82 bb       	out	0x12, r24	; 18
  cc:	08 95       	ret

000000ce <TrafficSifnal_REDYELLOW>:
	
}

void TrafficSifnal_REDYELLOW(){
	TRAFFIC_LED_PORT = (1<<TRAFFIC_LIGHT_hRED) | (1<<TRAFFIC_LIGHT_vYELLOW);
  ce:	82 e2       	ldi	r24, 0x22	; 34
  d0:	82 bb       	out	0x12, r24	; 18
  d2:	08 95       	ret

000000d4 <TrafficSifnal_GREENRED>:
}

void TrafficSifnal_GREENRED(){
	TRAFFIC_LED_PORT = (1<<TRAFFIC_LIGHT_hGREEN) | (1<<TRAFFIC_LIGHT_vRED);
  d4:	8c e0       	ldi	r24, 0x0C	; 12
  d6:	82 bb       	out	0x12, r24	; 18
  d8:	08 95       	ret

000000da <TrafficSifnal_YELLOWRED>:
}

void TrafficSifnal_YELLOWRED(){
	TRAFFIC_LED_PORT = (1<<TRAFFIC_LIGHT_hYELLOW) | (1<<TRAFFIC_LIGHT_vRED);
  da:	84 e1       	ldi	r24, 0x14	; 20
  dc:	82 bb       	out	0x12, r24	; 18
  de:	08 95       	ret

000000e0 <TrafficgetState>:
}

uint8_t TrafficgetState(){
	static uint8_t prevState = 1;
	uint8_t corState = TRAFFIC_BUTTON_PIN & (1<<TRAFFIC_BUTTON_CONTROL);
  e0:	89 b3       	in	r24, 0x19	; 25
	if ((corState == 0) &&(prevState = 1)){
  e2:	98 2f       	mov	r25, r24
  e4:	94 70       	andi	r25, 0x04	; 4
  e6:	82 fd       	sbrc	r24, 2
  e8:	0d c0       	rjmp	.+26     	; 0x104 <TrafficgetState+0x24>
  ea:	81 e0       	ldi	r24, 0x01	; 1
  ec:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  f0:	8f e3       	ldi	r24, 0x3F	; 63
  f2:	9c e9       	ldi	r25, 0x9C	; 156
  f4:	01 97       	sbiw	r24, 0x01	; 1
  f6:	f1 f7       	brne	.-4      	; 0xf4 <TrafficgetState+0x14>
  f8:	00 c0       	rjmp	.+0      	; 0xfa <TrafficgetState+0x1a>
  fa:	00 00       	nop
		_delay_ms(10);
		prevState = 0;
  fc:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
		return 0;
 100:	80 e0       	ldi	r24, 0x00	; 0
 102:	08 95       	ret
	}
	else if ((corState != 0 )&&(prevState == 0)){
 104:	99 23       	and	r25, r25
 106:	71 f0       	breq	.+28     	; 0x124 <TrafficgetState+0x44>
 108:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 10c:	81 11       	cpse	r24, r1
 10e:	0c c0       	rjmp	.+24     	; 0x128 <TrafficgetState+0x48>
 110:	8f e3       	ldi	r24, 0x3F	; 63
 112:	9c e9       	ldi	r25, 0x9C	; 156
 114:	01 97       	sbiw	r24, 0x01	; 1
 116:	f1 f7       	brne	.-4      	; 0x114 <TrafficgetState+0x34>
 118:	00 c0       	rjmp	.+0      	; 0x11a <TrafficgetState+0x3a>
 11a:	00 00       	nop
		_delay_ms(10);
		prevState =1;
 11c:	81 e0       	ldi	r24, 0x01	; 1
 11e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		return 1;
 122:	08 95       	ret
	}
	return 0;
 124:	80 e0       	ldi	r24, 0x00	; 0
 126:	08 95       	ret
 128:	80 e0       	ldi	r24, 0x00	; 0
	
}
 12a:	08 95       	ret

0000012c <TrafficSignal_AUTO>:


void TrafficSignal_AUTO(){
 12c:	0f 93       	push	r16
 12e:	1f 93       	push	r17
	static uint32_t prevTime = 0;
	
	switch(trafficState){
 130:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <trafficState>
 134:	81 30       	cpi	r24, 0x01	; 1
 136:	99 f1       	breq	.+102    	; 0x19e <TrafficSignal_AUTO+0x72>
 138:	38 f0       	brcs	.+14     	; 0x148 <TrafficSignal_AUTO+0x1c>
 13a:	82 30       	cpi	r24, 0x02	; 2
 13c:	09 f4       	brne	.+2      	; 0x140 <TrafficSignal_AUTO+0x14>
 13e:	5a c0       	rjmp	.+180    	; 0x1f4 <TrafficSignal_AUTO+0xc8>
 140:	83 30       	cpi	r24, 0x03	; 3
 142:	09 f4       	brne	.+2      	; 0x146 <TrafficSignal_AUTO+0x1a>
 144:	81 c0       	rjmp	.+258    	; 0x248 <TrafficSignal_AUTO+0x11c>
 146:	a8 c0       	rjmp	.+336    	; 0x298 <TrafficSignal_AUTO+0x16c>
		case RED_GREEN:
		TrafficSifnal_REDGREEN();
 148:	bf df       	rcall	.-130    	; 0xc8 <TrafficSifnal_REDGREEN>
		if(timetic - prevTime >= 3000){
 14a:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <timetic>
 14e:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <timetic+0x1>
 152:	a0 91 09 01 	lds	r26, 0x0109	; 0x800109 <timetic+0x2>
 156:	b0 91 0a 01 	lds	r27, 0x010A	; 0x80010a <timetic+0x3>
 15a:	40 91 02 01 	lds	r20, 0x0102	; 0x800102 <__data_end>
 15e:	50 91 03 01 	lds	r21, 0x0103	; 0x800103 <__data_end+0x1>
 162:	60 91 04 01 	lds	r22, 0x0104	; 0x800104 <__data_end+0x2>
 166:	70 91 05 01 	lds	r23, 0x0105	; 0x800105 <__data_end+0x3>
 16a:	8c 01       	movw	r16, r24
 16c:	9d 01       	movw	r18, r26
 16e:	04 1b       	sub	r16, r20
 170:	15 0b       	sbc	r17, r21
 172:	26 0b       	sbc	r18, r22
 174:	37 0b       	sbc	r19, r23
 176:	b9 01       	movw	r22, r18
 178:	a8 01       	movw	r20, r16
 17a:	48 3b       	cpi	r20, 0xB8	; 184
 17c:	5b 40       	sbci	r21, 0x0B	; 11
 17e:	61 05       	cpc	r22, r1
 180:	71 05       	cpc	r23, r1
 182:	08 f4       	brcc	.+2      	; 0x186 <TrafficSignal_AUTO+0x5a>
 184:	89 c0       	rjmp	.+274    	; 0x298 <TrafficSignal_AUTO+0x16c>
			prevTime = timetic;
 186:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
 18a:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__data_end+0x1>
 18e:	a0 93 04 01 	sts	0x0104, r26	; 0x800104 <__data_end+0x2>
 192:	b0 93 05 01 	sts	0x0105, r27	; 0x800105 <__data_end+0x3>
			trafficState = RED_YELLOW;
 196:	81 e0       	ldi	r24, 0x01	; 1
 198:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <trafficState>
		}
		break;
		
		case RED_YELLOW:
		TrafficSifnal_REDYELLOW();
 19c:	7d c0       	rjmp	.+250    	; 0x298 <TrafficSignal_AUTO+0x16c>
 19e:	97 df       	rcall	.-210    	; 0xce <TrafficSifnal_REDYELLOW>
		if(timetic - prevTime >= 1000){
 1a0:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <timetic>
 1a4:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <timetic+0x1>
 1a8:	a0 91 09 01 	lds	r26, 0x0109	; 0x800109 <timetic+0x2>
 1ac:	b0 91 0a 01 	lds	r27, 0x010A	; 0x80010a <timetic+0x3>
 1b0:	40 91 02 01 	lds	r20, 0x0102	; 0x800102 <__data_end>
 1b4:	50 91 03 01 	lds	r21, 0x0103	; 0x800103 <__data_end+0x1>
 1b8:	60 91 04 01 	lds	r22, 0x0104	; 0x800104 <__data_end+0x2>
 1bc:	70 91 05 01 	lds	r23, 0x0105	; 0x800105 <__data_end+0x3>
 1c0:	8c 01       	movw	r16, r24
 1c2:	9d 01       	movw	r18, r26
 1c4:	04 1b       	sub	r16, r20
 1c6:	15 0b       	sbc	r17, r21
 1c8:	26 0b       	sbc	r18, r22
 1ca:	37 0b       	sbc	r19, r23
 1cc:	b9 01       	movw	r22, r18
 1ce:	a8 01       	movw	r20, r16
 1d0:	48 3e       	cpi	r20, 0xE8	; 232
 1d2:	53 40       	sbci	r21, 0x03	; 3
 1d4:	61 05       	cpc	r22, r1
 1d6:	71 05       	cpc	r23, r1
 1d8:	08 f4       	brcc	.+2      	; 0x1dc <TrafficSignal_AUTO+0xb0>
 1da:	5e c0       	rjmp	.+188    	; 0x298 <TrafficSignal_AUTO+0x16c>
			prevTime = timetic;
 1dc:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
 1e0:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__data_end+0x1>
 1e4:	a0 93 04 01 	sts	0x0104, r26	; 0x800104 <__data_end+0x2>
 1e8:	b0 93 05 01 	sts	0x0105, r27	; 0x800105 <__data_end+0x3>
			trafficState = GREEN_RED;
 1ec:	82 e0       	ldi	r24, 0x02	; 2
 1ee:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <trafficState>
		}
		
		break;
		
		case GREEN_RED:
		TrafficSifnal_GREENRED();
 1f2:	52 c0       	rjmp	.+164    	; 0x298 <TrafficSignal_AUTO+0x16c>
 1f4:	6f df       	rcall	.-290    	; 0xd4 <TrafficSifnal_GREENRED>
		if(timetic - prevTime >= 3000){
 1f6:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <timetic>
 1fa:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <timetic+0x1>
 1fe:	a0 91 09 01 	lds	r26, 0x0109	; 0x800109 <timetic+0x2>
 202:	b0 91 0a 01 	lds	r27, 0x010A	; 0x80010a <timetic+0x3>
 206:	40 91 02 01 	lds	r20, 0x0102	; 0x800102 <__data_end>
 20a:	50 91 03 01 	lds	r21, 0x0103	; 0x800103 <__data_end+0x1>
 20e:	60 91 04 01 	lds	r22, 0x0104	; 0x800104 <__data_end+0x2>
 212:	70 91 05 01 	lds	r23, 0x0105	; 0x800105 <__data_end+0x3>
 216:	8c 01       	movw	r16, r24
 218:	9d 01       	movw	r18, r26
 21a:	04 1b       	sub	r16, r20
 21c:	15 0b       	sbc	r17, r21
 21e:	26 0b       	sbc	r18, r22
 220:	37 0b       	sbc	r19, r23
 222:	b9 01       	movw	r22, r18
 224:	a8 01       	movw	r20, r16
 226:	48 3b       	cpi	r20, 0xB8	; 184
 228:	5b 40       	sbci	r21, 0x0B	; 11
 22a:	61 05       	cpc	r22, r1
 22c:	71 05       	cpc	r23, r1
 22e:	a0 f1       	brcs	.+104    	; 0x298 <TrafficSignal_AUTO+0x16c>
			prevTime = timetic;
 230:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
 234:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__data_end+0x1>
 238:	a0 93 04 01 	sts	0x0104, r26	; 0x800104 <__data_end+0x2>
 23c:	b0 93 05 01 	sts	0x0105, r27	; 0x800105 <__data_end+0x3>
			trafficState = YELLOW_RED;
 240:	83 e0       	ldi	r24, 0x03	; 3
 242:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <trafficState>
		}
		
		break;
		
		case YELLOW_RED:
		TrafficSifnal_YELLOWRED();
 246:	28 c0       	rjmp	.+80     	; 0x298 <TrafficSignal_AUTO+0x16c>
 248:	48 df       	rcall	.-368    	; 0xda <TrafficSifnal_YELLOWRED>
		if(timetic - prevTime >= 1000){
 24a:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <timetic>
 24e:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <timetic+0x1>
 252:	a0 91 09 01 	lds	r26, 0x0109	; 0x800109 <timetic+0x2>
 256:	b0 91 0a 01 	lds	r27, 0x010A	; 0x80010a <timetic+0x3>
 25a:	40 91 02 01 	lds	r20, 0x0102	; 0x800102 <__data_end>
 25e:	50 91 03 01 	lds	r21, 0x0103	; 0x800103 <__data_end+0x1>
 262:	60 91 04 01 	lds	r22, 0x0104	; 0x800104 <__data_end+0x2>
 266:	70 91 05 01 	lds	r23, 0x0105	; 0x800105 <__data_end+0x3>
 26a:	8c 01       	movw	r16, r24
 26c:	9d 01       	movw	r18, r26
 26e:	04 1b       	sub	r16, r20
 270:	15 0b       	sbc	r17, r21
 272:	26 0b       	sbc	r18, r22
 274:	37 0b       	sbc	r19, r23
 276:	b9 01       	movw	r22, r18
 278:	a8 01       	movw	r20, r16
 27a:	48 3e       	cpi	r20, 0xE8	; 232
 27c:	53 40       	sbci	r21, 0x03	; 3
 27e:	61 05       	cpc	r22, r1
 280:	71 05       	cpc	r23, r1
 282:	50 f0       	brcs	.+20     	; 0x298 <TrafficSignal_AUTO+0x16c>
			prevTime = timetic;
 284:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
 288:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__data_end+0x1>
 28c:	a0 93 04 01 	sts	0x0104, r26	; 0x800104 <__data_end+0x2>
 290:	b0 93 05 01 	sts	0x0105, r27	; 0x800105 <__data_end+0x3>
			trafficState = RED_GREEN;
 294:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <trafficState>
		}
		
		break;
	}
	
}
 298:	1f 91       	pop	r17
 29a:	0f 91       	pop	r16
 29c:	08 95       	ret

0000029e <TrafficSignal_MANUAL>:

void TrafficSignal_MANUAL(){
	
	
	switch(trafficState){
 29e:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <trafficState>
 2a2:	81 30       	cpi	r24, 0x01	; 1
 2a4:	71 f0       	breq	.+28     	; 0x2c2 <TrafficSignal_MANUAL+0x24>
 2a6:	28 f0       	brcs	.+10     	; 0x2b2 <TrafficSignal_MANUAL+0x14>
 2a8:	82 30       	cpi	r24, 0x02	; 2
 2aa:	99 f0       	breq	.+38     	; 0x2d2 <TrafficSignal_MANUAL+0x34>
 2ac:	83 30       	cpi	r24, 0x03	; 3
 2ae:	c9 f0       	breq	.+50     	; 0x2e2 <TrafficSignal_MANUAL+0x44>
 2b0:	08 95       	ret
		case RED_GREEN:
		TrafficSifnal_REDGREEN();
 2b2:	0a df       	rcall	.-492    	; 0xc8 <TrafficSifnal_REDGREEN>
		if(TrafficgetState()){
 2b4:	15 df       	rcall	.-470    	; 0xe0 <TrafficgetState>
 2b6:	88 23       	and	r24, r24
 2b8:	c9 f0       	breq	.+50     	; 0x2ec <TrafficSignal_MANUAL+0x4e>
 2ba:	81 e0       	ldi	r24, 0x01	; 1
			trafficState = RED_YELLOW;
 2bc:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <trafficState>
 2c0:	08 95       	ret
		}
		break;
		
		case RED_YELLOW:
		TrafficSifnal_REDYELLOW();
 2c2:	05 df       	rcall	.-502    	; 0xce <TrafficSifnal_REDYELLOW>
 2c4:	0d df       	rcall	.-486    	; 0xe0 <TrafficgetState>
		if(TrafficgetState()){
 2c6:	88 23       	and	r24, r24
 2c8:	89 f0       	breq	.+34     	; 0x2ec <TrafficSignal_MANUAL+0x4e>
 2ca:	82 e0       	ldi	r24, 0x02	; 2
 2cc:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <trafficState>
			trafficState = GREEN_RED;
 2d0:	08 95       	ret
		}
		break;
		
		case GREEN_RED:
		TrafficSifnal_GREENRED();
 2d2:	00 df       	rcall	.-512    	; 0xd4 <TrafficSifnal_GREENRED>
 2d4:	05 df       	rcall	.-502    	; 0xe0 <TrafficgetState>
		if(TrafficgetState()){
 2d6:	88 23       	and	r24, r24
 2d8:	49 f0       	breq	.+18     	; 0x2ec <TrafficSignal_MANUAL+0x4e>
 2da:	83 e0       	ldi	r24, 0x03	; 3
			trafficState = YELLOW_RED;
 2dc:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <trafficState>
 2e0:	08 95       	ret
 2e2:	fb de       	rcall	.-522    	; 0xda <TrafficSifnal_YELLOWRED>
		}
		break;
		
		case YELLOW_RED:
		TrafficSifnal_YELLOWRED();
 2e4:	fd de       	rcall	.-518    	; 0xe0 <TrafficgetState>
 2e6:	81 11       	cpse	r24, r1
		if(TrafficgetState()){
 2e8:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <trafficState>
 2ec:	08 95       	ret

000002ee <main>:
			trafficState = RED_GREEN;
 2ee:	8f ef       	ldi	r24, 0xFF	; 255
 2f0:	81 bb       	out	0x11, r24	; 17
 2f2:	8b bb       	out	0x1b, r24	; 27

int main(void)
{
	TRAFFIC_LED_DDR = 0xff;
	TRAFFIC_BUTTON_PORT = 0xff;
	TRAFFIC_BUTTON_DDR &= ~((1<<TRAFFIC_BUTTON_AUTO)| (1<<TRAFFIC_BUTTON_MANUAL) | (1<<TRAFFIC_BUTTON_CONTROL) );
 2f4:	8a b3       	in	r24, 0x1a	; 26
 2f6:	88 7f       	andi	r24, 0xF8	; 248
 2f8:	8a bb       	out	0x1a, r24	; 26
	
	uint8_t trafficModeState = AUTO;
 2fa:	c0 e0       	ldi	r28, 0x00	; 0
	
	while (1)
	{
		//Event Process
		if((TRAFFIC_BUTTON_PIN & (1<<TRAFFIC_BUTTON_AUTO)) == 0){
 2fc:	c8 9b       	sbis	0x19, 0	; 25
 2fe:	03 c0       	rjmp	.+6      	; 0x306 <main+0x18>
			trafficModeState = AUTO;
		}
		
		else if((TRAFFIC_BUTTON_PIN & (1<<TRAFFIC_BUTTON_MANUAL))==0){
 300:	c9 9b       	sbis	0x19, 1	; 25
 302:	03 c0       	rjmp	.+6      	; 0x30a <main+0x1c>
 304:	03 c0       	rjmp	.+6      	; 0x30c <main+0x1e>
	
	while (1)
	{
		//Event Process
		if((TRAFFIC_BUTTON_PIN & (1<<TRAFFIC_BUTTON_AUTO)) == 0){
			trafficModeState = AUTO;
 306:	c0 e0       	ldi	r28, 0x00	; 0
 308:	01 c0       	rjmp	.+2      	; 0x30c <main+0x1e>
		}
		
		else if((TRAFFIC_BUTTON_PIN & (1<<TRAFFIC_BUTTON_MANUAL))==0){
			trafficModeState=MANUAL;
 30a:	c1 e0       	ldi	r28, 0x01	; 1
		}
		
		switch(trafficModeState){
 30c:	cc 23       	and	r28, r28
 30e:	19 f0       	breq	.+6      	; 0x316 <main+0x28>
 310:	c1 30       	cpi	r28, 0x01	; 1
 312:	19 f0       	breq	.+6      	; 0x31a <main+0x2c>
 314:	03 c0       	rjmp	.+6      	; 0x31c <main+0x2e>
			case AUTO:
			TrafficSignal_AUTO();
 316:	0a df       	rcall	.-492    	; 0x12c <TrafficSignal_AUTO>
			break;
			
			case MANUAL:
			TrafficSignal_MANUAL();
 318:	01 c0       	rjmp	.+2      	; 0x31c <main+0x2e>
 31a:	c1 df       	rcall	.-126    	; 0x29e <TrafficSignal_MANUAL>
 31c:	8f e9       	ldi	r24, 0x9F	; 159
 31e:	9f e0       	ldi	r25, 0x0F	; 15
 320:	01 97       	sbiw	r24, 0x01	; 1
 322:	f1 f7       	brne	.-4      	; 0x320 <main+0x32>
 324:	00 c0       	rjmp	.+0      	; 0x326 <main+0x38>
 326:	00 00       	nop
			break;
			
		}
		_delay_ms(1);
		timetic++;
 328:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <timetic>
 32c:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <timetic+0x1>
 330:	a0 91 09 01 	lds	r26, 0x0109	; 0x800109 <timetic+0x2>
 334:	b0 91 0a 01 	lds	r27, 0x010A	; 0x80010a <timetic+0x3>
 338:	01 96       	adiw	r24, 0x01	; 1
 33a:	a1 1d       	adc	r26, r1
 33c:	b1 1d       	adc	r27, r1
 33e:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <timetic>
 342:	90 93 08 01 	sts	0x0108, r25	; 0x800108 <timetic+0x1>
 346:	a0 93 09 01 	sts	0x0109, r26	; 0x800109 <timetic+0x2>
 34a:	b0 93 0a 01 	sts	0x010A, r27	; 0x80010a <timetic+0x3>
	}
 34e:	d6 cf       	rjmp	.-84     	; 0x2fc <main+0xe>

00000350 <_exit>:
 350:	f8 94       	cli

00000352 <__stop_program>:
 352:	ff cf       	rjmp	.-2      	; 0x352 <__stop_program>
