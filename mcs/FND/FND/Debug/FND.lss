
FND.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  00000726  000007ba  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000726  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000018  0080010a  0080010a  000007c4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000007c4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000007f4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000158  00000000  00000000  00000834  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000012d3  00000000  00000000  0000098c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000cf0  00000000  00000000  00001c5f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000afe  00000000  00000000  0000294f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002ac  00000000  00000000  00003450  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000688  00000000  00000000  000036fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000053a  00000000  00000000  00003d84  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000e8  00000000  00000000  000042be  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	14 c3       	rjmp	.+1576   	; 0x64e <__vector_9>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	dd c2       	rjmp	.+1466   	; 0x5fc <__vector_16>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e6 e2       	ldi	r30, 0x26	; 38
  a0:	f7 e0       	ldi	r31, 0x07	; 7
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	aa 30       	cpi	r26, 0x0A	; 10
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	aa e0       	ldi	r26, 0x0A	; 10
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a2 32       	cpi	r26, 0x22	; 34
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	ec d2       	rcall	.+1496   	; 0x69c <main>
  c4:	2e c3       	rjmp	.+1628   	; 0x722 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <StopWatch_init>:
uint16_t sec, min, hour;
uint8_t StopWatchState;

void StopWatch_init(){
	
	FND_init();
  c8:	91 d1       	rcall	.+802    	; 0x3ec <FND_init>
	TIM0_init();
  ca:	07 d3       	rcall	.+1550   	; 0x6da <TIM0_init>
	TIM2_init();
  cc:	0f d3       	rcall	.+1566   	; 0x6ec <TIM2_init>
  ce:	20 e0       	ldi	r18, 0x00	; 0
	Button_init(&btnMode,&DDRA,&PINA,0);
  d0:	49 e3       	ldi	r20, 0x39	; 57
  d2:	50 e0       	ldi	r21, 0x00	; 0
  d4:	6a e3       	ldi	r22, 0x3A	; 58
  d6:	70 e0       	ldi	r23, 0x00	; 0
  d8:	8c e1       	ldi	r24, 0x1C	; 28
  da:	91 e0       	ldi	r25, 0x01	; 1
  dc:	4f d1       	rcall	.+670    	; 0x37c <Button_init>
  de:	21 e0       	ldi	r18, 0x01	; 1
	Button_init(&btnReSet,&DDRA,&PINA,1);
  e0:	49 e3       	ldi	r20, 0x39	; 57
  e2:	50 e0       	ldi	r21, 0x00	; 0
  e4:	6a e3       	ldi	r22, 0x3A	; 58
  e6:	70 e0       	ldi	r23, 0x00	; 0
  e8:	8d e0       	ldi	r24, 0x0D	; 13
  ea:	91 e0       	ldi	r25, 0x01	; 1
  ec:	47 d1       	rcall	.+654    	; 0x37c <Button_init>
  ee:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <StopWatchState>
	StopWatchState = STOP;
  f2:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <milisec+0x1>
	milisec = 0;
  f6:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <milisec>
  fa:	8e e2       	ldi	r24, 0x2E	; 46
	sec = 46;
  fc:	90 e0       	ldi	r25, 0x00	; 0
  fe:	90 93 1b 01 	sts	0x011B, r25	; 0x80011b <sec+0x1>
 102:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <sec>
 106:	8e e0       	ldi	r24, 0x0E	; 14
	min = 14;
 108:	90 e0       	ldi	r25, 0x00	; 0
 10a:	90 93 18 01 	sts	0x0118, r25	; 0x800118 <min+0x1>
 10e:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <min>
 112:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <hour+0x1>
	hour = 0;
 116:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <hour>
 11a:	08 95       	ret

0000011c <StopWatch_incMilisec>:
 11c:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <StopWatchState>
}

void StopWatch_incMilisec(){
	
	if (StopWatchState == RUN){
 120:	81 30       	cpi	r24, 0x01	; 1
 122:	09 f0       	breq	.+2      	; 0x126 <StopWatch_incMilisec+0xa>
 124:	8c c0       	rjmp	.+280    	; 0x23e <StopWatch_incMilisec+0x122>
		milisec = (milisec+1)%1000;
 126:	40 91 13 01 	lds	r20, 0x0113	; 0x800113 <milisec>
 12a:	50 91 14 01 	lds	r21, 0x0114	; 0x800114 <milisec+0x1>
 12e:	4f 5f       	subi	r20, 0xFF	; 255
 130:	5f 4f       	sbci	r21, 0xFF	; 255
 132:	9a 01       	movw	r18, r20
 134:	36 95       	lsr	r19
 136:	27 95       	ror	r18
 138:	36 95       	lsr	r19
 13a:	27 95       	ror	r18
 13c:	36 95       	lsr	r19
 13e:	27 95       	ror	r18
 140:	a5 ec       	ldi	r26, 0xC5	; 197
 142:	b0 e2       	ldi	r27, 0x20	; 32
 144:	df d2       	rcall	.+1470   	; 0x704 <__umulhisi3>
 146:	92 95       	swap	r25
 148:	82 95       	swap	r24
 14a:	8f 70       	andi	r24, 0x0F	; 15
 14c:	89 27       	eor	r24, r25
 14e:	9f 70       	andi	r25, 0x0F	; 15
 150:	89 27       	eor	r24, r25
 152:	68 ee       	ldi	r22, 0xE8	; 232
 154:	73 e0       	ldi	r23, 0x03	; 3
 156:	86 9f       	mul	r24, r22
 158:	90 01       	movw	r18, r0
 15a:	87 9f       	mul	r24, r23
 15c:	30 0d       	add	r19, r0
 15e:	96 9f       	mul	r25, r22
 160:	30 0d       	add	r19, r0
 162:	11 24       	eor	r1, r1
 164:	ca 01       	movw	r24, r20
 166:	82 1b       	sub	r24, r18
 168:	93 0b       	sbc	r25, r19
 16a:	90 93 14 01 	sts	0x0114, r25	; 0x800114 <milisec+0x1>
 16e:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <milisec>
	}
	else return;
	
	if(milisec)return;
 172:	89 2b       	or	r24, r25
 174:	09 f0       	breq	.+2      	; 0x178 <StopWatch_incMilisec+0x5c>
 176:	63 c0       	rjmp	.+198    	; 0x23e <StopWatch_incMilisec+0x122>
	
	sec = (sec +1)%60;
 178:	40 91 1a 01 	lds	r20, 0x011A	; 0x80011a <sec>
 17c:	50 91 1b 01 	lds	r21, 0x011B	; 0x80011b <sec+0x1>
 180:	4f 5f       	subi	r20, 0xFF	; 255
 182:	5f 4f       	sbci	r21, 0xFF	; 255
 184:	9a 01       	movw	r18, r20
 186:	a9 e8       	ldi	r26, 0x89	; 137
 188:	b8 e8       	ldi	r27, 0x88	; 136
 18a:	bc d2       	rcall	.+1400   	; 0x704 <__umulhisi3>
 18c:	96 95       	lsr	r25
 18e:	87 95       	ror	r24
 190:	92 95       	swap	r25
 192:	82 95       	swap	r24
 194:	8f 70       	andi	r24, 0x0F	; 15
 196:	89 27       	eor	r24, r25
 198:	9f 70       	andi	r25, 0x0F	; 15
 19a:	89 27       	eor	r24, r25
 19c:	6c e3       	ldi	r22, 0x3C	; 60
 19e:	68 9f       	mul	r22, r24
 1a0:	90 01       	movw	r18, r0
 1a2:	69 9f       	mul	r22, r25
 1a4:	30 0d       	add	r19, r0
 1a6:	11 24       	eor	r1, r1
 1a8:	ca 01       	movw	r24, r20
 1aa:	82 1b       	sub	r24, r18
 1ac:	93 0b       	sbc	r25, r19
 1ae:	90 93 1b 01 	sts	0x011B, r25	; 0x80011b <sec+0x1>
 1b2:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <sec>
	if (sec) return;
 1b6:	89 2b       	or	r24, r25
 1b8:	09 f0       	breq	.+2      	; 0x1bc <StopWatch_incMilisec+0xa0>
 1ba:	41 c0       	rjmp	.+130    	; 0x23e <StopWatch_incMilisec+0x122>
	
	min = (min +1)%60;
 1bc:	40 91 17 01 	lds	r20, 0x0117	; 0x800117 <min>
 1c0:	50 91 18 01 	lds	r21, 0x0118	; 0x800118 <min+0x1>
 1c4:	4f 5f       	subi	r20, 0xFF	; 255
 1c6:	5f 4f       	sbci	r21, 0xFF	; 255
 1c8:	9a 01       	movw	r18, r20
 1ca:	9c d2       	rcall	.+1336   	; 0x704 <__umulhisi3>
 1cc:	96 95       	lsr	r25
 1ce:	87 95       	ror	r24
 1d0:	92 95       	swap	r25
 1d2:	82 95       	swap	r24
 1d4:	8f 70       	andi	r24, 0x0F	; 15
 1d6:	89 27       	eor	r24, r25
 1d8:	9f 70       	andi	r25, 0x0F	; 15
 1da:	89 27       	eor	r24, r25
 1dc:	6c e3       	ldi	r22, 0x3C	; 60
 1de:	68 9f       	mul	r22, r24
 1e0:	90 01       	movw	r18, r0
 1e2:	69 9f       	mul	r22, r25
 1e4:	30 0d       	add	r19, r0
 1e6:	11 24       	eor	r1, r1
 1e8:	ca 01       	movw	r24, r20
 1ea:	82 1b       	sub	r24, r18
 1ec:	93 0b       	sbc	r25, r19
 1ee:	90 93 18 01 	sts	0x0118, r25	; 0x800118 <min+0x1>
 1f2:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <min>
	if(min) return;
 1f6:	89 2b       	or	r24, r25
 1f8:	11 f5       	brne	.+68     	; 0x23e <StopWatch_incMilisec+0x122>
	
	hour = (hour +1) %24;
 1fa:	40 91 15 01 	lds	r20, 0x0115	; 0x800115 <hour>
 1fe:	50 91 16 01 	lds	r21, 0x0116	; 0x800116 <hour+0x1>
 202:	4f 5f       	subi	r20, 0xFF	; 255
 204:	5f 4f       	sbci	r21, 0xFF	; 255
 206:	9a 01       	movw	r18, r20
 208:	ab ea       	ldi	r26, 0xAB	; 171
 20a:	ba ea       	ldi	r27, 0xAA	; 170
 20c:	7b d2       	rcall	.+1270   	; 0x704 <__umulhisi3>
 20e:	92 95       	swap	r25
 210:	82 95       	swap	r24
 212:	8f 70       	andi	r24, 0x0F	; 15
 214:	89 27       	eor	r24, r25
 216:	9f 70       	andi	r25, 0x0F	; 15
 218:	89 27       	eor	r24, r25
 21a:	9c 01       	movw	r18, r24
 21c:	22 0f       	add	r18, r18
 21e:	33 1f       	adc	r19, r19
 220:	82 0f       	add	r24, r18
 222:	93 1f       	adc	r25, r19
 224:	88 0f       	add	r24, r24
 226:	99 1f       	adc	r25, r25
 228:	88 0f       	add	r24, r24
 22a:	99 1f       	adc	r25, r25
 22c:	88 0f       	add	r24, r24
 22e:	99 1f       	adc	r25, r25
 230:	9a 01       	movw	r18, r20
 232:	28 1b       	sub	r18, r24
 234:	39 0b       	sbc	r19, r25
 236:	30 93 16 01 	sts	0x0116, r19	; 0x800116 <hour+0x1>
 23a:	20 93 15 01 	sts	0x0115, r18	; 0x800115 <hour>
 23e:	08 95       	ret

00000240 <StopWatch_eventCheck>:
	StopWatch_Run();

}

void StopWatch_eventCheck(){
	switch(StopWatchState)
 240:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <StopWatchState>
 244:	81 30       	cpi	r24, 0x01	; 1
 246:	a9 f0       	breq	.+42     	; 0x272 <StopWatch_eventCheck+0x32>
 248:	18 f0       	brcs	.+6      	; 0x250 <StopWatch_eventCheck+0x10>
 24a:	82 30       	cpi	r24, 0x02	; 2
 24c:	d1 f0       	breq	.+52     	; 0x282 <StopWatch_eventCheck+0x42>
 24e:	08 95       	ret
	{
		case STOP:
		if (button_getstate(&btnMode) == ACT_RELEASED)
 250:	8c e1       	ldi	r24, 0x1C	; 28
 252:	91 e0       	ldi	r25, 0x01	; 1
 254:	a0 d0       	rcall	.+320    	; 0x396 <button_getstate>
 256:	81 30       	cpi	r24, 0x01	; 1
 258:	19 f4       	brne	.+6      	; 0x260 <StopWatch_eventCheck+0x20>
		{
			StopWatchState = RUN;
 25a:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <StopWatchState>
 25e:	08 95       	ret
		}
		else if (button_getstate(&btnReSet) == ACT_RELEASED){
 260:	8d e0       	ldi	r24, 0x0D	; 13
 262:	91 e0       	ldi	r25, 0x01	; 1
 264:	98 d0       	rcall	.+304    	; 0x396 <button_getstate>
 266:	81 30       	cpi	r24, 0x01	; 1
 268:	71 f4       	brne	.+28     	; 0x286 <StopWatch_eventCheck+0x46>
			StopWatchState = RESET;
 26a:	82 e0       	ldi	r24, 0x02	; 2
 26c:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <StopWatchState>
 270:	08 95       	ret
		}
		break;
		
		case RUN:
		if (button_getstate(&btnMode) == ACT_RELEASED)
 272:	8c e1       	ldi	r24, 0x1C	; 28
 274:	91 e0       	ldi	r25, 0x01	; 1
 276:	8f d0       	rcall	.+286    	; 0x396 <button_getstate>
 278:	81 30       	cpi	r24, 0x01	; 1
 27a:	29 f4       	brne	.+10     	; 0x286 <StopWatch_eventCheck+0x46>
		{
			StopWatchState = STOP;
 27c:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <StopWatchState>
 280:	08 95       	ret
		}
		break;
		
		case RESET:
		StopWatchState = STOP;
 282:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <StopWatchState>
 286:	08 95       	ret

00000288 <StopWatch_Run>:

void StopWatch_Run(){
	
	uint16_t stopwatch_data;
	
	if(StopWatchState == RESET){
 288:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <StopWatchState>
 28c:	82 30       	cpi	r24, 0x02	; 2
 28e:	81 f4       	brne	.+32     	; 0x2b0 <StopWatch_Run+0x28>
		milisec = 0;
 290:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <milisec+0x1>
 294:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <milisec>
		sec = 0;
 298:	10 92 1b 01 	sts	0x011B, r1	; 0x80011b <sec+0x1>
 29c:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <sec>
		min = 0;
 2a0:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <min+0x1>
 2a4:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <min>
		hour = 0;
 2a8:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <hour+0x1>
 2ac:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <hour>
	}
	
	stopwatch_data = (min%10*1000)+(sec*10)+(milisec/100%10);
 2b0:	40 91 17 01 	lds	r20, 0x0117	; 0x800117 <min>
 2b4:	50 91 18 01 	lds	r21, 0x0118	; 0x800118 <min+0x1>
 2b8:	9a 01       	movw	r18, r20
 2ba:	ad ec       	ldi	r26, 0xCD	; 205
 2bc:	bc ec       	ldi	r27, 0xCC	; 204
 2be:	22 d2       	rcall	.+1092   	; 0x704 <__umulhisi3>
 2c0:	96 95       	lsr	r25
 2c2:	87 95       	ror	r24
 2c4:	96 95       	lsr	r25
 2c6:	87 95       	ror	r24
 2c8:	96 95       	lsr	r25
 2ca:	87 95       	ror	r24
 2cc:	9c 01       	movw	r18, r24
 2ce:	22 0f       	add	r18, r18
 2d0:	33 1f       	adc	r19, r19
 2d2:	88 0f       	add	r24, r24
 2d4:	99 1f       	adc	r25, r25
 2d6:	88 0f       	add	r24, r24
 2d8:	99 1f       	adc	r25, r25
 2da:	88 0f       	add	r24, r24
 2dc:	99 1f       	adc	r25, r25
 2de:	82 0f       	add	r24, r18
 2e0:	93 1f       	adc	r25, r19
 2e2:	9a 01       	movw	r18, r20
 2e4:	28 1b       	sub	r18, r24
 2e6:	39 0b       	sbc	r19, r25
 2e8:	c9 01       	movw	r24, r18
 2ea:	28 ee       	ldi	r18, 0xE8	; 232
 2ec:	33 e0       	ldi	r19, 0x03	; 3
 2ee:	82 9f       	mul	r24, r18
 2f0:	b0 01       	movw	r22, r0
 2f2:	83 9f       	mul	r24, r19
 2f4:	70 0d       	add	r23, r0
 2f6:	92 9f       	mul	r25, r18
 2f8:	70 0d       	add	r23, r0
 2fa:	11 24       	eor	r1, r1
 2fc:	20 91 1a 01 	lds	r18, 0x011A	; 0x80011a <sec>
 300:	30 91 1b 01 	lds	r19, 0x011B	; 0x80011b <sec+0x1>
 304:	a9 01       	movw	r20, r18
 306:	44 0f       	add	r20, r20
 308:	55 1f       	adc	r21, r21
 30a:	22 0f       	add	r18, r18
 30c:	33 1f       	adc	r19, r19
 30e:	22 0f       	add	r18, r18
 310:	33 1f       	adc	r19, r19
 312:	22 0f       	add	r18, r18
 314:	33 1f       	adc	r19, r19
 316:	24 0f       	add	r18, r20
 318:	35 1f       	adc	r19, r21
 31a:	ab 01       	movw	r20, r22
 31c:	42 0f       	add	r20, r18
 31e:	53 1f       	adc	r21, r19
 320:	20 91 13 01 	lds	r18, 0x0113	; 0x800113 <milisec>
 324:	30 91 14 01 	lds	r19, 0x0114	; 0x800114 <milisec+0x1>
 328:	36 95       	lsr	r19
 32a:	27 95       	ror	r18
 32c:	36 95       	lsr	r19
 32e:	27 95       	ror	r18
 330:	ab e7       	ldi	r26, 0x7B	; 123
 332:	b4 e1       	ldi	r27, 0x14	; 20
 334:	e7 d1       	rcall	.+974    	; 0x704 <__umulhisi3>
 336:	fc 01       	movw	r30, r24
 338:	f6 95       	lsr	r31
 33a:	e7 95       	ror	r30
 33c:	9f 01       	movw	r18, r30
 33e:	ad ec       	ldi	r26, 0xCD	; 205
 340:	bc ec       	ldi	r27, 0xCC	; 204
 342:	e0 d1       	rcall	.+960    	; 0x704 <__umulhisi3>
 344:	96 95       	lsr	r25
 346:	87 95       	ror	r24
 348:	96 95       	lsr	r25
 34a:	87 95       	ror	r24
 34c:	96 95       	lsr	r25
 34e:	87 95       	ror	r24
 350:	9c 01       	movw	r18, r24
 352:	22 0f       	add	r18, r18
 354:	33 1f       	adc	r19, r19
 356:	88 0f       	add	r24, r24
 358:	99 1f       	adc	r25, r25
 35a:	88 0f       	add	r24, r24
 35c:	99 1f       	adc	r25, r25
 35e:	88 0f       	add	r24, r24
 360:	99 1f       	adc	r25, r25
 362:	82 0f       	add	r24, r18
 364:	93 1f       	adc	r25, r19
 366:	9f 01       	movw	r18, r30
 368:	28 1b       	sub	r18, r24
 36a:	39 0b       	sbc	r19, r25
 36c:	c9 01       	movw	r24, r18
	FND_setFndData(stopwatch_data);
 36e:	84 0f       	add	r24, r20
 370:	95 1f       	adc	r25, r21
 372:	39 c1       	rjmp	.+626    	; 0x5e6 <FND_setFndData>
 374:	08 95       	ret

00000376 <StopWatch_excute>:
 376:	64 df       	rcall	.-312    	; 0x240 <StopWatch_eventCheck>
}

void StopWatch_excute(){

	StopWatch_eventCheck();
	StopWatch_Run();
 378:	87 cf       	rjmp	.-242    	; 0x288 <StopWatch_Run>
 37a:	08 95       	ret

0000037c <Button_init>:
 37c:	fc 01       	movw	r30, r24
﻿#include "button.h"


void Button_init(button_t *btn, volatile uint8_t *ddr, volatile uint8_t *pin, uint8_t pinnum){
 37e:	cb 01       	movw	r24, r22
	btn ->DDR =ddr;
 380:	71 83       	std	Z+1, r23	; 0x01
 382:	60 83       	st	Z, r22
	btn->PIN = pin;
 384:	53 83       	std	Z+3, r21	; 0x03
 386:	42 83       	std	Z+2, r20	; 0x02
	btn->pinNum = pinnum;
 388:	25 83       	std	Z+5, r18	; 0x05
	btn->pS = 1;
 38a:	31 e0       	ldi	r19, 0x01	; 1
 38c:	34 83       	std	Z+4, r19	; 0x04
	Gpio_initPin(ddr,1,pinnum);
 38e:	42 2f       	mov	r20, r18
 390:	61 e0       	ldi	r22, 0x01	; 1
 392:	88 c1       	rjmp	.+784    	; 0x6a4 <Gpio_initPin>
 394:	08 95       	ret

00000396 <button_getstate>:
	
}

uint8_t button_getstate(button_t *btn){
 396:	fc 01       	movw	r30, r24
	
	uint8_t curState = *btn->PIN &(1<<btn->pinNum);
 398:	a2 81       	ldd	r26, Z+2	; 0x02
 39a:	b3 81       	ldd	r27, Z+3	; 0x03
 39c:	8c 91       	ld	r24, X
 39e:	21 e0       	ldi	r18, 0x01	; 1
 3a0:	30 e0       	ldi	r19, 0x00	; 0
 3a2:	05 80       	ldd	r0, Z+5	; 0x05
 3a4:	02 c0       	rjmp	.+4      	; 0x3aa <button_getstate+0x14>
 3a6:	22 0f       	add	r18, r18
 3a8:	33 1f       	adc	r19, r19
 3aa:	0a 94       	dec	r0
 3ac:	e2 f7       	brpl	.-8      	; 0x3a6 <button_getstate+0x10>
 3ae:	28 23       	and	r18, r24
	if ((curState == 0) &&(btn->pS = 1)){
 3b0:	59 f4       	brne	.+22     	; 0x3c8 <button_getstate+0x32>
 3b2:	81 e0       	ldi	r24, 0x01	; 1
 3b4:	84 83       	std	Z+4, r24	; 0x04
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 3b6:	8f e3       	ldi	r24, 0x3F	; 63
 3b8:	9c e9       	ldi	r25, 0x9C	; 156
 3ba:	01 97       	sbiw	r24, 0x01	; 1
 3bc:	f1 f7       	brne	.-4      	; 0x3ba <button_getstate+0x24>
 3be:	00 c0       	rjmp	.+0      	; 0x3c0 <button_getstate+0x2a>
 3c0:	00 00       	nop
		_delay_ms(10);
		btn->pS = PUSHED;
 3c2:	14 82       	std	Z+4, r1	; 0x04
		
		
		return ACT_PUSHED;
 3c4:	80 e0       	ldi	r24, 0x00	; 0
 3c6:	08 95       	ret
	}
	else if ((curState != 0 )&&(btn->pS == 0)){
 3c8:	22 23       	and	r18, r18
 3ca:	61 f0       	breq	.+24     	; 0x3e4 <button_getstate+0x4e>
 3cc:	84 81       	ldd	r24, Z+4	; 0x04
 3ce:	81 11       	cpse	r24, r1
 3d0:	0b c0       	rjmp	.+22     	; 0x3e8 <button_getstate+0x52>
 3d2:	8f e3       	ldi	r24, 0x3F	; 63
 3d4:	9c e9       	ldi	r25, 0x9C	; 156
 3d6:	01 97       	sbiw	r24, 0x01	; 1
 3d8:	f1 f7       	brne	.-4      	; 0x3d6 <button_getstate+0x40>
 3da:	00 c0       	rjmp	.+0      	; 0x3dc <button_getstate+0x46>
 3dc:	00 00       	nop
		_delay_ms(10);
		btn->pS = RELEASED;
 3de:	81 e0       	ldi	r24, 0x01	; 1
 3e0:	84 83       	std	Z+4, r24	; 0x04
		return ACT_RELEASED;
 3e2:	08 95       	ret
	}
	
	return ACT_NONE;
 3e4:	82 e0       	ldi	r24, 0x02	; 2
 3e6:	08 95       	ret
 3e8:	82 e0       	ldi	r24, 0x02	; 2
 3ea:	08 95       	ret

000003ec <FND_init>:


uint16_t fndData = 0;

void FND_init(){
	FND_DIGIT_DDR	|= ((1<<FND_DIGIT_4)|(1<<FND_DIGIT_3)|(1<<FND_DIGIT_2)|(1<<FND_DIGIT_1)); 
 3ec:	82 b1       	in	r24, 0x02	; 2
 3ee:	80 6f       	ori	r24, 0xF0	; 240
 3f0:	82 b9       	out	0x02, r24	; 2
	FND_DATA_DDR	= 0xff;
 3f2:	8f ef       	ldi	r24, 0xFF	; 255
 3f4:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
 3f8:	08 95       	ret

000003fa <FND_dispNum>:
}

void FND_dispNum(uint16_t fndNum){
 3fa:	cf 93       	push	r28
 3fc:	df 93       	push	r29
 3fe:	cd b7       	in	r28, 0x3d	; 61
 400:	de b7       	in	r29, 0x3e	; 62
 402:	2a 97       	sbiw	r28, 0x0a	; 10
 404:	0f b6       	in	r0, 0x3f	; 63
 406:	f8 94       	cli
 408:	de bf       	out	0x3e, r29	; 62
 40a:	0f be       	out	0x3f, r0	; 63
 40c:	cd bf       	out	0x3d, r28	; 61
 40e:	ac 01       	movw	r20, r24
	
	uint8_t fndFont[] = {0x3f,0x06,0x5b,0x4f,0x66,0x6d,0x7d,0x07,0x7f,0x6f};
 410:	8a e0       	ldi	r24, 0x0A	; 10
 412:	e0 e0       	ldi	r30, 0x00	; 0
 414:	f1 e0       	ldi	r31, 0x01	; 1
 416:	de 01       	movw	r26, r28
 418:	11 96       	adiw	r26, 0x01	; 1
 41a:	01 90       	ld	r0, Z+
 41c:	0d 92       	st	X+, r0
 41e:	8a 95       	dec	r24
 420:	e1 f7       	brne	.-8      	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
	
	static uint8_t fndDigitState = 0;
	
	fndDigitState = (fndDigitState+1)%4;
 422:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <__data_end>
 426:	90 e0       	ldi	r25, 0x00	; 0
 428:	01 96       	adiw	r24, 0x01	; 1
 42a:	83 70       	andi	r24, 0x03	; 3
 42c:	90 78       	andi	r25, 0x80	; 128
 42e:	99 23       	and	r25, r25
 430:	24 f4       	brge	.+8      	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
 432:	01 97       	sbiw	r24, 0x01	; 1
 434:	8c 6f       	ori	r24, 0xFC	; 252
 436:	9f 6f       	ori	r25, 0xFF	; 255
 438:	01 96       	adiw	r24, 0x01	; 1
 43a:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__data_end>
	switch (fndDigitState)
 43e:	81 30       	cpi	r24, 0x01	; 1
 440:	09 f4       	brne	.+2      	; 0x444 <__LOCK_REGION_LENGTH__+0x44>
 442:	40 c0       	rjmp	.+128    	; 0x4c4 <__LOCK_REGION_LENGTH__+0xc4>
 444:	38 f0       	brcs	.+14     	; 0x454 <__LOCK_REGION_LENGTH__+0x54>
 446:	82 30       	cpi	r24, 0x02	; 2
 448:	09 f4       	brne	.+2      	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
 44a:	6e c0       	rjmp	.+220    	; 0x528 <__LOCK_REGION_LENGTH__+0x128>
 44c:	83 30       	cpi	r24, 0x03	; 3
 44e:	09 f4       	brne	.+2      	; 0x452 <__LOCK_REGION_LENGTH__+0x52>
 450:	9b c0       	rjmp	.+310    	; 0x588 <__LOCK_REGION_LENGTH__+0x188>
 452:	c0 c0       	rjmp	.+384    	; 0x5d4 <__LOCK_REGION_LENGTH__+0x1d4>
	{
		case 0:
		PORTE |= ((1<<7)|(1<<6)|(1<<5)|(1<<4));
 454:	83 b1       	in	r24, 0x03	; 3
 456:	80 6f       	ori	r24, 0xF0	; 240
 458:	83 b9       	out	0x03, r24	; 3
		PORTF = fndFont[fndNum/1000%10];
 45a:	9a 01       	movw	r18, r20
 45c:	36 95       	lsr	r19
 45e:	27 95       	ror	r18
 460:	36 95       	lsr	r19
 462:	27 95       	ror	r18
 464:	36 95       	lsr	r19
 466:	27 95       	ror	r18
 468:	a5 ec       	ldi	r26, 0xC5	; 197
 46a:	b0 e2       	ldi	r27, 0x20	; 32
 46c:	4b d1       	rcall	.+662    	; 0x704 <__umulhisi3>
 46e:	ac 01       	movw	r20, r24
 470:	52 95       	swap	r21
 472:	42 95       	swap	r20
 474:	4f 70       	andi	r20, 0x0F	; 15
 476:	45 27       	eor	r20, r21
 478:	5f 70       	andi	r21, 0x0F	; 15
 47a:	45 27       	eor	r20, r21
 47c:	9a 01       	movw	r18, r20
 47e:	ad ec       	ldi	r26, 0xCD	; 205
 480:	bc ec       	ldi	r27, 0xCC	; 204
 482:	40 d1       	rcall	.+640    	; 0x704 <__umulhisi3>
 484:	96 95       	lsr	r25
 486:	87 95       	ror	r24
 488:	96 95       	lsr	r25
 48a:	87 95       	ror	r24
 48c:	96 95       	lsr	r25
 48e:	87 95       	ror	r24
 490:	9c 01       	movw	r18, r24
 492:	22 0f       	add	r18, r18
 494:	33 1f       	adc	r19, r19
 496:	88 0f       	add	r24, r24
 498:	99 1f       	adc	r25, r25
 49a:	88 0f       	add	r24, r24
 49c:	99 1f       	adc	r25, r25
 49e:	88 0f       	add	r24, r24
 4a0:	99 1f       	adc	r25, r25
 4a2:	82 0f       	add	r24, r18
 4a4:	93 1f       	adc	r25, r19
 4a6:	9a 01       	movw	r18, r20
 4a8:	28 1b       	sub	r18, r24
 4aa:	39 0b       	sbc	r19, r25
 4ac:	e1 e0       	ldi	r30, 0x01	; 1
 4ae:	f0 e0       	ldi	r31, 0x00	; 0
 4b0:	ec 0f       	add	r30, r28
 4b2:	fd 1f       	adc	r31, r29
 4b4:	e2 0f       	add	r30, r18
 4b6:	f3 1f       	adc	r31, r19
 4b8:	80 81       	ld	r24, Z
 4ba:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
		PORTE = ~(1<<4);
 4be:	8f ee       	ldi	r24, 0xEF	; 239
 4c0:	83 b9       	out	0x03, r24	; 3
		//_delay_ms(1);
		break;
 4c2:	88 c0       	rjmp	.+272    	; 0x5d4 <__LOCK_REGION_LENGTH__+0x1d4>
		
		case 1:
		PORTE |= ((1<<7)|(1<<6)|(1<<5)|(1<<4));
 4c4:	83 b1       	in	r24, 0x03	; 3
 4c6:	80 6f       	ori	r24, 0xF0	; 240
 4c8:	83 b9       	out	0x03, r24	; 3
		PORTF = fndFont[fndNum/100%10];
 4ca:	9a 01       	movw	r18, r20
 4cc:	36 95       	lsr	r19
 4ce:	27 95       	ror	r18
 4d0:	36 95       	lsr	r19
 4d2:	27 95       	ror	r18
 4d4:	ab e7       	ldi	r26, 0x7B	; 123
 4d6:	b4 e1       	ldi	r27, 0x14	; 20
 4d8:	15 d1       	rcall	.+554    	; 0x704 <__umulhisi3>
 4da:	ac 01       	movw	r20, r24
 4dc:	56 95       	lsr	r21
 4de:	47 95       	ror	r20
 4e0:	9a 01       	movw	r18, r20
 4e2:	ad ec       	ldi	r26, 0xCD	; 205
 4e4:	bc ec       	ldi	r27, 0xCC	; 204
 4e6:	0e d1       	rcall	.+540    	; 0x704 <__umulhisi3>
 4e8:	96 95       	lsr	r25
 4ea:	87 95       	ror	r24
 4ec:	96 95       	lsr	r25
 4ee:	87 95       	ror	r24
 4f0:	96 95       	lsr	r25
 4f2:	87 95       	ror	r24
 4f4:	9c 01       	movw	r18, r24
 4f6:	22 0f       	add	r18, r18
 4f8:	33 1f       	adc	r19, r19
 4fa:	88 0f       	add	r24, r24
 4fc:	99 1f       	adc	r25, r25
 4fe:	88 0f       	add	r24, r24
 500:	99 1f       	adc	r25, r25
 502:	88 0f       	add	r24, r24
 504:	99 1f       	adc	r25, r25
 506:	82 0f       	add	r24, r18
 508:	93 1f       	adc	r25, r19
 50a:	9a 01       	movw	r18, r20
 50c:	28 1b       	sub	r18, r24
 50e:	39 0b       	sbc	r19, r25
 510:	e1 e0       	ldi	r30, 0x01	; 1
 512:	f0 e0       	ldi	r31, 0x00	; 0
 514:	ec 0f       	add	r30, r28
 516:	fd 1f       	adc	r31, r29
 518:	e2 0f       	add	r30, r18
 51a:	f3 1f       	adc	r31, r19
 51c:	80 81       	ld	r24, Z
 51e:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
		PORTE = ~(1<<5);
 522:	8f ed       	ldi	r24, 0xDF	; 223
 524:	83 b9       	out	0x03, r24	; 3
		//_delay_ms(1);
		break;
 526:	56 c0       	rjmp	.+172    	; 0x5d4 <__LOCK_REGION_LENGTH__+0x1d4>
		case 2:
		PORTE |= ((1<<7)|(1<<6)|(1<<5)|(1<<4));
 528:	83 b1       	in	r24, 0x03	; 3
 52a:	80 6f       	ori	r24, 0xF0	; 240
		PORTF = fndFont[fndNum/10%10];
 52c:	83 b9       	out	0x03, r24	; 3
 52e:	9a 01       	movw	r18, r20
 530:	ad ec       	ldi	r26, 0xCD	; 205
 532:	bc ec       	ldi	r27, 0xCC	; 204
 534:	e7 d0       	rcall	.+462    	; 0x704 <__umulhisi3>
 536:	ac 01       	movw	r20, r24
 538:	56 95       	lsr	r21
 53a:	47 95       	ror	r20
 53c:	56 95       	lsr	r21
 53e:	47 95       	ror	r20
 540:	56 95       	lsr	r21
 542:	47 95       	ror	r20
 544:	9a 01       	movw	r18, r20
 546:	de d0       	rcall	.+444    	; 0x704 <__umulhisi3>
 548:	96 95       	lsr	r25
 54a:	87 95       	ror	r24
 54c:	96 95       	lsr	r25
 54e:	87 95       	ror	r24
 550:	96 95       	lsr	r25
 552:	87 95       	ror	r24
 554:	9c 01       	movw	r18, r24
 556:	22 0f       	add	r18, r18
 558:	33 1f       	adc	r19, r19
 55a:	88 0f       	add	r24, r24
 55c:	99 1f       	adc	r25, r25
 55e:	88 0f       	add	r24, r24
 560:	99 1f       	adc	r25, r25
 562:	88 0f       	add	r24, r24
 564:	99 1f       	adc	r25, r25
 566:	82 0f       	add	r24, r18
 568:	93 1f       	adc	r25, r19
 56a:	9a 01       	movw	r18, r20
 56c:	28 1b       	sub	r18, r24
 56e:	39 0b       	sbc	r19, r25
 570:	e1 e0       	ldi	r30, 0x01	; 1
 572:	f0 e0       	ldi	r31, 0x00	; 0
 574:	ec 0f       	add	r30, r28
 576:	fd 1f       	adc	r31, r29
 578:	e2 0f       	add	r30, r18
 57a:	f3 1f       	adc	r31, r19
 57c:	80 81       	ld	r24, Z
 57e:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
		PORTE = ~(1<<6);
 582:	8f eb       	ldi	r24, 0xBF	; 191
 584:	83 b9       	out	0x03, r24	; 3
		//_delay_ms(1);
		break;
 586:	26 c0       	rjmp	.+76     	; 0x5d4 <__LOCK_REGION_LENGTH__+0x1d4>
		case 3:
		PORTE |= ((1<<7)|(1<<6)|(1<<5)|(1<<4));
 588:	83 b1       	in	r24, 0x03	; 3
 58a:	80 6f       	ori	r24, 0xF0	; 240
		PORTF = fndFont[fndNum%10];
 58c:	83 b9       	out	0x03, r24	; 3
 58e:	9a 01       	movw	r18, r20
 590:	ad ec       	ldi	r26, 0xCD	; 205
 592:	bc ec       	ldi	r27, 0xCC	; 204
 594:	b7 d0       	rcall	.+366    	; 0x704 <__umulhisi3>
 596:	96 95       	lsr	r25
 598:	87 95       	ror	r24
 59a:	96 95       	lsr	r25
 59c:	87 95       	ror	r24
 59e:	96 95       	lsr	r25
 5a0:	87 95       	ror	r24
 5a2:	9c 01       	movw	r18, r24
 5a4:	22 0f       	add	r18, r18
 5a6:	33 1f       	adc	r19, r19
 5a8:	88 0f       	add	r24, r24
 5aa:	99 1f       	adc	r25, r25
 5ac:	88 0f       	add	r24, r24
 5ae:	99 1f       	adc	r25, r25
 5b0:	88 0f       	add	r24, r24
 5b2:	99 1f       	adc	r25, r25
 5b4:	82 0f       	add	r24, r18
 5b6:	93 1f       	adc	r25, r19
 5b8:	9a 01       	movw	r18, r20
 5ba:	28 1b       	sub	r18, r24
 5bc:	39 0b       	sbc	r19, r25
 5be:	e1 e0       	ldi	r30, 0x01	; 1
 5c0:	f0 e0       	ldi	r31, 0x00	; 0
 5c2:	ec 0f       	add	r30, r28
 5c4:	fd 1f       	adc	r31, r29
 5c6:	e2 0f       	add	r30, r18
 5c8:	f3 1f       	adc	r31, r19
 5ca:	80 81       	ld	r24, Z
 5cc:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
		PORTE = ~(1<<7);
 5d0:	8f e7       	ldi	r24, 0x7F	; 127
 5d2:	83 b9       	out	0x03, r24	; 3
		//_delay_ms(1);
		break;
	}
	
}
 5d4:	2a 96       	adiw	r28, 0x0a	; 10
 5d6:	0f b6       	in	r0, 0x3f	; 63
 5d8:	f8 94       	cli
 5da:	de bf       	out	0x3e, r29	; 62
 5dc:	0f be       	out	0x3f, r0	; 63
 5de:	cd bf       	out	0x3d, r28	; 61
 5e0:	df 91       	pop	r29
 5e2:	cf 91       	pop	r28
 5e4:	08 95       	ret

000005e6 <FND_setFndData>:

void FND_setFndData(uint16_t data){
	fndData = data;
 5e6:	90 93 0c 01 	sts	0x010C, r25	; 0x80010c <fndData+0x1>
 5ea:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <fndData>
 5ee:	08 95       	ret

000005f0 <FND_ISR_Process>:
}

void FND_ISR_Process(){
	FND_dispNum(fndData);
 5f0:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <fndData>
 5f4:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <fndData+0x1>
 5f8:	00 cf       	rjmp	.-512    	; 0x3fa <FND_dispNum>
 5fa:	08 95       	ret

000005fc <__vector_16>:
#include "ap/StopWatch/StopWatch.h"




ISR(TIMER0_OVF_vect){
 5fc:	1f 92       	push	r1
 5fe:	0f 92       	push	r0
 600:	0f b6       	in	r0, 0x3f	; 63
 602:	0f 92       	push	r0
 604:	11 24       	eor	r1, r1
 606:	0b b6       	in	r0, 0x3b	; 59
 608:	0f 92       	push	r0
 60a:	2f 93       	push	r18
 60c:	3f 93       	push	r19
 60e:	4f 93       	push	r20
 610:	5f 93       	push	r21
 612:	6f 93       	push	r22
 614:	7f 93       	push	r23
 616:	8f 93       	push	r24
 618:	9f 93       	push	r25
 61a:	af 93       	push	r26
 61c:	bf 93       	push	r27
 61e:	ef 93       	push	r30
 620:	ff 93       	push	r31
	FND_ISR_Process();
 622:	e6 df       	rcall	.-52     	; 0x5f0 <FND_ISR_Process>
	TCNT0 = 130;
 624:	82 e8       	ldi	r24, 0x82	; 130
 626:	82 bf       	out	0x32, r24	; 50
}
 628:	ff 91       	pop	r31
 62a:	ef 91       	pop	r30
 62c:	bf 91       	pop	r27
 62e:	af 91       	pop	r26
 630:	9f 91       	pop	r25
 632:	8f 91       	pop	r24
 634:	7f 91       	pop	r23
 636:	6f 91       	pop	r22
 638:	5f 91       	pop	r21
 63a:	4f 91       	pop	r20
 63c:	3f 91       	pop	r19
 63e:	2f 91       	pop	r18
 640:	0f 90       	pop	r0
 642:	0b be       	out	0x3b, r0	; 59
 644:	0f 90       	pop	r0
 646:	0f be       	out	0x3f, r0	; 63
 648:	0f 90       	pop	r0
 64a:	1f 90       	pop	r1
 64c:	18 95       	reti

0000064e <__vector_9>:

ISR(TIMER2_COMP_vect){
 64e:	1f 92       	push	r1
 650:	0f 92       	push	r0
 652:	0f b6       	in	r0, 0x3f	; 63
 654:	0f 92       	push	r0
 656:	11 24       	eor	r1, r1
 658:	0b b6       	in	r0, 0x3b	; 59
 65a:	0f 92       	push	r0
 65c:	2f 93       	push	r18
 65e:	3f 93       	push	r19
 660:	4f 93       	push	r20
 662:	5f 93       	push	r21
 664:	6f 93       	push	r22
 666:	7f 93       	push	r23
 668:	8f 93       	push	r24
 66a:	9f 93       	push	r25
 66c:	af 93       	push	r26
 66e:	bf 93       	push	r27
 670:	ef 93       	push	r30
 672:	ff 93       	push	r31
	StopWatch_incMilisec();
 674:	53 dd       	rcall	.-1370   	; 0x11c <StopWatch_incMilisec>
}
 676:	ff 91       	pop	r31
 678:	ef 91       	pop	r30
 67a:	bf 91       	pop	r27
 67c:	af 91       	pop	r26
 67e:	9f 91       	pop	r25
 680:	8f 91       	pop	r24
 682:	7f 91       	pop	r23
 684:	6f 91       	pop	r22
 686:	5f 91       	pop	r21
 688:	4f 91       	pop	r20
 68a:	3f 91       	pop	r19
 68c:	2f 91       	pop	r18
 68e:	0f 90       	pop	r0
 690:	0b be       	out	0x3b, r0	; 59
 692:	0f 90       	pop	r0
 694:	0f be       	out	0x3f, r0	; 63
 696:	0f 90       	pop	r0
 698:	1f 90       	pop	r1
 69a:	18 95       	reti

0000069c <main>:

int main(void)
{
	StopWatch_init();
 69c:	15 dd       	rcall	.-1494   	; 0xc8 <StopWatch_init>
	sei();

	
	while (1)
	{
		StopWatch_excute();
 69e:	78 94       	sei
 6a0:	6a de       	rcall	.-812    	; 0x376 <StopWatch_excute>
 6a2:	fe cf       	rjmp	.-4      	; 0x6a0 <main+0x4>

000006a4 <Gpio_initPin>:
	
}

void Gpio_initPin(volatile uint8_t *DDR, uint8_t dir, uint8_t pinNum){
	
	if(dir == OUTPUT){
 6a4:	61 11       	cpse	r22, r1
 6a6:	0c c0       	rjmp	.+24     	; 0x6c0 <Gpio_initPin+0x1c>
		*DDR |= (1<<pinNum);
 6a8:	fc 01       	movw	r30, r24
 6aa:	50 81       	ld	r21, Z
 6ac:	21 e0       	ldi	r18, 0x01	; 1
 6ae:	30 e0       	ldi	r19, 0x00	; 0
 6b0:	02 c0       	rjmp	.+4      	; 0x6b6 <Gpio_initPin+0x12>
 6b2:	22 0f       	add	r18, r18
 6b4:	33 1f       	adc	r19, r19
 6b6:	4a 95       	dec	r20
 6b8:	e2 f7       	brpl	.-8      	; 0x6b2 <Gpio_initPin+0xe>
 6ba:	25 2b       	or	r18, r21
 6bc:	20 83       	st	Z, r18
 6be:	08 95       	ret
	}
	else{
		*DDR &= ~(1<<pinNum); 
 6c0:	fc 01       	movw	r30, r24
 6c2:	50 81       	ld	r21, Z
 6c4:	21 e0       	ldi	r18, 0x01	; 1
 6c6:	30 e0       	ldi	r19, 0x00	; 0
 6c8:	02 c0       	rjmp	.+4      	; 0x6ce <Gpio_initPin+0x2a>
 6ca:	22 0f       	add	r18, r18
 6cc:	33 1f       	adc	r19, r19
 6ce:	4a 95       	dec	r20
 6d0:	e2 f7       	brpl	.-8      	; 0x6ca <Gpio_initPin+0x26>
 6d2:	20 95       	com	r18
 6d4:	25 23       	and	r18, r21
 6d6:	20 83       	st	Z, r18
 6d8:	08 95       	ret

000006da <TIM0_init>:
﻿#include "TIM.h"

void TIM0_init(){
	
	TCCR0 |= ((1<<CS02)|(0<<CS01)|(1<<CS00)); //128 preScaler
 6da:	83 b7       	in	r24, 0x33	; 51
 6dc:	85 60       	ori	r24, 0x05	; 5
 6de:	83 bf       	out	0x33, r24	; 51
	TIMSK |= (1<<TOIE0);					  //TIMSK Timer/counter
 6e0:	87 b7       	in	r24, 0x37	; 55
 6e2:	81 60       	ori	r24, 0x01	; 1
 6e4:	87 bf       	out	0x37, r24	; 55
	TCNT0=130;
 6e6:	82 e8       	ldi	r24, 0x82	; 130
 6e8:	82 bf       	out	0x32, r24	; 50
 6ea:	08 95       	ret

000006ec <TIM2_init>:
﻿#include "TIM2.h"

void TIM2_init(){
	
		//timer/counter 2 1/64 1ms period interrupt, ctc mode
		TCCR2 |= ((0<<CS22)|(1<<CS21)|(1<<CS20));	// 1/64 prescaler
 6ec:	85 b5       	in	r24, 0x25	; 37
 6ee:	83 60       	ori	r24, 0x03	; 3
 6f0:	85 bd       	out	0x25, r24	; 37
		TIMSK |= (1<<OCIE2);
 6f2:	87 b7       	in	r24, 0x37	; 55
 6f4:	80 68       	ori	r24, 0x80	; 128
 6f6:	87 bf       	out	0x37, r24	; 55
		
		//CTC MODE
		TCCR2 |= ((1<<WGM21) | (0<<WGM20));
 6f8:	85 b5       	in	r24, 0x25	; 37
 6fa:	88 60       	ori	r24, 0x08	; 8
 6fc:	85 bd       	out	0x25, r24	; 37
		OCR2 = 250-1;
 6fe:	89 ef       	ldi	r24, 0xF9	; 249
 700:	83 bd       	out	0x23, r24	; 35
 702:	08 95       	ret

00000704 <__umulhisi3>:
 704:	a2 9f       	mul	r26, r18
 706:	b0 01       	movw	r22, r0
 708:	b3 9f       	mul	r27, r19
 70a:	c0 01       	movw	r24, r0
 70c:	a3 9f       	mul	r26, r19
 70e:	70 0d       	add	r23, r0
 710:	81 1d       	adc	r24, r1
 712:	11 24       	eor	r1, r1
 714:	91 1d       	adc	r25, r1
 716:	b2 9f       	mul	r27, r18
 718:	70 0d       	add	r23, r0
 71a:	81 1d       	adc	r24, r1
 71c:	11 24       	eor	r1, r1
 71e:	91 1d       	adc	r25, r1
 720:	08 95       	ret

00000722 <_exit>:
 722:	f8 94       	cli

00000724 <__stop_program>:
 724:	ff cf       	rjmp	.-2      	; 0x724 <__stop_program>
