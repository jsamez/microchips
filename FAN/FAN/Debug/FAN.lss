
FAN.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000096  00800100  00001486  0000151a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001486  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000a9  00800196  00800196  000015b0  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000015b0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000160c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000340  00000000  00000000  0000164c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002ccf  00000000  00000000  0000198c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000146c  00000000  00000000  0000465b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000019f4  00000000  00000000  00005ac7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000074c  00000000  00000000  000074bc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000b23  00000000  00000000  00007c08  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001073  00000000  00000000  0000872b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000290  00000000  00000000  0000979e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
       2:	00 00       	nop
       4:	61 c0       	rjmp	.+194    	; 0xc8 <__bad_interrupt>
       6:	00 00       	nop
       8:	5f c0       	rjmp	.+190    	; 0xc8 <__bad_interrupt>
       a:	00 00       	nop
       c:	5d c0       	rjmp	.+186    	; 0xc8 <__bad_interrupt>
       e:	00 00       	nop
      10:	5b c0       	rjmp	.+182    	; 0xc8 <__bad_interrupt>
      12:	00 00       	nop
      14:	59 c0       	rjmp	.+178    	; 0xc8 <__bad_interrupt>
      16:	00 00       	nop
      18:	57 c0       	rjmp	.+174    	; 0xc8 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	55 c0       	rjmp	.+170    	; 0xc8 <__bad_interrupt>
      1e:	00 00       	nop
      20:	53 c0       	rjmp	.+166    	; 0xc8 <__bad_interrupt>
      22:	00 00       	nop
      24:	cf c5       	rjmp	.+2974   	; 0xbc4 <__vector_9>
      26:	00 00       	nop
      28:	4f c0       	rjmp	.+158    	; 0xc8 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	4d c0       	rjmp	.+154    	; 0xc8 <__bad_interrupt>
      2e:	00 00       	nop
      30:	4b c0       	rjmp	.+150    	; 0xc8 <__bad_interrupt>
      32:	00 00       	nop
      34:	49 c0       	rjmp	.+146    	; 0xc8 <__bad_interrupt>
      36:	00 00       	nop
      38:	47 c0       	rjmp	.+142    	; 0xc8 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	45 c0       	rjmp	.+138    	; 0xc8 <__bad_interrupt>
      3e:	00 00       	nop
      40:	71 c5       	rjmp	.+2786   	; 0xb24 <__vector_16>
      42:	00 00       	nop
      44:	41 c0       	rjmp	.+130    	; 0xc8 <__bad_interrupt>
      46:	00 00       	nop
      48:	96 c5       	rjmp	.+2860   	; 0xb76 <__vector_18>
      4a:	00 00       	nop
      4c:	3d c0       	rjmp	.+122    	; 0xc8 <__bad_interrupt>
      4e:	00 00       	nop
      50:	3b c0       	rjmp	.+118    	; 0xc8 <__bad_interrupt>
      52:	00 00       	nop
      54:	39 c0       	rjmp	.+114    	; 0xc8 <__bad_interrupt>
      56:	00 00       	nop
      58:	37 c0       	rjmp	.+110    	; 0xc8 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	35 c0       	rjmp	.+106    	; 0xc8 <__bad_interrupt>
      5e:	00 00       	nop
      60:	33 c0       	rjmp	.+102    	; 0xc8 <__bad_interrupt>
      62:	00 00       	nop
      64:	31 c0       	rjmp	.+98     	; 0xc8 <__bad_interrupt>
      66:	00 00       	nop
      68:	2f c0       	rjmp	.+94     	; 0xc8 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	2d c0       	rjmp	.+90     	; 0xc8 <__bad_interrupt>
      6e:	00 00       	nop
      70:	2b c0       	rjmp	.+86     	; 0xc8 <__bad_interrupt>
      72:	00 00       	nop
      74:	29 c0       	rjmp	.+82     	; 0xc8 <__bad_interrupt>
      76:	00 00       	nop
      78:	27 c0       	rjmp	.+78     	; 0xc8 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	25 c0       	rjmp	.+74     	; 0xc8 <__bad_interrupt>
      7e:	00 00       	nop
      80:	23 c0       	rjmp	.+70     	; 0xc8 <__bad_interrupt>
      82:	00 00       	nop
      84:	21 c0       	rjmp	.+66     	; 0xc8 <__bad_interrupt>
      86:	00 00       	nop
      88:	1f c0       	rjmp	.+62     	; 0xc8 <__bad_interrupt>
	...

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d0 e1       	ldi	r29, 0x10	; 16
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	11 e0       	ldi	r17, 0x01	; 1
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	e6 e8       	ldi	r30, 0x86	; 134
      a0:	f4 e1       	ldi	r31, 0x14	; 20
      a2:	00 e0       	ldi	r16, 0x00	; 0
      a4:	0b bf       	out	0x3b, r16	; 59
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
      a8:	07 90       	elpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	a6 39       	cpi	r26, 0x96	; 150
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
      b2:	22 e0       	ldi	r18, 0x02	; 2
      b4:	a6 e9       	ldi	r26, 0x96	; 150
      b6:	b1 e0       	ldi	r27, 0x01	; 1
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	af 33       	cpi	r26, 0x3F	; 63
      be:	b2 07       	cpc	r27, r18
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
      c2:	a8 d5       	rcall	.+2896   	; 0xc14 <main>
      c4:	0c 94 41 0a 	jmp	0x1482	; 0x1482 <_exit>

000000c8 <__bad_interrupt>:
      c8:	9b cf       	rjmp	.-202    	; 0x0 <__vectors>

000000ca <Fan_init>:
uint8_t fanMode;
uint8_t fanState;

void Fan_init()
{
	Buzzer_init();
      ca:	4d d3       	rcall	.+1690   	; 0x766 <Buzzer_init>
	UART0_init();
      cc:	21 d6       	rcall	.+3138   	; 0xd10 <UART0_init>
	TIM0_init();
      ce:	0b d6       	rcall	.+3094   	; 0xce6 <TIM0_init>
	TIM2_init();
      d0:	13 d6       	rcall	.+3110   	; 0xcf8 <TIM2_init>
      d2:	d3 d4       	rcall	.+2470   	; 0xa7a <LCD_init>
	LCD_init();
      d4:	20 e0       	ldi	r18, 0x00	; 0
      d6:	49 e3       	ldi	r20, 0x39	; 57
	Button_init(&btnMode, &DDRA, &PINA, 0); // 1번 버튼
      d8:	50 e0       	ldi	r21, 0x00	; 0
      da:	6a e3       	ldi	r22, 0x3A	; 58
      dc:	70 e0       	ldi	r23, 0x00	; 0
      de:	8a eb       	ldi	r24, 0xBA	; 186
      e0:	91 e0       	ldi	r25, 0x01	; 1
      e2:	09 d3       	rcall	.+1554   	; 0x6f6 <Button_init>
      e4:	21 e0       	ldi	r18, 0x01	; 1
      e6:	49 e3       	ldi	r20, 0x39	; 57
	Button_init(&btnFanState, &DDRA, &PINA, 1); // 2번 버튼
      e8:	50 e0       	ldi	r21, 0x00	; 0
      ea:	6a e3       	ldi	r22, 0x3A	; 58
      ec:	70 e0       	ldi	r23, 0x00	; 0
      ee:	84 eb       	ldi	r24, 0xB4	; 180
      f0:	91 e0       	ldi	r25, 0x01	; 1
      f2:	01 d3       	rcall	.+1538   	; 0x6f6 <Button_init>
      f4:	8f ef       	ldi	r24, 0xFF	; 255
      f6:	81 bb       	out	0x11, r24	; 17
	
	DDRD = 0xff;
      f8:	10 92 b2 01 	sts	0x01B2, r1	; 0x8001b2 <fanState>
	fanState = MANUAL;
      fc:	10 92 b3 01 	sts	0x01B3, r1	; 0x8001b3 <fanMode>
	fanMode = OFF;
     100:	08 95       	ret

00000102 <Fan_StateEventCheck>:
     102:	80 91 b2 01 	lds	r24, 0x01B2	; 0x8001b2 <fanState>
}

void Fan_StateEventCheck()
{
	
	switch (fanState)
     106:	88 23       	and	r24, r24
     108:	19 f0       	breq	.+6      	; 0x110 <Fan_StateEventCheck+0xe>
     10a:	81 30       	cpi	r24, 0x01	; 1
     10c:	61 f0       	breq	.+24     	; 0x126 <Fan_StateEventCheck+0x24>
     10e:	08 95       	ret
	{
		case MANUAL:
		if(button_getstate(&btnFanState) == ACT_RELEASED)
     110:	84 eb       	ldi	r24, 0xB4	; 180
     112:	91 e0       	ldi	r25, 0x01	; 1
     114:	fd d2       	rcall	.+1530   	; 0x710 <button_getstate>
     116:	81 30       	cpi	r24, 0x01	; 1
     118:	79 f4       	brne	.+30     	; 0x138 <Fan_StateEventCheck+0x36>
		{
			fanState = AUTO;
     11a:	80 93 b2 01 	sts	0x01B2, r24	; 0x8001b2 <fanState>
			fanMode = NATURAL;
     11e:	84 e0       	ldi	r24, 0x04	; 4
     120:	80 93 b3 01 	sts	0x01B3, r24	; 0x8001b3 <fanMode>
     124:	08 95       	ret
		}
		break;
		
		case AUTO:
		if(button_getstate(&btnFanState) == ACT_RELEASED)
     126:	84 eb       	ldi	r24, 0xB4	; 180
     128:	91 e0       	ldi	r25, 0x01	; 1
     12a:	f2 d2       	rcall	.+1508   	; 0x710 <button_getstate>
     12c:	81 30       	cpi	r24, 0x01	; 1
     12e:	21 f4       	brne	.+8      	; 0x138 <Fan_StateEventCheck+0x36>
		{
			fanState = MANUAL;
     130:	10 92 b2 01 	sts	0x01B2, r1	; 0x8001b2 <fanState>
			fanMode = OFF;
     134:	10 92 b3 01 	sts	0x01B3, r1	; 0x8001b3 <fanMode>
     138:	08 95       	ret

0000013a <Fan_ManualModeCheck>:
	}
}

void Fan_ManualModeCheck()
{
	switch (fanMode) {
     13a:	80 91 b3 01 	lds	r24, 0x01B3	; 0x8001b3 <fanMode>
     13e:	81 30       	cpi	r24, 0x01	; 1
     140:	91 f0       	breq	.+36     	; 0x166 <Fan_ManualModeCheck+0x2c>
     142:	28 f0       	brcs	.+10     	; 0x14e <Fan_ManualModeCheck+0x14>
     144:	82 30       	cpi	r24, 0x02	; 2
     146:	d9 f0       	breq	.+54     	; 0x17e <Fan_ManualModeCheck+0x44>
     148:	83 30       	cpi	r24, 0x03	; 3
     14a:	29 f1       	breq	.+74     	; 0x196 <Fan_ManualModeCheck+0x5c>
     14c:	08 95       	ret
		case OFF:
		if(button_getstate(&btnMode) == ACT_RELEASED)
     14e:	8a eb       	ldi	r24, 0xBA	; 186
     150:	91 e0       	ldi	r25, 0x01	; 1
     152:	de d2       	rcall	.+1468   	; 0x710 <button_getstate>
     154:	81 30       	cpi	r24, 0x01	; 1
     156:	49 f5       	brne	.+82     	; 0x1aa <Fan_ManualModeCheck+0x70>
		{
			UART0_sendString("Fan Mode: LOW\n");
     158:	8b e0       	ldi	r24, 0x0B	; 11
     15a:	91 e0       	ldi	r25, 0x01	; 1
     15c:	09 d6       	rcall	.+3090   	; 0xd70 <UART0_sendString>
			fanMode = LOW;
     15e:	81 e0       	ldi	r24, 0x01	; 1
     160:	80 93 b3 01 	sts	0x01B3, r24	; 0x8001b3 <fanMode>
     164:	08 95       	ret
		}
		break;
		
		case LOW:
		if (button_getstate(&btnMode) == ACT_RELEASED)
     166:	8a eb       	ldi	r24, 0xBA	; 186
     168:	91 e0       	ldi	r25, 0x01	; 1
     16a:	d2 d2       	rcall	.+1444   	; 0x710 <button_getstate>
     16c:	81 30       	cpi	r24, 0x01	; 1
     16e:	e9 f4       	brne	.+58     	; 0x1aa <Fan_ManualModeCheck+0x70>
		{
			UART0_sendString("Fan Mode: MIDLE\n");
     170:	8a e1       	ldi	r24, 0x1A	; 26
     172:	91 e0       	ldi	r25, 0x01	; 1
     174:	fd d5       	rcall	.+3066   	; 0xd70 <UART0_sendString>
     176:	82 e0       	ldi	r24, 0x02	; 2
			fanMode = MIDLE;
     178:	80 93 b3 01 	sts	0x01B3, r24	; 0x8001b3 <fanMode>
     17c:	08 95       	ret
		}
		break;
		
		case MIDLE:
		if(button_getstate(&btnMode) == ACT_RELEASED)
     17e:	8a eb       	ldi	r24, 0xBA	; 186
     180:	91 e0       	ldi	r25, 0x01	; 1
     182:	c6 d2       	rcall	.+1420   	; 0x710 <button_getstate>
     184:	81 30       	cpi	r24, 0x01	; 1
     186:	89 f4       	brne	.+34     	; 0x1aa <Fan_ManualModeCheck+0x70>
		{
			UART0_sendString("Fan Mode: HIGH\n");
     188:	8b e2       	ldi	r24, 0x2B	; 43
     18a:	91 e0       	ldi	r25, 0x01	; 1
     18c:	f1 d5       	rcall	.+3042   	; 0xd70 <UART0_sendString>
     18e:	83 e0       	ldi	r24, 0x03	; 3
			fanMode = HIGH;
     190:	80 93 b3 01 	sts	0x01B3, r24	; 0x8001b3 <fanMode>
     194:	08 95       	ret
		}
		break;
		
		case HIGH:
		if(button_getstate(&btnMode) == ACT_RELEASED)
     196:	8a eb       	ldi	r24, 0xBA	; 186
     198:	91 e0       	ldi	r25, 0x01	; 1
     19a:	ba d2       	rcall	.+1396   	; 0x710 <button_getstate>
     19c:	81 30       	cpi	r24, 0x01	; 1
     19e:	29 f4       	brne	.+10     	; 0x1aa <Fan_ManualModeCheck+0x70>
		{
			UART0_sendString("Fan Mode: OFF\n");
     1a0:	8b e3       	ldi	r24, 0x3B	; 59
     1a2:	91 e0       	ldi	r25, 0x01	; 1
     1a4:	e5 d5       	rcall	.+3018   	; 0xd70 <UART0_sendString>
     1a6:	10 92 b3 01 	sts	0x01B3, r1	; 0x8001b3 <fanMode>
			fanMode = OFF;
     1aa:	08 95       	ret

000001ac <Fan_AUTOModeCheck>:
     1ac:	80 91 b3 01 	lds	r24, 0x01B3	; 0x8001b3 <fanMode>
	}
}

void Fan_AUTOModeCheck()
{
	switch (fanMode) {
     1b0:	84 30       	cpi	r24, 0x04	; 4
     1b2:	19 f0       	breq	.+6      	; 0x1ba <Fan_AUTOModeCheck+0xe>
     1b4:	85 30       	cpi	r24, 0x05	; 5
     1b6:	69 f0       	breq	.+26     	; 0x1d2 <Fan_AUTOModeCheck+0x26>
     1b8:	08 95       	ret
		case NATURAL:
		if(button_getstate(&btnMode) == ACT_RELEASED)
     1ba:	8a eb       	ldi	r24, 0xBA	; 186
     1bc:	91 e0       	ldi	r25, 0x01	; 1
     1be:	a8 d2       	rcall	.+1360   	; 0x710 <button_getstate>
     1c0:	81 30       	cpi	r24, 0x01	; 1
     1c2:	91 f4       	brne	.+36     	; 0x1e8 <Fan_AUTOModeCheck+0x3c>
		{
			UART0_sendString("Fan Mode: SLEEP\n");
     1c4:	8a e4       	ldi	r24, 0x4A	; 74
     1c6:	91 e0       	ldi	r25, 0x01	; 1
     1c8:	d3 d5       	rcall	.+2982   	; 0xd70 <UART0_sendString>
			fanMode = SLEEP;
     1ca:	85 e0       	ldi	r24, 0x05	; 5
     1cc:	80 93 b3 01 	sts	0x01B3, r24	; 0x8001b3 <fanMode>
     1d0:	08 95       	ret
		}
		break;
		
		case SLEEP:
		if (button_getstate(&btnMode) == ACT_RELEASED)
     1d2:	8a eb       	ldi	r24, 0xBA	; 186
     1d4:	91 e0       	ldi	r25, 0x01	; 1
     1d6:	9c d2       	rcall	.+1336   	; 0x710 <button_getstate>
     1d8:	81 30       	cpi	r24, 0x01	; 1
     1da:	31 f4       	brne	.+12     	; 0x1e8 <Fan_AUTOModeCheck+0x3c>
		{
			UART0_sendString("Fan Mode: NATURAL\n");
     1dc:	8b e5       	ldi	r24, 0x5B	; 91
     1de:	91 e0       	ldi	r25, 0x01	; 1
     1e0:	c7 d5       	rcall	.+2958   	; 0xd70 <UART0_sendString>
     1e2:	84 e0       	ldi	r24, 0x04	; 4
			fanMode = NATURAL;
     1e4:	80 93 b3 01 	sts	0x01B3, r24	; 0x8001b3 <fanMode>
     1e8:	08 95       	ret

000001ea <FAN_ManualMode>:
     1ea:	cf 93       	push	r28
		break;
	}
}

void FAN_ManualMode()
{
     1ec:	df 93       	push	r29
	if(UART0_getRxFlag())
     1ee:	d8 d5       	rcall	.+2992   	; 0xda0 <UART0_getRxFlag>
     1f0:	88 23       	and	r24, r24
     1f2:	b9 f1       	breq	.+110    	; 0x262 <FAN_ManualMode+0x78>
	{
		UART0_clearRxFlag();
     1f4:	d2 d5       	rcall	.+2980   	; 0xd9a <UART0_clearRxFlag>
		uint8_t* RxString = UART0_readRxBuff();
     1f6:	d7 d5       	rcall	.+2990   	; 0xda6 <UART0_readRxBuff>
     1f8:	c8 2f       	mov	r28, r24
     1fa:	d9 2f       	mov	r29, r25
		
		
		if(!strcmp((char *)RxString,"Fan Mode: OFF\n"))
     1fc:	6b e3       	ldi	r22, 0x3B	; 59
     1fe:	71 e0       	ldi	r23, 0x01	; 1
     200:	49 d6       	rcall	.+3218   	; 0xe94 <strcmp>
     202:	89 2b       	or	r24, r25
     204:	19 f4       	brne	.+6      	; 0x20c <FAN_ManualMode+0x22>
     206:	10 92 b3 01 	sts	0x01B3, r1	; 0x8001b3 <fanMode>
		{
			fanMode = OFF;
     20a:	20 c0       	rjmp	.+64     	; 0x24c <FAN_ManualMode+0x62>
     20c:	6b e0       	ldi	r22, 0x0B	; 11
		}
		else if(!strcmp((char *)RxString,"Fan Mode: LOW\n"))
     20e:	71 e0       	ldi	r23, 0x01	; 1
     210:	8c 2f       	mov	r24, r28
     212:	9d 2f       	mov	r25, r29
     214:	3f d6       	rcall	.+3198   	; 0xe94 <strcmp>
     216:	89 2b       	or	r24, r25
     218:	21 f4       	brne	.+8      	; 0x222 <FAN_ManualMode+0x38>
     21a:	81 e0       	ldi	r24, 0x01	; 1
		{
			fanState = LOW;
     21c:	80 93 b2 01 	sts	0x01B2, r24	; 0x8001b2 <fanState>
     220:	15 c0       	rjmp	.+42     	; 0x24c <FAN_ManualMode+0x62>
		}
		else if(!strcmp((char *)RxString,"Fan Mode: MIDLE\n"))
     222:	6a e1       	ldi	r22, 0x1A	; 26
     224:	71 e0       	ldi	r23, 0x01	; 1
     226:	8c 2f       	mov	r24, r28
     228:	9d 2f       	mov	r25, r29
     22a:	34 d6       	rcall	.+3176   	; 0xe94 <strcmp>
     22c:	89 2b       	or	r24, r25
     22e:	21 f4       	brne	.+8      	; 0x238 <FAN_ManualMode+0x4e>
     230:	82 e0       	ldi	r24, 0x02	; 2
		{
			fanState = MIDLE;
     232:	80 93 b2 01 	sts	0x01B2, r24	; 0x8001b2 <fanState>
     236:	0a c0       	rjmp	.+20     	; 0x24c <FAN_ManualMode+0x62>
		}
		else if(!strcmp((char *)RxString,"Fan Mode: HIGH\n"))
     238:	6b e2       	ldi	r22, 0x2B	; 43
     23a:	71 e0       	ldi	r23, 0x01	; 1
     23c:	8c 2f       	mov	r24, r28
     23e:	9d 2f       	mov	r25, r29
     240:	29 d6       	rcall	.+3154   	; 0xe94 <strcmp>
     242:	89 2b       	or	r24, r25
     244:	19 f4       	brne	.+6      	; 0x24c <FAN_ManualMode+0x62>
     246:	83 e0       	ldi	r24, 0x03	; 3
		{
			fanState = HIGH;
     248:	80 93 b2 01 	sts	0x01B2, r24	; 0x8001b2 <fanState>
		}
		printf("%s", (char *)RxString);
     24c:	df 93       	push	r29
     24e:	cf 93       	push	r28
     250:	8e e6       	ldi	r24, 0x6E	; 110
     252:	91 e0       	ldi	r25, 0x01	; 1
     254:	9f 93       	push	r25
     256:	8f 93       	push	r24
     258:	26 d6       	rcall	.+3148   	; 0xea6 <printf>
     25a:	0f 90       	pop	r0
     25c:	0f 90       	pop	r0
     25e:	0f 90       	pop	r0
     260:	0f 90       	pop	r0
     262:	df 91       	pop	r29
	}
}
     264:	cf 91       	pop	r28
     266:	08 95       	ret

00000268 <FAN_AUTOMode>:
     268:	cf 93       	push	r28

void FAN_AUTOMode()
{
     26a:	df 93       	push	r29
	if(UART0_getRxFlag())
     26c:	99 d5       	rcall	.+2866   	; 0xda0 <UART0_getRxFlag>
     26e:	88 23       	and	r24, r24
     270:	21 f1       	breq	.+72     	; 0x2ba <FAN_AUTOMode+0x52>
	{
		UART0_clearRxFlag();
     272:	93 d5       	rcall	.+2854   	; 0xd9a <UART0_clearRxFlag>
		uint8_t* RXstring = UART0_readRxBuff();
     274:	98 d5       	rcall	.+2864   	; 0xda6 <UART0_readRxBuff>
     276:	d8 2f       	mov	r29, r24
     278:	c9 2f       	mov	r28, r25
     27a:	9f 93       	push	r25
		printf("%s", (char *)RXstring);
     27c:	8f 93       	push	r24
     27e:	8e e6       	ldi	r24, 0x6E	; 110
     280:	91 e0       	ldi	r25, 0x01	; 1
     282:	9f 93       	push	r25
     284:	8f 93       	push	r24
     286:	0f d6       	rcall	.+3102   	; 0xea6 <printf>
     288:	6a e4       	ldi	r22, 0x4A	; 74
		
		if(!strcmp((char *)RXstring,"Fan Mode: SLEEP\n"))
     28a:	71 e0       	ldi	r23, 0x01	; 1
     28c:	8d 2f       	mov	r24, r29
     28e:	9c 2f       	mov	r25, r28
     290:	01 d6       	rcall	.+3074   	; 0xe94 <strcmp>
     292:	0f 90       	pop	r0
     294:	0f 90       	pop	r0
     296:	0f 90       	pop	r0
     298:	0f 90       	pop	r0
     29a:	89 2b       	or	r24, r25
     29c:	21 f4       	brne	.+8      	; 0x2a6 <FAN_AUTOMode+0x3e>
     29e:	85 e0       	ldi	r24, 0x05	; 5
		{
			fanMode = SLEEP;
     2a0:	80 93 b3 01 	sts	0x01B3, r24	; 0x8001b3 <fanMode>
     2a4:	0a c0       	rjmp	.+20     	; 0x2ba <FAN_AUTOMode+0x52>
		}
		else if(!strcmp((char *)RXstring,"Fan Mode: NATURAL\n"))
     2a6:	6b e5       	ldi	r22, 0x5B	; 91
     2a8:	71 e0       	ldi	r23, 0x01	; 1
     2aa:	8d 2f       	mov	r24, r29
     2ac:	9c 2f       	mov	r25, r28
     2ae:	f2 d5       	rcall	.+3044   	; 0xe94 <strcmp>
     2b0:	89 2b       	or	r24, r25
     2b2:	19 f4       	brne	.+6      	; 0x2ba <FAN_AUTOMode+0x52>
     2b4:	84 e0       	ldi	r24, 0x04	; 4
		{
			fanMode = NATURAL;
     2b6:	80 93 b3 01 	sts	0x01B3, r24	; 0x8001b3 <fanMode>
     2ba:	df 91       	pop	r29
		}
	}
}
     2bc:	cf 91       	pop	r28
     2be:	08 95       	ret

000002c0 <Fan_OFFMode>:
     2c0:	80 e0       	ldi	r24, 0x00	; 0

void Fan_OFFMode()
{
	Buzzer_makeHertz(0);
     2c2:	90 e0       	ldi	r25, 0x00	; 0
     2c4:	6d d2       	rcall	.+1242   	; 0x7a0 <Buzzer_makeHertz>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     2c6:	8f e3       	ldi	r24, 0x3F	; 63
     2c8:	9c e9       	ldi	r25, 0x9C	; 156
     2ca:	01 97       	sbiw	r24, 0x01	; 1
     2cc:	f1 f7       	brne	.-4      	; 0x2ca <Fan_OFFMode+0xa>
     2ce:	00 c0       	rjmp	.+0      	; 0x2d0 <Fan_OFFMode+0x10>
     2d0:	00 00       	nop
	_delay_ms(10);
	TCNT3 = 0;
     2d2:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     2d6:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
     2da:	08 95       	ret

000002dc <Fan_LOWMode>:
}

void Fan_LOWMode()
{
	
	Buzzer_makeHertz(450);
     2dc:	82 ec       	ldi	r24, 0xC2	; 194
     2de:	91 e0       	ldi	r25, 0x01	; 1
     2e0:	5f d2       	rcall	.+1214   	; 0x7a0 <Buzzer_makeHertz>
     2e2:	8f e3       	ldi	r24, 0x3F	; 63
     2e4:	9c e9       	ldi	r25, 0x9C	; 156
     2e6:	01 97       	sbiw	r24, 0x01	; 1
     2e8:	f1 f7       	brne	.-4      	; 0x2e6 <Fan_LOWMode+0xa>
     2ea:	00 c0       	rjmp	.+0      	; 0x2ec <Fan_LOWMode+0x10>
     2ec:	00 00       	nop
	_delay_ms(10);
	TCNT3 = 0;
     2ee:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     2f2:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
     2f6:	08 95       	ret

000002f8 <Fan_MIDLEMode>:
}

void Fan_MIDLEMode()
{
	
	Buzzer_makeHertz(900);
     2f8:	84 e8       	ldi	r24, 0x84	; 132
     2fa:	93 e0       	ldi	r25, 0x03	; 3
     2fc:	51 d2       	rcall	.+1186   	; 0x7a0 <Buzzer_makeHertz>
     2fe:	8f e3       	ldi	r24, 0x3F	; 63
     300:	9c e9       	ldi	r25, 0x9C	; 156
     302:	01 97       	sbiw	r24, 0x01	; 1
     304:	f1 f7       	brne	.-4      	; 0x302 <Fan_MIDLEMode+0xa>
     306:	00 c0       	rjmp	.+0      	; 0x308 <Fan_MIDLEMode+0x10>
     308:	00 00       	nop
	_delay_ms(10);
	TCNT3 = 0;
     30a:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     30e:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
     312:	08 95       	ret

00000314 <Fan_HIGHMode>:
}

void Fan_HIGHMode()
{
	Buzzer_makeHertz(1350);
     314:	86 e4       	ldi	r24, 0x46	; 70
     316:	95 e0       	ldi	r25, 0x05	; 5
     318:	43 d2       	rcall	.+1158   	; 0x7a0 <Buzzer_makeHertz>
     31a:	8f e3       	ldi	r24, 0x3F	; 63
     31c:	9c e9       	ldi	r25, 0x9C	; 156
     31e:	01 97       	sbiw	r24, 0x01	; 1
     320:	f1 f7       	brne	.-4      	; 0x31e <Fan_HIGHMode+0xa>
     322:	00 c0       	rjmp	.+0      	; 0x324 <Fan_HIGHMode+0x10>
     324:	00 00       	nop
	_delay_ms(10);
	TCNT3 = 0;
     326:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     32a:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
     32e:	08 95       	ret

00000330 <Fan_AutoTimer>:
	{
		MILISEC = 0;
		return 1;
	}
	return 0;
}
     330:	80 e0       	ldi	r24, 0x00	; 0
     332:	08 95       	ret

00000334 <Fan_SLEEPMode>:
}

void Fan_SLEEPMode()
{

	switch (fanMode)
     334:	80 91 b3 01 	lds	r24, 0x01B3	; 0x8001b3 <fanMode>
     338:	81 30       	cpi	r24, 0x01	; 1
     33a:	21 f0       	breq	.+8      	; 0x344 <Fan_SLEEPMode+0x10>
     33c:	80 f0       	brcs	.+32     	; 0x35e <Fan_SLEEPMode+0x2a>
     33e:	82 30       	cpi	r24, 0x02	; 2
     340:	41 f0       	breq	.+16     	; 0x352 <Fan_SLEEPMode+0x1e>
     342:	08 95       	ret
	{
		case  LOW:
		if(Fan_AutoTimer())
     344:	f5 df       	rcall	.-22     	; 0x330 <Fan_AutoTimer>
     346:	88 23       	and	r24, r24
     348:	81 f0       	breq	.+32     	; 0x36a <Fan_SLEEPMode+0x36>
		{
			fanMode = MIDLE;
     34a:	82 e0       	ldi	r24, 0x02	; 2
     34c:	80 93 b3 01 	sts	0x01B3, r24	; 0x8001b3 <fanMode>
		}
		break;
		
		case MIDLE:
		if(Fan_AutoTimer())
     350:	08 95       	ret
     352:	ee df       	rcall	.-36     	; 0x330 <Fan_AutoTimer>
     354:	88 23       	and	r24, r24
     356:	49 f0       	breq	.+18     	; 0x36a <Fan_SLEEPMode+0x36>
		{
			fanMode = OFF;
     358:	10 92 b3 01 	sts	0x01B3, r1	; 0x8001b3 <fanMode>
		}
		break;
		
		case OFF:
		if(Fan_AutoTimer())
     35c:	08 95       	ret
     35e:	e8 df       	rcall	.-48     	; 0x330 <Fan_AutoTimer>
     360:	88 23       	and	r24, r24
     362:	19 f0       	breq	.+6      	; 0x36a <Fan_SLEEPMode+0x36>
		{
			fanMode = LOW;
     364:	81 e0       	ldi	r24, 0x01	; 1
     366:	80 93 b3 01 	sts	0x01B3, r24	; 0x8001b3 <fanMode>
     36a:	08 95       	ret

0000036c <Fan_NATURALMode>:
	
}
void Fan_NATURALMode()
{

	switch (fanMode)
     36c:	80 91 b3 01 	lds	r24, 0x01B3	; 0x8001b3 <fanMode>
     370:	82 30       	cpi	r24, 0x02	; 2
     372:	99 f0       	breq	.+38     	; 0x39a <Fan_NATURALMode+0x2e>
     374:	83 30       	cpi	r24, 0x03	; 3
     376:	19 f0       	breq	.+6      	; 0x37e <Fan_NATURALMode+0x12>
     378:	81 30       	cpi	r24, 0x01	; 1
     37a:	a9 f4       	brne	.+42     	; 0x3a6 <Fan_NATURALMode+0x3a>
     37c:	07 c0       	rjmp	.+14     	; 0x38c <Fan_NATURALMode+0x20>
	{
		case HIGH:
		if(Fan_AutoTimer())
     37e:	d8 df       	rcall	.-80     	; 0x330 <Fan_AutoTimer>
     380:	88 23       	and	r24, r24
     382:	89 f0       	breq	.+34     	; 0x3a6 <Fan_NATURALMode+0x3a>
		{
			fanMode = LOW;
     384:	81 e0       	ldi	r24, 0x01	; 1
     386:	80 93 b3 01 	sts	0x01B3, r24	; 0x8001b3 <fanMode>
		}
		break;
	
		case LOW:
		if(Fan_AutoTimer())
     38a:	08 95       	ret
     38c:	d1 df       	rcall	.-94     	; 0x330 <Fan_AutoTimer>
     38e:	88 23       	and	r24, r24
     390:	51 f0       	breq	.+20     	; 0x3a6 <Fan_NATURALMode+0x3a>
		{
			fanMode = MIDLE;
     392:	82 e0       	ldi	r24, 0x02	; 2
     394:	80 93 b3 01 	sts	0x01B3, r24	; 0x8001b3 <fanMode>
		}
		break;
		
		case MIDLE:
		if(Fan_AutoTimer())
     398:	08 95       	ret
     39a:	ca df       	rcall	.-108    	; 0x330 <Fan_AutoTimer>
     39c:	88 23       	and	r24, r24
     39e:	19 f0       	breq	.+6      	; 0x3a6 <Fan_NATURALMode+0x3a>
		{
			fanMode = HIGH;
     3a0:	83 e0       	ldi	r24, 0x03	; 3
     3a2:	80 93 b3 01 	sts	0x01B3, r24	; 0x8001b3 <fanMode>
     3a6:	08 95       	ret

000003a8 <Fan_Run>:
	}
	return 0;
}
void Fan_Run()
{
	switch (fanMode) {
     3a8:	80 91 b3 01 	lds	r24, 0x01B3	; 0x8001b3 <fanMode>
     3ac:	82 30       	cpi	r24, 0x02	; 2
     3ae:	a1 f0       	breq	.+40     	; 0x3d8 <Fan_Run+0x30>
     3b0:	28 f4       	brcc	.+10     	; 0x3bc <Fan_Run+0x14>
     3b2:	88 23       	and	r24, r24
     3b4:	49 f0       	breq	.+18     	; 0x3c8 <Fan_Run+0x20>
     3b6:	81 30       	cpi	r24, 0x01	; 1
     3b8:	59 f0       	breq	.+22     	; 0x3d0 <Fan_Run+0x28>
     3ba:	08 95       	ret
     3bc:	84 30       	cpi	r24, 0x04	; 4
     3be:	c1 f0       	breq	.+48     	; 0x3f0 <Fan_Run+0x48>
     3c0:	78 f0       	brcs	.+30     	; 0x3e0 <Fan_Run+0x38>
     3c2:	85 30       	cpi	r24, 0x05	; 5
     3c4:	89 f0       	breq	.+34     	; 0x3e8 <Fan_Run+0x40>
     3c6:	08 95       	ret
		case OFF:
		PORTD = 0xff;
     3c8:	8f ef       	ldi	r24, 0xFF	; 255
     3ca:	82 bb       	out	0x12, r24	; 18
		Fan_OFFMode();
     3cc:	79 cf       	rjmp	.-270    	; 0x2c0 <Fan_OFFMode>
		break;
     3ce:	08 95       	ret
		
		case LOW:
		PORTD = 0b00000100;
     3d0:	84 e0       	ldi	r24, 0x04	; 4
		Fan_LOWMode();
     3d2:	82 bb       	out	0x12, r24	; 18
     3d4:	83 cf       	rjmp	.-250    	; 0x2dc <Fan_LOWMode>
		break;
     3d6:	08 95       	ret
		
		case MIDLE:
		PORTD = 0b00001000;
     3d8:	88 e0       	ldi	r24, 0x08	; 8
		Fan_MIDLEMode();
     3da:	82 bb       	out	0x12, r24	; 18
     3dc:	8d cf       	rjmp	.-230    	; 0x2f8 <Fan_MIDLEMode>
		break;
		
		case HIGH:
		PORTD = 0b00010000;
     3de:	08 95       	ret
     3e0:	80 e1       	ldi	r24, 0x10	; 16
		Fan_HIGHMode();
     3e2:	82 bb       	out	0x12, r24	; 18
		break;
     3e4:	97 cf       	rjmp	.-210    	; 0x314 <Fan_HIGHMode>
		
		case SLEEP:
		PORTD = 0b00001100;
     3e6:	08 95       	ret
     3e8:	8c e0       	ldi	r24, 0x0C	; 12
		Fan_SLEEPMode();
     3ea:	82 bb       	out	0x12, r24	; 18
		break;
     3ec:	a3 cf       	rjmp	.-186    	; 0x334 <Fan_SLEEPMode>
		
		case NATURAL:
		PORTD = 0b00010100;
     3ee:	08 95       	ret
     3f0:	84 e1       	ldi	r24, 0x14	; 20
		Fan_NATURALMode();
     3f2:	82 bb       	out	0x12, r24	; 18
     3f4:	bb cf       	rjmp	.-138    	; 0x36c <Fan_NATURALMode>
     3f6:	08 95       	ret

000003f8 <Fan_execute>:
	}
}
	
void Fan_execute()
{
	Buzzer_SoundON();
     3f8:	c7 d1       	rcall	.+910    	; 0x788 <Buzzer_SoundON>
	Fan_StateEventCheck();
     3fa:	83 de       	rcall	.-762    	; 0x102 <Fan_StateEventCheck>
	Fan_ManualModeCheck();
     3fc:	9e de       	rcall	.-708    	; 0x13a <Fan_ManualModeCheck>
	FAN_ManualMode();
     3fe:	f5 de       	rcall	.-534    	; 0x1ea <FAN_ManualMode>
	Fan_AUTOModeCheck();
     400:	d5 de       	rcall	.-598    	; 0x1ac <Fan_AUTOModeCheck>
     402:	32 df       	rcall	.-412    	; 0x268 <FAN_AUTOMode>
	FAN_AUTOMode();
     404:	d1 df       	rcall	.-94     	; 0x3a8 <Fan_Run>
     406:	c6 c1       	rjmp	.+908    	; 0x794 <Buzzer_SoundOFF>
	Fan_Run();
     408:	08 95       	ret

0000040a <Fan_LCDData>:
     40a:	0f 93       	push	r16
	Buzzer_SoundOFF();
     40c:	1f 93       	push	r17
     40e:	cf 93       	push	r28
     410:	df 93       	push	r29
}

void Fan_LCDData()
{
     412:	cd b7       	in	r28, 0x3d	; 61
     414:	de b7       	in	r29, 0x3e	; 62
     416:	6e 97       	sbiw	r28, 0x1e	; 30
     418:	0f b6       	in	r0, 0x3f	; 63
     41a:	f8 94       	cli
     41c:	de bf       	out	0x3e, r29	; 62
     41e:	0f be       	out	0x3f, r0	; 63
     420:	cd bf       	out	0x3d, r28	; 61
	char buff[30];
	sprintf(buff,"Table Clock");
     422:	8c e0       	ldi	r24, 0x0C	; 12
     424:	e1 e7       	ldi	r30, 0x71	; 113
     426:	f1 e0       	ldi	r31, 0x01	; 1
     428:	8e 01       	movw	r16, r28
     42a:	0f 5f       	subi	r16, 0xFF	; 255
     42c:	1f 4f       	sbci	r17, 0xFF	; 255
     42e:	d8 01       	movw	r26, r16
     430:	01 90       	ld	r0, Z+
     432:	0d 92       	st	X+, r0
     434:	8a 95       	dec	r24
     436:	e1 f7       	brne	.-8      	; 0x430 <Fan_LCDData+0x26>
	LCD_writeStringXY(0,3,buff);
     438:	a8 01       	movw	r20, r16
     43a:	63 e0       	ldi	r22, 0x03	; 3
     43c:	80 e0       	ldi	r24, 0x00	; 0
     43e:	69 d3       	rcall	.+1746   	; 0xb12 <LCD_writeStringXY>
	sprintf(buff,"%s ", UART0_readRxBuff());
     440:	b2 d4       	rcall	.+2404   	; 0xda6 <UART0_readRxBuff>
     442:	9f 93       	push	r25
     444:	8f 93       	push	r24
     446:	8d e7       	ldi	r24, 0x7D	; 125
     448:	91 e0       	ldi	r25, 0x01	; 1
     44a:	9f 93       	push	r25
     44c:	8f 93       	push	r24
     44e:	1f 93       	push	r17
     450:	0f 93       	push	r16
     452:	3c d5       	rcall	.+2680   	; 0xecc <sprintf>
     454:	a8 01       	movw	r20, r16
	LCD_writeStringXY(1,4,buff);
     456:	64 e0       	ldi	r22, 0x04	; 4
     458:	81 e0       	ldi	r24, 0x01	; 1
     45a:	5b d3       	rcall	.+1718   	; 0xb12 <LCD_writeStringXY>
     45c:	0f 90       	pop	r0
     45e:	0f 90       	pop	r0
     460:	0f 90       	pop	r0
     462:	0f 90       	pop	r0
     464:	0f 90       	pop	r0
     466:	0f 90       	pop	r0
     468:	6e 96       	adiw	r28, 0x1e	; 30
     46a:	0f b6       	in	r0, 0x3f	; 63
     46c:	f8 94       	cli
     46e:	de bf       	out	0x3e, r29	; 62
     470:	0f be       	out	0x3f, r0	; 63
     472:	cd bf       	out	0x3d, r28	; 61
     474:	df 91       	pop	r29
     476:	cf 91       	pop	r28
     478:	1f 91       	pop	r17
     47a:	0f 91       	pop	r16
     47c:	08 95       	ret

0000047e <Timer_inMilisec>:
     47e:	40 91 c2 01 	lds	r20, 0x01C2	; 0x8001c2 <Milisec>
extern uint8_t fanState,fanMode;
extern uint8_t timer_state;

void Timer_inMilisec()
{	
	Milisec = (Milisec+1)%1000;
     482:	50 91 c3 01 	lds	r21, 0x01C3	; 0x8001c3 <Milisec+0x1>
     486:	4f 5f       	subi	r20, 0xFF	; 255
     488:	5f 4f       	sbci	r21, 0xFF	; 255
     48a:	9a 01       	movw	r18, r20
     48c:	36 95       	lsr	r19
     48e:	27 95       	ror	r18
     490:	36 95       	lsr	r19
     492:	27 95       	ror	r18
     494:	36 95       	lsr	r19
     496:	27 95       	ror	r18
     498:	a5 ec       	ldi	r26, 0xC5	; 197
     49a:	b0 e2       	ldi	r27, 0x20	; 32
     49c:	b6 d4       	rcall	.+2412   	; 0xe0a <__umulhisi3>
     49e:	92 95       	swap	r25
     4a0:	82 95       	swap	r24
     4a2:	8f 70       	andi	r24, 0x0F	; 15
     4a4:	89 27       	eor	r24, r25
     4a6:	9f 70       	andi	r25, 0x0F	; 15
     4a8:	89 27       	eor	r24, r25
     4aa:	68 ee       	ldi	r22, 0xE8	; 232
     4ac:	73 e0       	ldi	r23, 0x03	; 3
     4ae:	86 9f       	mul	r24, r22
     4b0:	90 01       	movw	r18, r0
     4b2:	87 9f       	mul	r24, r23
     4b4:	30 0d       	add	r19, r0
     4b6:	96 9f       	mul	r25, r22
     4b8:	30 0d       	add	r19, r0
     4ba:	11 24       	eor	r1, r1
     4bc:	ca 01       	movw	r24, r20
     4be:	82 1b       	sub	r24, r18
     4c0:	93 0b       	sbc	r25, r19
     4c2:	90 93 c3 01 	sts	0x01C3, r25	; 0x8001c3 <Milisec+0x1>
     4c6:	80 93 c2 01 	sts	0x01C2, r24	; 0x8001c2 <Milisec>
	if(Milisec) return;
     4ca:	89 2b       	or	r24, r25
     4cc:	f9 f4       	brne	.+62     	; 0x50c <Timer_inMilisec+0x8e>

	Sec = (Sec +1)%60;
     4ce:	80 91 c6 01 	lds	r24, 0x01C6	; 0x8001c6 <Sec>
     4d2:	90 e0       	ldi	r25, 0x00	; 0
     4d4:	01 96       	adiw	r24, 0x01	; 1
     4d6:	6c e3       	ldi	r22, 0x3C	; 60
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	68 d4       	rcall	.+2256   	; 0xdac <__divmodhi4>
     4dc:	80 93 c6 01 	sts	0x01C6, r24	; 0x8001c6 <Sec>
	if (Sec) return;
     4e0:	81 11       	cpse	r24, r1
     4e2:	14 c0       	rjmp	.+40     	; 0x50c <Timer_inMilisec+0x8e>
	
	Min = (Min +1)%60;
     4e4:	80 91 c0 01 	lds	r24, 0x01C0	; 0x8001c0 <Min>
     4e8:	90 e0       	ldi	r25, 0x00	; 0
     4ea:	01 96       	adiw	r24, 0x01	; 1
     4ec:	6c e3       	ldi	r22, 0x3C	; 60
     4ee:	70 e0       	ldi	r23, 0x00	; 0
     4f0:	5d d4       	rcall	.+2234   	; 0xdac <__divmodhi4>
     4f2:	80 93 c0 01 	sts	0x01C0, r24	; 0x8001c0 <Min>
	if(Min) return;
     4f6:	81 11       	cpse	r24, r1
     4f8:	09 c0       	rjmp	.+18     	; 0x50c <Timer_inMilisec+0x8e>
	
	Hour = (Hour +1) %24;
     4fa:	80 91 c4 01 	lds	r24, 0x01C4	; 0x8001c4 <Hour>
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	01 96       	adiw	r24, 0x01	; 1
     502:	68 e1       	ldi	r22, 0x18	; 24
     504:	70 e0       	ldi	r23, 0x00	; 0
     506:	52 d4       	rcall	.+2212   	; 0xdac <__divmodhi4>
     508:	80 93 c4 01 	sts	0x01C4, r24	; 0x8001c4 <Hour>
     50c:	08 95       	ret

0000050e <Timer_init>:
	if(Hour) return;
}

void Timer_init()
{
	FND_init();
     50e:	5f d1       	rcall	.+702    	; 0x7ce <FND_init>
	Button_init(&btnTimerInc, &DDRA, &PINA, 2);
     510:	22 e0       	ldi	r18, 0x02	; 2
     512:	49 e3       	ldi	r20, 0x39	; 57
     514:	50 e0       	ldi	r21, 0x00	; 0
     516:	6a e3       	ldi	r22, 0x3A	; 58
     518:	70 e0       	ldi	r23, 0x00	; 0
     51a:	8d ec       	ldi	r24, 0xCD	; 205
     51c:	91 e0       	ldi	r25, 0x01	; 1
     51e:	eb d0       	rcall	.+470    	; 0x6f6 <Button_init>
	Button_init(&btnTimerDic, &DDRA, &PINA, 4);
     520:	24 e0       	ldi	r18, 0x04	; 4
     522:	49 e3       	ldi	r20, 0x39	; 57
     524:	50 e0       	ldi	r21, 0x00	; 0
     526:	6a e3       	ldi	r22, 0x3A	; 58
     528:	70 e0       	ldi	r23, 0x00	; 0
     52a:	87 ec       	ldi	r24, 0xC7	; 199
     52c:	91 e0       	ldi	r25, 0x01	; 1
     52e:	e3 d0       	rcall	.+454    	; 0x6f6 <Button_init>
	
	Milisec = 0;
     530:	10 92 c3 01 	sts	0x01C3, r1	; 0x8001c3 <Milisec+0x1>
     534:	10 92 c2 01 	sts	0x01C2, r1	; 0x8001c2 <Milisec>
	Sec = 10;
     538:	8a e0       	ldi	r24, 0x0A	; 10
     53a:	80 93 c6 01 	sts	0x01C6, r24	; 0x8001c6 <Sec>
	Min = 0;
     53e:	10 92 c0 01 	sts	0x01C0, r1	; 0x8001c0 <Min>
	Hour = 0;
     542:	10 92 c4 01 	sts	0x01C4, r1	; 0x8001c4 <Hour>
	t_sec = 0;
     546:	10 92 d3 01 	sts	0x01D3, r1	; 0x8001d3 <t_sec>
	t_min = 0;
     54a:	10 92 c1 01 	sts	0x01C1, r1	; 0x8001c1 <t_min>
	t_hour = 0;
     54e:	10 92 c5 01 	sts	0x01C5, r1	; 0x8001c5 <t_hour>
     552:	08 95       	ret

00000554 <Timer_EventCheck>:
}

void Timer_EventCheck(uint8_t *uptime, uint8_t *downtime)
{
	if(*uptime)
     554:	fc 01       	movw	r30, r24
     556:	80 81       	ld	r24, Z
     558:	88 23       	and	r24, r24
     55a:	21 f1       	breq	.+72     	; 0x5a4 <Timer_EventCheck+0x50>
	{
		Milisec = 0;
     55c:	10 92 c3 01 	sts	0x01C3, r1	; 0x8001c3 <Milisec+0x1>
     560:	10 92 c2 01 	sts	0x01C2, r1	; 0x8001c2 <Milisec>
		Sec = 0;
     564:	10 92 c6 01 	sts	0x01C6, r1	; 0x8001c6 <Sec>
		Min = 0;
     568:	10 92 c0 01 	sts	0x01C0, r1	; 0x8001c0 <Min>
		Hour = 0;
     56c:	10 92 c4 01 	sts	0x01C4, r1	; 0x8001c4 <Hour>
		
		t_min = t_min +5;
     570:	90 91 c1 01 	lds	r25, 0x01C1	; 0x8001c1 <t_min>
     574:	9b 5f       	subi	r25, 0xFB	; 251
     576:	90 93 c1 01 	sts	0x01C1, r25	; 0x8001c1 <t_min>
		if(!(t_min%60))
     57a:	89 e8       	ldi	r24, 0x89	; 137
     57c:	98 9f       	mul	r25, r24
     57e:	81 2d       	mov	r24, r1
     580:	11 24       	eor	r1, r1
     582:	82 95       	swap	r24
     584:	86 95       	lsr	r24
     586:	87 70       	andi	r24, 0x07	; 7
     588:	fc e3       	ldi	r31, 0x3C	; 60
     58a:	8f 9f       	mul	r24, r31
     58c:	90 19       	sub	r25, r0
     58e:	11 24       	eor	r1, r1
     590:	91 11       	cpse	r25, r1
     592:	26 c0       	rjmp	.+76     	; 0x5e0 <Timer_EventCheck+0x8c>
		{
			t_hour++;
     594:	80 91 c5 01 	lds	r24, 0x01C5	; 0x8001c5 <t_hour>
     598:	8f 5f       	subi	r24, 0xFF	; 255
     59a:	80 93 c5 01 	sts	0x01C5, r24	; 0x8001c5 <t_hour>
			t_min = 0;
     59e:	10 92 c1 01 	sts	0x01C1, r1	; 0x8001c1 <t_min>
     5a2:	1e c0       	rjmp	.+60     	; 0x5e0 <Timer_EventCheck+0x8c>
		}

	}
	else if(*downtime)
     5a4:	fb 01       	movw	r30, r22
     5a6:	80 81       	ld	r24, Z
     5a8:	88 23       	and	r24, r24
     5aa:	d1 f0       	breq	.+52     	; 0x5e0 <Timer_EventCheck+0x8c>
	{
		Milisec = 0;
     5ac:	10 92 c3 01 	sts	0x01C3, r1	; 0x8001c3 <Milisec+0x1>
     5b0:	10 92 c2 01 	sts	0x01C2, r1	; 0x8001c2 <Milisec>
		Sec = 0;
     5b4:	10 92 c6 01 	sts	0x01C6, r1	; 0x8001c6 <Sec>
		Min = 0;
     5b8:	10 92 c0 01 	sts	0x01C0, r1	; 0x8001c0 <Min>
		Hour = 0;
     5bc:	10 92 c4 01 	sts	0x01C4, r1	; 0x8001c4 <Hour>
		
		if(t_min == 0 )
     5c0:	80 91 c1 01 	lds	r24, 0x01C1	; 0x8001c1 <t_min>
     5c4:	81 11       	cpse	r24, r1
     5c6:	09 c0       	rjmp	.+18     	; 0x5da <Timer_EventCheck+0x86>
		{
			t_hour--;
     5c8:	80 91 c5 01 	lds	r24, 0x01C5	; 0x8001c5 <t_hour>
     5cc:	81 50       	subi	r24, 0x01	; 1
     5ce:	80 93 c5 01 	sts	0x01C5, r24	; 0x8001c5 <t_hour>
			t_min = 55;
     5d2:	87 e3       	ldi	r24, 0x37	; 55
     5d4:	80 93 c1 01 	sts	0x01C1, r24	; 0x8001c1 <t_min>
     5d8:	03 c0       	rjmp	.+6      	; 0x5e0 <Timer_EventCheck+0x8c>
		}
		else
		{
			t_min = t_min -5;	
     5da:	85 50       	subi	r24, 0x05	; 5
     5dc:	80 93 c1 01 	sts	0x01C1, r24	; 0x8001c1 <t_min>
		}
	}
	
	if(t_min>=Min && t_hour>=Hour)
     5e0:	80 91 c1 01 	lds	r24, 0x01C1	; 0x8001c1 <t_min>
     5e4:	90 91 c0 01 	lds	r25, 0x01C0	; 0x8001c0 <Min>
     5e8:	89 17       	cp	r24, r25
     5ea:	78 f0       	brcs	.+30     	; 0x60a <Timer_EventCheck+0xb6>
     5ec:	20 91 c5 01 	lds	r18, 0x01C5	; 0x8001c5 <t_hour>
     5f0:	30 91 c4 01 	lds	r19, 0x01C4	; 0x8001c4 <Hour>
     5f4:	23 17       	cp	r18, r19
     5f6:	48 f0       	brcs	.+18     	; 0x60a <Timer_EventCheck+0xb6>
	{
		set_time =(t_hour - Hour)*100 + (t_min - Min); 
     5f8:	23 1b       	sub	r18, r19
     5fa:	89 1b       	sub	r24, r25
     5fc:	f4 e6       	ldi	r31, 0x64	; 100
     5fe:	2f 9f       	mul	r18, r31
     600:	80 0d       	add	r24, r0
     602:	11 24       	eor	r1, r1
     604:	80 93 96 01 	sts	0x0196, r24	; 0x800196 <__data_end>
     608:	08 95       	ret
	}
	else
	{
		set_time = 0000;
     60a:	10 92 96 01 	sts	0x0196, r1	; 0x800196 <__data_end>
		timer_state = 0;
     60e:	10 92 9b 01 	sts	0x019B, r1	; 0x80019b <timer_state>
     612:	08 95       	ret

00000614 <Timer_setFNDData>:
	
}

void Timer_setFNDData()
{	
	FND_setFndData(set_time);	
     614:	80 91 96 01 	lds	r24, 0x0196	; 0x800196 <__data_end>
     618:	90 e0       	ldi	r25, 0x00	; 0
     61a:	eb d1       	rcall	.+982    	; 0x9f2 <FND_setFndData>
	if(t_hour == Hour && t_min == Min)
     61c:	90 91 c5 01 	lds	r25, 0x01C5	; 0x8001c5 <t_hour>
     620:	80 91 c4 01 	lds	r24, 0x01C4	; 0x8001c4 <Hour>
     624:	98 13       	cpse	r25, r24
     626:	0a c0       	rjmp	.+20     	; 0x63c <Timer_setFNDData+0x28>
     628:	90 91 c1 01 	lds	r25, 0x01C1	; 0x8001c1 <t_min>
     62c:	80 91 c0 01 	lds	r24, 0x01C0	; 0x8001c0 <Min>
     630:	98 13       	cpse	r25, r24
     632:	04 c0       	rjmp	.+8      	; 0x63c <Timer_setFNDData+0x28>
	{
		fanState = MANUAL;
     634:	10 92 b2 01 	sts	0x01B2, r1	; 0x8001b2 <fanState>
		fanMode = OFF;
     638:	10 92 b3 01 	sts	0x01B3, r1	; 0x8001b3 <fanMode>
     63c:	08 95       	ret

0000063e <Timer_run>:
	}
}

void Timer_run(uint8_t *data1, uint8_t *data2)
{
     63e:	0f 93       	push	r16
     640:	1f 93       	push	r17
     642:	cf 93       	push	r28
     644:	df 93       	push	r29
     646:	8c 01       	movw	r16, r24
     648:	eb 01       	movw	r28, r22
		Timer_EventCheck(data1, data2);
     64a:	84 df       	rcall	.-248    	; 0x554 <Timer_EventCheck>
		Timer_setFNDData(data1, data2);
     64c:	be 01       	movw	r22, r28
     64e:	c8 01       	movw	r24, r16
     650:	e1 df       	rcall	.-62     	; 0x614 <Timer_setFNDData>
		*data1 = 0;
     652:	f8 01       	movw	r30, r16
     654:	10 82       	st	Z, r1
		*data2 = 0;
     656:	18 82       	st	Y, r1
}
     658:	df 91       	pop	r29
     65a:	cf 91       	pop	r28
     65c:	1f 91       	pop	r17
     65e:	0f 91       	pop	r16
     660:	08 95       	ret

00000662 <Timer_LCDData>:

void Timer_LCDData()
{
     662:	ef 92       	push	r14
     664:	ff 92       	push	r15
     666:	0f 93       	push	r16
     668:	1f 93       	push	r17
     66a:	cf 93       	push	r28
     66c:	df 93       	push	r29
     66e:	cd b7       	in	r28, 0x3d	; 61
     670:	de b7       	in	r29, 0x3e	; 62
     672:	6e 97       	sbiw	r28, 0x1e	; 30
     674:	0f b6       	in	r0, 0x3f	; 63
     676:	f8 94       	cli
     678:	de bf       	out	0x3e, r29	; 62
     67a:	0f be       	out	0x3f, r0	; 63
     67c:	cd bf       	out	0x3d, r28	; 61
	uint8_t r_hour,r_min;
	r_hour = t_hour - Hour;
     67e:	f0 90 c5 01 	lds	r15, 0x01C5	; 0x8001c5 <t_hour>
     682:	80 91 c4 01 	lds	r24, 0x01C4	; 0x8001c4 <Hour>
     686:	f8 1a       	sub	r15, r24
	r_min = t_min - Min;
     688:	e0 90 c1 01 	lds	r14, 0x01C1	; 0x8001c1 <t_min>
     68c:	80 91 c0 01 	lds	r24, 0x01C0	; 0x8001c0 <Min>
     690:	e8 1a       	sub	r14, r24
	char buff[30];
	sprintf(buff,"%s ", UART0_readRxBuff());
     692:	89 d3       	rcall	.+1810   	; 0xda6 <UART0_readRxBuff>
     694:	9f 93       	push	r25
     696:	8f 93       	push	r24
     698:	8d e7       	ldi	r24, 0x7D	; 125
     69a:	91 e0       	ldi	r25, 0x01	; 1
     69c:	9f 93       	push	r25
     69e:	8f 93       	push	r24
     6a0:	8e 01       	movw	r16, r28
     6a2:	0f 5f       	subi	r16, 0xFF	; 255
     6a4:	1f 4f       	sbci	r17, 0xFF	; 255
     6a6:	1f 93       	push	r17
     6a8:	0f 93       	push	r16
     6aa:	10 d4       	rcall	.+2080   	; 0xecc <sprintf>
	LCD_writeStringXY(0,4,buff);
     6ac:	a8 01       	movw	r20, r16
     6ae:	64 e0       	ldi	r22, 0x04	; 4
     6b0:	80 e0       	ldi	r24, 0x00	; 0
     6b2:	2f d2       	rcall	.+1118   	; 0xb12 <LCD_writeStringXY>
	sprintf(buff,"Timer : %02d : %02d", r_hour, r_min);
     6b4:	1f 92       	push	r1
     6b6:	ef 92       	push	r14
     6b8:	1f 92       	push	r1
     6ba:	ff 92       	push	r15
     6bc:	81 e8       	ldi	r24, 0x81	; 129
     6be:	91 e0       	ldi	r25, 0x01	; 1
     6c0:	9f 93       	push	r25
     6c2:	8f 93       	push	r24
     6c4:	1f 93       	push	r17
     6c6:	0f 93       	push	r16
     6c8:	01 d4       	rcall	.+2050   	; 0xecc <sprintf>
	LCD_writeStringXY(1,4,buff);
     6ca:	a8 01       	movw	r20, r16
     6cc:	64 e0       	ldi	r22, 0x04	; 4
     6ce:	81 e0       	ldi	r24, 0x01	; 1
     6d0:	20 d2       	rcall	.+1088   	; 0xb12 <LCD_writeStringXY>
     6d2:	0f b6       	in	r0, 0x3f	; 63
     6d4:	f8 94       	cli
     6d6:	de bf       	out	0x3e, r29	; 62
     6d8:	0f be       	out	0x3f, r0	; 63
     6da:	cd bf       	out	0x3d, r28	; 61
     6dc:	6e 96       	adiw	r28, 0x1e	; 30
     6de:	0f b6       	in	r0, 0x3f	; 63
     6e0:	f8 94       	cli
     6e2:	de bf       	out	0x3e, r29	; 62
     6e4:	0f be       	out	0x3f, r0	; 63
     6e6:	cd bf       	out	0x3d, r28	; 61
     6e8:	df 91       	pop	r29
     6ea:	cf 91       	pop	r28
     6ec:	1f 91       	pop	r17
     6ee:	0f 91       	pop	r16
     6f0:	ff 90       	pop	r15
     6f2:	ef 90       	pop	r14
     6f4:	08 95       	ret

000006f6 <Button_init>:
﻿#include "button.h"


void Button_init(button_t *btn, volatile uint8_t *ddr, volatile uint8_t *pin, uint8_t pinnum){
     6f6:	fc 01       	movw	r30, r24
     6f8:	cb 01       	movw	r24, r22
	btn ->DDR =ddr;
     6fa:	71 83       	std	Z+1, r23	; 0x01
     6fc:	60 83       	st	Z, r22
	btn->PIN = pin;
     6fe:	53 83       	std	Z+3, r21	; 0x03
     700:	42 83       	std	Z+2, r20	; 0x02
	btn->pinNum = pinnum;
     702:	25 83       	std	Z+5, r18	; 0x05
	btn->pS = 1;
     704:	31 e0       	ldi	r19, 0x01	; 1
     706:	34 83       	std	Z+4, r19	; 0x04
	Gpio_initPin(ddr,1,pinnum);
     708:	42 2f       	mov	r20, r18
     70a:	61 e0       	ldi	r22, 0x01	; 1
     70c:	b4 c2       	rjmp	.+1384   	; 0xc76 <Gpio_initPin>
     70e:	08 95       	ret

00000710 <button_getstate>:
	
}

uint8_t button_getstate(button_t *btn){
     710:	fc 01       	movw	r30, r24
	
	uint8_t curState = *btn->PIN &(1<<btn->pinNum);
     712:	a2 81       	ldd	r26, Z+2	; 0x02
     714:	b3 81       	ldd	r27, Z+3	; 0x03
     716:	8c 91       	ld	r24, X
     718:	21 e0       	ldi	r18, 0x01	; 1
     71a:	30 e0       	ldi	r19, 0x00	; 0
     71c:	05 80       	ldd	r0, Z+5	; 0x05
     71e:	02 c0       	rjmp	.+4      	; 0x724 <button_getstate+0x14>
     720:	22 0f       	add	r18, r18
     722:	33 1f       	adc	r19, r19
     724:	0a 94       	dec	r0
     726:	e2 f7       	brpl	.-8      	; 0x720 <button_getstate+0x10>
     728:	28 23       	and	r18, r24
	if ((curState == 0) &&(btn->pS = 1)){
     72a:	59 f4       	brne	.+22     	; 0x742 <button_getstate+0x32>
     72c:	81 e0       	ldi	r24, 0x01	; 1
     72e:	84 83       	std	Z+4, r24	; 0x04
     730:	8f e3       	ldi	r24, 0x3F	; 63
     732:	9c e9       	ldi	r25, 0x9C	; 156
     734:	01 97       	sbiw	r24, 0x01	; 1
     736:	f1 f7       	brne	.-4      	; 0x734 <button_getstate+0x24>
     738:	00 c0       	rjmp	.+0      	; 0x73a <button_getstate+0x2a>
     73a:	00 00       	nop
		_delay_ms(10);
		btn->pS = PUSHED;
     73c:	14 82       	std	Z+4, r1	; 0x04
		
		
		return ACT_PUSHED;
     73e:	80 e0       	ldi	r24, 0x00	; 0
     740:	08 95       	ret
	}
	else if ((curState != 0 )&&(btn->pS == 0)){
     742:	22 23       	and	r18, r18
     744:	61 f0       	breq	.+24     	; 0x75e <button_getstate+0x4e>
     746:	84 81       	ldd	r24, Z+4	; 0x04
     748:	81 11       	cpse	r24, r1
     74a:	0b c0       	rjmp	.+22     	; 0x762 <button_getstate+0x52>
     74c:	8f e3       	ldi	r24, 0x3F	; 63
     74e:	9c e9       	ldi	r25, 0x9C	; 156
     750:	01 97       	sbiw	r24, 0x01	; 1
     752:	f1 f7       	brne	.-4      	; 0x750 <button_getstate+0x40>
     754:	00 c0       	rjmp	.+0      	; 0x756 <button_getstate+0x46>
     756:	00 00       	nop
		_delay_ms(10);
		btn->pS = RELEASED;
     758:	81 e0       	ldi	r24, 0x01	; 1
     75a:	84 83       	std	Z+4, r24	; 0x04
		return ACT_RELEASED;
     75c:	08 95       	ret
	}
	
	return ACT_NONE;
     75e:	82 e0       	ldi	r24, 0x02	; 2
     760:	08 95       	ret
     762:	82 e0       	ldi	r24, 0x02	; 2
     764:	08 95       	ret

00000766 <Buzzer_init>:
     766:	ea e8       	ldi	r30, 0x8A	; 138
     768:	f0 e0       	ldi	r31, 0x00	; 0
     76a:	80 81       	ld	r24, Z
     76c:	83 60       	ori	r24, 0x03	; 3
     76e:	80 83       	st	Z, r24
     770:	80 81       	ld	r24, Z
     772:	88 61       	ori	r24, 0x18	; 24
     774:	80 83       	st	Z, r24
     776:	eb e8       	ldi	r30, 0x8B	; 139
     778:	f0 e0       	ldi	r31, 0x00	; 0
     77a:	80 81       	ld	r24, Z
     77c:	82 60       	ori	r24, 0x02	; 2
     77e:	80 83       	st	Z, r24
     780:	82 b1       	in	r24, 0x02	; 2
     782:	88 60       	ori	r24, 0x08	; 8
     784:	82 b9       	out	0x02, r24	; 2
     786:	08 95       	ret

00000788 <Buzzer_SoundON>:
     788:	eb e8       	ldi	r30, 0x8B	; 139
     78a:	f0 e0       	ldi	r31, 0x00	; 0
     78c:	80 81       	ld	r24, Z
     78e:	80 68       	ori	r24, 0x80	; 128
     790:	80 83       	st	Z, r24
     792:	08 95       	ret

00000794 <Buzzer_SoundOFF>:
     794:	eb e8       	ldi	r30, 0x8B	; 139
     796:	f0 e0       	ldi	r31, 0x00	; 0
     798:	80 81       	ld	r24, Z
     79a:	8f 73       	andi	r24, 0x3F	; 63
     79c:	80 83       	st	Z, r24
     79e:	08 95       	ret

000007a0 <Buzzer_makeHertz>:
     7a0:	9c 01       	movw	r18, r24
     7a2:	40 e0       	ldi	r20, 0x00	; 0
     7a4:	50 e0       	ldi	r21, 0x00	; 0
     7a6:	60 e9       	ldi	r22, 0x90	; 144
     7a8:	70 ed       	ldi	r23, 0xD0	; 208
     7aa:	83 e0       	ldi	r24, 0x03	; 3
     7ac:	90 e0       	ldi	r25, 0x00	; 0
     7ae:	11 d3       	rcall	.+1570   	; 0xdd2 <__divmodsi4>
     7b0:	21 50       	subi	r18, 0x01	; 1
     7b2:	31 09       	sbc	r19, r1
     7b4:	e0 e8       	ldi	r30, 0x80	; 128
     7b6:	f0 e0       	ldi	r31, 0x00	; 0
     7b8:	31 83       	std	Z+1, r19	; 0x01
     7ba:	20 83       	st	Z, r18
     7bc:	80 81       	ld	r24, Z
     7be:	91 81       	ldd	r25, Z+1	; 0x01
     7c0:	96 95       	lsr	r25
     7c2:	87 95       	ror	r24
     7c4:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
     7c8:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
     7cc:	08 95       	ret

000007ce <FND_init>:

void FND_colonON(){
	fndColonFlag = 1;
}
void FND_colonOFF(){
	fndColonFlag = 0;
     7ce:	84 b3       	in	r24, 0x14	; 20
     7d0:	80 6f       	ori	r24, 0xF0	; 240
     7d2:	84 bb       	out	0x14, r24	; 20
     7d4:	8f ef       	ldi	r24, 0xFF	; 255
     7d6:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
     7da:	08 95       	ret

000007dc <FND_dispNum>:
}

void FND_dispNum(uint16_t fndNum){
     7dc:	0f 93       	push	r16
     7de:	1f 93       	push	r17
     7e0:	cf 93       	push	r28
     7e2:	df 93       	push	r29
     7e4:	cd b7       	in	r28, 0x3d	; 61
     7e6:	de b7       	in	r29, 0x3e	; 62
     7e8:	2b 97       	sbiw	r28, 0x0b	; 11
     7ea:	0f b6       	in	r0, 0x3f	; 63
     7ec:	f8 94       	cli
     7ee:	de bf       	out	0x3e, r29	; 62
     7f0:	0f be       	out	0x3f, r0	; 63
     7f2:	cd bf       	out	0x3d, r28	; 61
     7f4:	8c 01       	movw	r16, r24
	
	uint8_t fndFont[] = {0x3f,0x06,0x5b,0x4f,0x66,0x6d,0x7d,0x07,0x7f,0x6f,0x80};
     7f6:	8b e0       	ldi	r24, 0x0B	; 11
     7f8:	e0 e0       	ldi	r30, 0x00	; 0
     7fa:	f1 e0       	ldi	r31, 0x01	; 1
     7fc:	de 01       	movw	r26, r28
     7fe:	11 96       	adiw	r26, 0x01	; 1
     800:	01 90       	ld	r0, Z+
     802:	0d 92       	st	X+, r0
     804:	8a 95       	dec	r24
     806:	e1 f7       	brne	.-8      	; 0x800 <FND_dispNum+0x24>
	
	static uint8_t fndDigitState = 0;
	
	fndDigitState = (fndDigitState+1)%5;
     808:	80 91 97 01 	lds	r24, 0x0197	; 0x800197 <fndDigitState.1748>
     80c:	90 e0       	ldi	r25, 0x00	; 0
     80e:	01 96       	adiw	r24, 0x01	; 1
     810:	65 e0       	ldi	r22, 0x05	; 5
     812:	70 e0       	ldi	r23, 0x00	; 0
     814:	cb d2       	rcall	.+1430   	; 0xdac <__divmodhi4>
     816:	80 93 97 01 	sts	0x0197, r24	; 0x800197 <fndDigitState.1748>
	
	switch (fndDigitState)
     81a:	82 30       	cpi	r24, 0x02	; 2
     81c:	09 f4       	brne	.+2      	; 0x820 <FND_dispNum+0x44>
     81e:	78 c0       	rjmp	.+240    	; 0x910 <FND_dispNum+0x134>
     820:	30 f4       	brcc	.+12     	; 0x82e <FND_dispNum+0x52>
     822:	88 23       	and	r24, r24
     824:	59 f0       	breq	.+22     	; 0x83c <FND_dispNum+0x60>
     826:	81 30       	cpi	r24, 0x01	; 1
     828:	09 f4       	brne	.+2      	; 0x82c <FND_dispNum+0x50>
     82a:	40 c0       	rjmp	.+128    	; 0x8ac <FND_dispNum+0xd0>
     82c:	d7 c0       	rjmp	.+430    	; 0x9dc <FND_dispNum+0x200>
     82e:	83 30       	cpi	r24, 0x03	; 3
     830:	09 f4       	brne	.+2      	; 0x834 <FND_dispNum+0x58>
     832:	9e c0       	rjmp	.+316    	; 0x970 <FND_dispNum+0x194>
     834:	84 30       	cpi	r24, 0x04	; 4
     836:	09 f4       	brne	.+2      	; 0x83a <FND_dispNum+0x5e>
     838:	c2 c0       	rjmp	.+388    	; 0x9be <FND_dispNum+0x1e2>
     83a:	d0 c0       	rjmp	.+416    	; 0x9dc <FND_dispNum+0x200>
	{
		case 0:
		PORTC |= ((1<<7)|(1<<6)|(1<<5)|(1<<4));
     83c:	85 b3       	in	r24, 0x15	; 21
     83e:	80 6f       	ori	r24, 0xF0	; 240
     840:	85 bb       	out	0x15, r24	; 21
		PORTF = fndFont[fndNum/1000%10];
     842:	98 01       	movw	r18, r16
     844:	36 95       	lsr	r19
     846:	27 95       	ror	r18
     848:	36 95       	lsr	r19
     84a:	27 95       	ror	r18
     84c:	36 95       	lsr	r19
     84e:	27 95       	ror	r18
     850:	a5 ec       	ldi	r26, 0xC5	; 197
     852:	b0 e2       	ldi	r27, 0x20	; 32
     854:	da d2       	rcall	.+1460   	; 0xe0a <__umulhisi3>
     856:	ac 01       	movw	r20, r24
     858:	52 95       	swap	r21
     85a:	42 95       	swap	r20
     85c:	4f 70       	andi	r20, 0x0F	; 15
     85e:	45 27       	eor	r20, r21
     860:	5f 70       	andi	r21, 0x0F	; 15
     862:	45 27       	eor	r20, r21
     864:	9a 01       	movw	r18, r20
     866:	ad ec       	ldi	r26, 0xCD	; 205
     868:	bc ec       	ldi	r27, 0xCC	; 204
     86a:	cf d2       	rcall	.+1438   	; 0xe0a <__umulhisi3>
     86c:	96 95       	lsr	r25
     86e:	87 95       	ror	r24
     870:	96 95       	lsr	r25
     872:	87 95       	ror	r24
     874:	96 95       	lsr	r25
     876:	87 95       	ror	r24
     878:	9c 01       	movw	r18, r24
     87a:	22 0f       	add	r18, r18
     87c:	33 1f       	adc	r19, r19
     87e:	88 0f       	add	r24, r24
     880:	99 1f       	adc	r25, r25
     882:	88 0f       	add	r24, r24
     884:	99 1f       	adc	r25, r25
     886:	88 0f       	add	r24, r24
     888:	99 1f       	adc	r25, r25
     88a:	82 0f       	add	r24, r18
     88c:	93 1f       	adc	r25, r19
     88e:	9a 01       	movw	r18, r20
     890:	28 1b       	sub	r18, r24
     892:	39 0b       	sbc	r19, r25
     894:	e1 e0       	ldi	r30, 0x01	; 1
     896:	f0 e0       	ldi	r31, 0x00	; 0
     898:	ec 0f       	add	r30, r28
     89a:	fd 1f       	adc	r31, r29
     89c:	e2 0f       	add	r30, r18
     89e:	f3 1f       	adc	r31, r19
     8a0:	80 81       	ld	r24, Z
     8a2:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
		PORTC = ~(1<<4);
     8a6:	8f ee       	ldi	r24, 0xEF	; 239
     8a8:	85 bb       	out	0x15, r24	; 21
		//_delay_ms(1);
		break;
     8aa:	98 c0       	rjmp	.+304    	; 0x9dc <FND_dispNum+0x200>
		
		case 1:
		PORTC |= ((1<<7)|(1<<6)|(1<<5)|(1<<4));
     8ac:	85 b3       	in	r24, 0x15	; 21
     8ae:	80 6f       	ori	r24, 0xF0	; 240
     8b0:	85 bb       	out	0x15, r24	; 21
		PORTF = fndFont[fndNum/100%10];
     8b2:	98 01       	movw	r18, r16
     8b4:	36 95       	lsr	r19
     8b6:	27 95       	ror	r18
     8b8:	36 95       	lsr	r19
     8ba:	27 95       	ror	r18
     8bc:	ab e7       	ldi	r26, 0x7B	; 123
     8be:	b4 e1       	ldi	r27, 0x14	; 20
     8c0:	a4 d2       	rcall	.+1352   	; 0xe0a <__umulhisi3>
     8c2:	ac 01       	movw	r20, r24
     8c4:	56 95       	lsr	r21
     8c6:	47 95       	ror	r20
     8c8:	9a 01       	movw	r18, r20
     8ca:	ad ec       	ldi	r26, 0xCD	; 205
     8cc:	bc ec       	ldi	r27, 0xCC	; 204
     8ce:	9d d2       	rcall	.+1338   	; 0xe0a <__umulhisi3>
     8d0:	96 95       	lsr	r25
     8d2:	87 95       	ror	r24
     8d4:	96 95       	lsr	r25
     8d6:	87 95       	ror	r24
     8d8:	96 95       	lsr	r25
     8da:	87 95       	ror	r24
     8dc:	9c 01       	movw	r18, r24
     8de:	22 0f       	add	r18, r18
     8e0:	33 1f       	adc	r19, r19
     8e2:	88 0f       	add	r24, r24
     8e4:	99 1f       	adc	r25, r25
     8e6:	88 0f       	add	r24, r24
     8e8:	99 1f       	adc	r25, r25
     8ea:	88 0f       	add	r24, r24
     8ec:	99 1f       	adc	r25, r25
     8ee:	82 0f       	add	r24, r18
     8f0:	93 1f       	adc	r25, r19
     8f2:	9a 01       	movw	r18, r20
     8f4:	28 1b       	sub	r18, r24
     8f6:	39 0b       	sbc	r19, r25
     8f8:	e1 e0       	ldi	r30, 0x01	; 1
     8fa:	f0 e0       	ldi	r31, 0x00	; 0
     8fc:	ec 0f       	add	r30, r28
     8fe:	fd 1f       	adc	r31, r29
     900:	e2 0f       	add	r30, r18
     902:	f3 1f       	adc	r31, r19
     904:	80 81       	ld	r24, Z
     906:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
		PORTC = ~(1<<5);
     90a:	8f ed       	ldi	r24, 0xDF	; 223
     90c:	85 bb       	out	0x15, r24	; 21
		//_delay_ms(1);
		break;
     90e:	66 c0       	rjmp	.+204    	; 0x9dc <FND_dispNum+0x200>
		case 2:
		PORTC |= ((1<<7)|(1<<6)|(1<<5)|(1<<4));
     910:	85 b3       	in	r24, 0x15	; 21
     912:	80 6f       	ori	r24, 0xF0	; 240
		PORTF = fndFont[fndNum/10%10];
     914:	85 bb       	out	0x15, r24	; 21
     916:	98 01       	movw	r18, r16
     918:	ad ec       	ldi	r26, 0xCD	; 205
     91a:	bc ec       	ldi	r27, 0xCC	; 204
     91c:	76 d2       	rcall	.+1260   	; 0xe0a <__umulhisi3>
     91e:	ac 01       	movw	r20, r24
     920:	56 95       	lsr	r21
     922:	47 95       	ror	r20
     924:	56 95       	lsr	r21
     926:	47 95       	ror	r20
     928:	56 95       	lsr	r21
     92a:	47 95       	ror	r20
     92c:	9a 01       	movw	r18, r20
     92e:	6d d2       	rcall	.+1242   	; 0xe0a <__umulhisi3>
     930:	96 95       	lsr	r25
     932:	87 95       	ror	r24
     934:	96 95       	lsr	r25
     936:	87 95       	ror	r24
     938:	96 95       	lsr	r25
     93a:	87 95       	ror	r24
     93c:	9c 01       	movw	r18, r24
     93e:	22 0f       	add	r18, r18
     940:	33 1f       	adc	r19, r19
     942:	88 0f       	add	r24, r24
     944:	99 1f       	adc	r25, r25
     946:	88 0f       	add	r24, r24
     948:	99 1f       	adc	r25, r25
     94a:	88 0f       	add	r24, r24
     94c:	99 1f       	adc	r25, r25
     94e:	82 0f       	add	r24, r18
     950:	93 1f       	adc	r25, r19
     952:	9a 01       	movw	r18, r20
     954:	28 1b       	sub	r18, r24
     956:	39 0b       	sbc	r19, r25
     958:	e1 e0       	ldi	r30, 0x01	; 1
     95a:	f0 e0       	ldi	r31, 0x00	; 0
     95c:	ec 0f       	add	r30, r28
     95e:	fd 1f       	adc	r31, r29
     960:	e2 0f       	add	r30, r18
     962:	f3 1f       	adc	r31, r19
     964:	80 81       	ld	r24, Z
     966:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
		PORTC = ~(1<<6);
     96a:	8f eb       	ldi	r24, 0xBF	; 191
     96c:	85 bb       	out	0x15, r24	; 21
		//_delay_ms(1);
		break;
		case 3:
		PORTC |= ((1<<7)|(1<<6)|(1<<5)|(1<<4));
     96e:	36 c0       	rjmp	.+108    	; 0x9dc <FND_dispNum+0x200>
     970:	85 b3       	in	r24, 0x15	; 21
     972:	80 6f       	ori	r24, 0xF0	; 240
		PORTF = fndFont[fndNum%10];
     974:	85 bb       	out	0x15, r24	; 21
     976:	98 01       	movw	r18, r16
     978:	ad ec       	ldi	r26, 0xCD	; 205
     97a:	bc ec       	ldi	r27, 0xCC	; 204
     97c:	46 d2       	rcall	.+1164   	; 0xe0a <__umulhisi3>
     97e:	96 95       	lsr	r25
     980:	87 95       	ror	r24
     982:	96 95       	lsr	r25
     984:	87 95       	ror	r24
     986:	96 95       	lsr	r25
     988:	87 95       	ror	r24
     98a:	9c 01       	movw	r18, r24
     98c:	22 0f       	add	r18, r18
     98e:	33 1f       	adc	r19, r19
     990:	88 0f       	add	r24, r24
     992:	99 1f       	adc	r25, r25
     994:	88 0f       	add	r24, r24
     996:	99 1f       	adc	r25, r25
     998:	88 0f       	add	r24, r24
     99a:	99 1f       	adc	r25, r25
     99c:	82 0f       	add	r24, r18
     99e:	93 1f       	adc	r25, r19
     9a0:	98 01       	movw	r18, r16
     9a2:	28 1b       	sub	r18, r24
     9a4:	39 0b       	sbc	r19, r25
     9a6:	e1 e0       	ldi	r30, 0x01	; 1
     9a8:	f0 e0       	ldi	r31, 0x00	; 0
     9aa:	ec 0f       	add	r30, r28
     9ac:	fd 1f       	adc	r31, r29
     9ae:	e2 0f       	add	r30, r18
     9b0:	f3 1f       	adc	r31, r19
     9b2:	80 81       	ld	r24, Z
     9b4:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
		PORTC = ~(1<<7);
     9b8:	8f e7       	ldi	r24, 0x7F	; 127
     9ba:	85 bb       	out	0x15, r24	; 21
		//_delay_ms(1);
		break;
     9bc:	0f c0       	rjmp	.+30     	; 0x9dc <FND_dispNum+0x200>
		case 4:
		PORTC |= ((1<<7)|(1<<6)|(1<<5)|(1<<4));
     9be:	85 b3       	in	r24, 0x15	; 21
     9c0:	80 6f       	ori	r24, 0xF0	; 240
     9c2:	85 bb       	out	0x15, r24	; 21
		if(fndColonFlag) {
     9c4:	80 91 98 01 	lds	r24, 0x0198	; 0x800198 <fndColonFlag>
     9c8:	88 23       	and	r24, r24
     9ca:	21 f0       	breq	.+8      	; 0x9d4 <FND_dispNum+0x1f8>
			PORTF = fndFont[10];}
     9cc:	8b 85       	ldd	r24, Y+11	; 0x0b
     9ce:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     9d2:	02 c0       	rjmp	.+4      	; 0x9d8 <FND_dispNum+0x1fc>
		else{ 
		PORTF=0x00;
     9d4:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
		}
		PORTC = ~(1<<5);
     9d8:	8f ed       	ldi	r24, 0xDF	; 223
     9da:	85 bb       	out	0x15, r24	; 21
		break;
	}
	
}
     9dc:	2b 96       	adiw	r28, 0x0b	; 11
     9de:	0f b6       	in	r0, 0x3f	; 63
     9e0:	f8 94       	cli
     9e2:	de bf       	out	0x3e, r29	; 62
     9e4:	0f be       	out	0x3f, r0	; 63
     9e6:	cd bf       	out	0x3d, r28	; 61
     9e8:	df 91       	pop	r29
     9ea:	cf 91       	pop	r28
     9ec:	1f 91       	pop	r17
     9ee:	0f 91       	pop	r16
     9f0:	08 95       	ret

000009f2 <FND_setFndData>:

void FND_setFndData(uint16_t data){
	fndData = data;
     9f2:	90 93 9a 01 	sts	0x019A, r25	; 0x80019a <fndData+0x1>
     9f6:	80 93 99 01 	sts	0x0199, r24	; 0x800199 <fndData>
     9fa:	08 95       	ret

000009fc <FND_ISR_Process>:
}

void FND_ISR_Process(){
	FND_dispNum(fndData);
     9fc:	80 91 99 01 	lds	r24, 0x0199	; 0x800199 <fndData>
     a00:	90 91 9a 01 	lds	r25, 0x019A	; 0x80019a <fndData+0x1>
     a04:	eb ce       	rjmp	.-554    	; 0x7dc <FND_dispNum>
     a06:	08 95       	ret

00000a08 <LCD_cmdMode>:

void LCD_cmdMode()
{
	// RS pin : bit 0 set
	//LCD_CONTROL_PORT &= ~(1<<LCD_RS);
	Gpio_writePin(&LCD_CONTROL_PORT,LCD_RS,GPIO_PIN_RESET);
     a08:	40 e0       	ldi	r20, 0x00	; 0
     a0a:	65 e0       	ldi	r22, 0x05	; 5
     a0c:	88 e3       	ldi	r24, 0x38	; 56
     a0e:	90 e0       	ldi	r25, 0x00	; 0
     a10:	50 c1       	rjmp	.+672    	; 0xcb2 <Gpio_writePin>
     a12:	08 95       	ret

00000a14 <LCD_charMode>:
}

void LCD_charMode()
{
	// RS pin : bit 0 set
	Gpio_writePin(&LCD_CONTROL_PORT,LCD_RS,GPIO_PIN_SET);
     a14:	41 e0       	ldi	r20, 0x01	; 1
     a16:	65 e0       	ldi	r22, 0x05	; 5
     a18:	88 e3       	ldi	r24, 0x38	; 56
     a1a:	90 e0       	ldi	r25, 0x00	; 0
     a1c:	4a c1       	rjmp	.+660    	; 0xcb2 <Gpio_writePin>
     a1e:	08 95       	ret

00000a20 <LCD_writeMode>:
}

void LCD_writeMode()
{
	// RW pin : bit 0 set
	Gpio_writePin(&LCD_CONTROL_PORT,LCD_RW,GPIO_PIN_RESET);
     a20:	40 e0       	ldi	r20, 0x00	; 0
     a22:	66 e0       	ldi	r22, 0x06	; 6
     a24:	88 e3       	ldi	r24, 0x38	; 56
     a26:	90 e0       	ldi	r25, 0x00	; 0
     a28:	44 c1       	rjmp	.+648    	; 0xcb2 <Gpio_writePin>
     a2a:	08 95       	ret

00000a2c <LCD_enableHigh>:
}

void LCD_enableHigh()
{
	// E pin : bit 1 set
	Gpio_writePin(&LCD_CONTROL_PORT,LCD_E,GPIO_PIN_SET);
     a2c:	41 e0       	ldi	r20, 0x01	; 1
     a2e:	67 e0       	ldi	r22, 0x07	; 7
     a30:	88 e3       	ldi	r24, 0x38	; 56
     a32:	90 e0       	ldi	r25, 0x00	; 0
     a34:	3e d1       	rcall	.+636    	; 0xcb2 <Gpio_writePin>
     a36:	8f e9       	ldi	r24, 0x9F	; 159
     a38:	9f e0       	ldi	r25, 0x0F	; 15
     a3a:	01 97       	sbiw	r24, 0x01	; 1
     a3c:	f1 f7       	brne	.-4      	; 0xa3a <LCD_enableHigh+0xe>
     a3e:	00 c0       	rjmp	.+0      	; 0xa40 <LCD_enableHigh+0x14>
     a40:	00 00       	nop
     a42:	08 95       	ret

00000a44 <LCD_enableLow>:
}

void LCD_enableLow()
{
	// E pin : bit 0 set
	Gpio_writePin(&LCD_CONTROL_PORT,LCD_E,GPIO_PIN_RESET);
     a44:	40 e0       	ldi	r20, 0x00	; 0
     a46:	67 e0       	ldi	r22, 0x07	; 7
     a48:	88 e3       	ldi	r24, 0x38	; 56
     a4a:	90 e0       	ldi	r25, 0x00	; 0
     a4c:	32 d1       	rcall	.+612    	; 0xcb2 <Gpio_writePin>
     a4e:	8f e9       	ldi	r24, 0x9F	; 159
     a50:	9f e0       	ldi	r25, 0x0F	; 15
     a52:	01 97       	sbiw	r24, 0x01	; 1
     a54:	f1 f7       	brne	.-4      	; 0xa52 <LCD_enableLow+0xe>
     a56:	00 c0       	rjmp	.+0      	; 0xa58 <LCD_enableLow+0x14>
     a58:	00 00       	nop
     a5a:	08 95       	ret

00000a5c <LCD_writeByte>:
}

void LCD_writeByte(uint8_t data)
{
	// 8 bit PORTC write
	Gpio_writePort(&LCD_DATA_PORT,data);
     a5c:	68 2f       	mov	r22, r24
     a5e:	85 e3       	ldi	r24, 0x35	; 53
     a60:	90 e0       	ldi	r25, 0x00	; 0
     a62:	24 c1       	rjmp	.+584    	; 0xcac <Gpio_writePort>
     a64:	08 95       	ret

00000a66 <LCD_writeCmdData>:


// MCU -> LCD 명령어를 보낼 경우 (write mode)

void LCD_writeCmdData(uint8_t data)
{
     a66:	cf 93       	push	r28
     a68:	c8 2f       	mov	r28, r24
	// LCD 명령어 전달
	LCD_cmdMode();
     a6a:	ce df       	rcall	.-100    	; 0xa08 <LCD_cmdMode>
	LCD_writeMode();
     a6c:	d9 df       	rcall	.-78     	; 0xa20 <LCD_writeMode>
	LCD_enableHigh();
     a6e:	de df       	rcall	.-68     	; 0xa2c <LCD_enableHigh>
	LCD_writeByte(data);
     a70:	8c 2f       	mov	r24, r28
     a72:	f4 df       	rcall	.-24     	; 0xa5c <LCD_writeByte>
     a74:	e7 df       	rcall	.-50     	; 0xa44 <LCD_enableLow>
	LCD_enableLow();
     a76:	cf 91       	pop	r28
     a78:	08 95       	ret

00000a7a <LCD_init>:
	
}
     a7a:	8f e5       	ldi	r24, 0x5F	; 95
     a7c:	9a ee       	ldi	r25, 0xEA	; 234
     a7e:	01 97       	sbiw	r24, 0x01	; 1
     a80:	f1 f7       	brne	.-4      	; 0xa7e <LCD_init+0x4>
     a82:	00 c0       	rjmp	.+0      	; 0xa84 <LCD_init+0xa>
     a84:	00 00       	nop

void LCD_init()
{

	_delay_ms(15);
	LCD_writeCmdData(LCD_8bit_FUNCTION_SET);   // LCD_8bit_FUNCTION_SET      0x38
     a86:	88 e3       	ldi	r24, 0x38	; 56
     a88:	ee df       	rcall	.-36     	; 0xa66 <LCD_writeCmdData>
     a8a:	8f e1       	ldi	r24, 0x1F	; 31
     a8c:	9e e4       	ldi	r25, 0x4E	; 78
     a8e:	01 97       	sbiw	r24, 0x01	; 1
     a90:	f1 f7       	brne	.-4      	; 0xa8e <LCD_init+0x14>
     a92:	00 c0       	rjmp	.+0      	; 0xa94 <LCD_init+0x1a>
     a94:	00 00       	nop
	_delay_ms(5);
	LCD_writeCmdData(LCD_8bit_FUNCTION_SET);   // LCD_8bit_FUNCTION_SET      0x38
     a96:	88 e3       	ldi	r24, 0x38	; 56
     a98:	e6 df       	rcall	.-52     	; 0xa66 <LCD_writeCmdData>
     a9a:	8f e9       	ldi	r24, 0x9F	; 159
     a9c:	9f e0       	ldi	r25, 0x0F	; 15
     a9e:	01 97       	sbiw	r24, 0x01	; 1
     aa0:	f1 f7       	brne	.-4      	; 0xa9e <LCD_init+0x24>
     aa2:	00 c0       	rjmp	.+0      	; 0xaa4 <LCD_init+0x2a>
	_delay_ms(1);
	LCD_writeCmdData(LCD_8bit_FUNCTION_SET);   // LCD_8bit_FUNCTION_SET      0x38
     aa4:	00 00       	nop
     aa6:	88 e3       	ldi	r24, 0x38	; 56
	LCD_writeCmdData(LCD_8bit_FUNCTION_SET);   // LCD_8bit_FUNCTION_SET      0x38
     aa8:	de df       	rcall	.-68     	; 0xa66 <LCD_writeCmdData>
     aaa:	88 e3       	ldi	r24, 0x38	; 56
	LCD_writeCmdData(LCD_DISPLAY_OFF);         // LCD_DISPLAY_OFF            0x08
     aac:	dc df       	rcall	.-72     	; 0xa66 <LCD_writeCmdData>
     aae:	88 e0       	ldi	r24, 0x08	; 8
	LCD_writeCmdData(LCD_DISPLAY_CLEAR);      // LCD_DISPLAY_CLEAR         0x01
     ab0:	da df       	rcall	.-76     	; 0xa66 <LCD_writeCmdData>
     ab2:	81 e0       	ldi	r24, 0x01	; 1
	LCD_writeCmdData(LCD_ENTRY_MODE_SET);      // LCD_ENTRY_MODE_SET         0x06
     ab4:	d8 df       	rcall	.-80     	; 0xa66 <LCD_writeCmdData>
     ab6:	86 e0       	ldi	r24, 0x06	; 6
     ab8:	d6 df       	rcall	.-84     	; 0xa66 <LCD_writeCmdData>
	LCD_writeCmdData(LCD_DISPLAY_ON);         // LCD_DISPLAY_ON            0x0C
     aba:	8c e0       	ldi	r24, 0x0C	; 12
     abc:	d4 cf       	rjmp	.-88     	; 0xa66 <LCD_writeCmdData>
     abe:	08 95       	ret

00000ac0 <LCD_writeCharData>:
     ac0:	cf 93       	push	r28
	
}

// MCU -> LCD Data를 보낼 경우 (write mode)
void LCD_writeCharData(uint8_t data)
{
     ac2:	c8 2f       	mov	r28, r24
	// LCD Character 쓰기 전달
	LCD_charMode();
     ac4:	a7 df       	rcall	.-178    	; 0xa14 <LCD_charMode>
	LCD_writeMode();
     ac6:	ac df       	rcall	.-168    	; 0xa20 <LCD_writeMode>
	LCD_enableHigh();
     ac8:	b1 df       	rcall	.-158    	; 0xa2c <LCD_enableHigh>
	LCD_writeByte(data);
     aca:	8c 2f       	mov	r24, r28
     acc:	c7 df       	rcall	.-114    	; 0xa5c <LCD_writeByte>
     ace:	ba df       	rcall	.-140    	; 0xa44 <LCD_enableLow>
	LCD_enableLow();
     ad0:	cf 91       	pop	r28
     ad2:	08 95       	ret

00000ad4 <LCD_writeString>:
}
     ad4:	0f 93       	push	r16
     ad6:	1f 93       	push	r17

void LCD_writeString(char *str)
{
     ad8:	cf 93       	push	r28
     ada:	df 93       	push	r29
     adc:	8c 01       	movw	r16, r24
	for(int i=0; str[i] ; i++)
     ade:	c0 e0       	ldi	r28, 0x00	; 0
     ae0:	d0 e0       	ldi	r29, 0x00	; 0
     ae2:	02 c0       	rjmp	.+4      	; 0xae8 <LCD_writeString+0x14>
	{
		LCD_writeCharData(str[i]);
     ae4:	ed df       	rcall	.-38     	; 0xac0 <LCD_writeCharData>
	LCD_enableLow();
}

void LCD_writeString(char *str)
{
	for(int i=0; str[i] ; i++)
     ae6:	21 96       	adiw	r28, 0x01	; 1
     ae8:	f8 01       	movw	r30, r16
     aea:	ec 0f       	add	r30, r28
     aec:	fd 1f       	adc	r31, r29
     aee:	80 81       	ld	r24, Z
     af0:	81 11       	cpse	r24, r1
     af2:	f8 cf       	rjmp	.-16     	; 0xae4 <LCD_writeString+0x10>
	{
		LCD_writeCharData(str[i]);
	}
}
     af4:	df 91       	pop	r29
     af6:	cf 91       	pop	r28
     af8:	1f 91       	pop	r17
     afa:	0f 91       	pop	r16
     afc:	08 95       	ret

00000afe <LCD_gotoXY>:

void LCD_gotoXY(uint8_t row, uint8_t col)
{
	col%= 16; row %=2;
     afe:	6f 70       	andi	r22, 0x0F	; 15
     b00:	81 70       	andi	r24, 0x01	; 1
	uint8_t lcdregisterAddress = (0x40 * row ) + col;
     b02:	90 e4       	ldi	r25, 0x40	; 64
     b04:	89 9f       	mul	r24, r25
     b06:	60 0d       	add	r22, r0
     b08:	11 24       	eor	r1, r1
     b0a:	86 2f       	mov	r24, r22
	uint8_t command = 0x80 + lcdregisterAddress;
	LCD_writeCmdData(command);
     b0c:	80 58       	subi	r24, 0x80	; 128
     b0e:	ab cf       	rjmp	.-170    	; 0xa66 <LCD_writeCmdData>
     b10:	08 95       	ret

00000b12 <LCD_writeStringXY>:
}

void LCD_writeStringXY(uint8_t row, uint8_t col, char *str)
{
     b12:	cf 93       	push	r28
     b14:	df 93       	push	r29
     b16:	ea 01       	movw	r28, r20
	LCD_gotoXY(row,col);
     b18:	f2 df       	rcall	.-28     	; 0xafe <LCD_gotoXY>
	LCD_writeString(str);
     b1a:	ce 01       	movw	r24, r28
     b1c:	db df       	rcall	.-74     	; 0xad4 <LCD_writeString>
}
     b1e:	df 91       	pop	r29
     b20:	cf 91       	pop	r28
     b22:	08 95       	ret

00000b24 <__vector_16>:
#include "ap/TIMER/TIMER.h"

uint8_t decide_LCD = 0;
uint8_t timer_state = 0;
ISR(TIMER0_OVF_vect)
{
     b24:	1f 92       	push	r1
     b26:	0f 92       	push	r0
     b28:	0f b6       	in	r0, 0x3f	; 63
     b2a:	0f 92       	push	r0
     b2c:	11 24       	eor	r1, r1
     b2e:	0b b6       	in	r0, 0x3b	; 59
     b30:	0f 92       	push	r0
     b32:	2f 93       	push	r18
     b34:	3f 93       	push	r19
     b36:	4f 93       	push	r20
     b38:	5f 93       	push	r21
     b3a:	6f 93       	push	r22
     b3c:	7f 93       	push	r23
     b3e:	8f 93       	push	r24
     b40:	9f 93       	push	r25
     b42:	af 93       	push	r26
     b44:	bf 93       	push	r27
     b46:	ef 93       	push	r30
     b48:	ff 93       	push	r31
	FND_ISR_Process();
     b4a:	58 df       	rcall	.-336    	; 0x9fc <FND_ISR_Process>
	TCNT0 = 120;
     b4c:	88 e7       	ldi	r24, 0x78	; 120
     b4e:	82 bf       	out	0x32, r24	; 50
}
     b50:	ff 91       	pop	r31
     b52:	ef 91       	pop	r30
     b54:	bf 91       	pop	r27
     b56:	af 91       	pop	r26
     b58:	9f 91       	pop	r25
     b5a:	8f 91       	pop	r24
     b5c:	7f 91       	pop	r23
     b5e:	6f 91       	pop	r22
     b60:	5f 91       	pop	r21
     b62:	4f 91       	pop	r20
     b64:	3f 91       	pop	r19
     b66:	2f 91       	pop	r18
     b68:	0f 90       	pop	r0
     b6a:	0b be       	out	0x3b, r0	; 59
     b6c:	0f 90       	pop	r0
     b6e:	0f be       	out	0x3f, r0	; 63
     b70:	0f 90       	pop	r0
     b72:	1f 90       	pop	r1
     b74:	18 95       	reti

00000b76 <__vector_18>:

ISR(USART0_RX_vect)
{
     b76:	1f 92       	push	r1
     b78:	0f 92       	push	r0
     b7a:	0f b6       	in	r0, 0x3f	; 63
     b7c:	0f 92       	push	r0
     b7e:	11 24       	eor	r1, r1
     b80:	0b b6       	in	r0, 0x3b	; 59
     b82:	0f 92       	push	r0
     b84:	2f 93       	push	r18
     b86:	3f 93       	push	r19
     b88:	4f 93       	push	r20
     b8a:	5f 93       	push	r21
     b8c:	6f 93       	push	r22
     b8e:	7f 93       	push	r23
     b90:	8f 93       	push	r24
     b92:	9f 93       	push	r25
     b94:	af 93       	push	r26
     b96:	bf 93       	push	r27
     b98:	ef 93       	push	r30
     b9a:	ff 93       	push	r31
	UART0_ISR_Process();
     b9c:	c5 d0       	rcall	.+394    	; 0xd28 <UART0_ISR_Process>
}
     b9e:	ff 91       	pop	r31
     ba0:	ef 91       	pop	r30
     ba2:	bf 91       	pop	r27
     ba4:	af 91       	pop	r26
     ba6:	9f 91       	pop	r25
     ba8:	8f 91       	pop	r24
     baa:	7f 91       	pop	r23
     bac:	6f 91       	pop	r22
     bae:	5f 91       	pop	r21
     bb0:	4f 91       	pop	r20
     bb2:	3f 91       	pop	r19
     bb4:	2f 91       	pop	r18
     bb6:	0f 90       	pop	r0
     bb8:	0b be       	out	0x3b, r0	; 59
     bba:	0f 90       	pop	r0
     bbc:	0f be       	out	0x3f, r0	; 63
     bbe:	0f 90       	pop	r0
     bc0:	1f 90       	pop	r1
     bc2:	18 95       	reti

00000bc4 <__vector_9>:

ISR(TIMER2_COMP_vect)
{
     bc4:	1f 92       	push	r1
     bc6:	0f 92       	push	r0
     bc8:	0f b6       	in	r0, 0x3f	; 63
     bca:	0f 92       	push	r0
     bcc:	11 24       	eor	r1, r1
     bce:	0b b6       	in	r0, 0x3b	; 59
     bd0:	0f 92       	push	r0
     bd2:	2f 93       	push	r18
     bd4:	3f 93       	push	r19
     bd6:	4f 93       	push	r20
     bd8:	5f 93       	push	r21
     bda:	6f 93       	push	r22
     bdc:	7f 93       	push	r23
     bde:	8f 93       	push	r24
     be0:	9f 93       	push	r25
     be2:	af 93       	push	r26
     be4:	bf 93       	push	r27
     be6:	ef 93       	push	r30
     be8:	ff 93       	push	r31
	Timer_inMilisec();
     bea:	49 dc       	rcall	.-1902   	; 0x47e <Timer_inMilisec>
	Fan_AutoTimer();
     bec:	a1 db       	rcall	.-2238   	; 0x330 <Fan_AutoTimer>
     bee:	ff 91       	pop	r31
}
     bf0:	ef 91       	pop	r30
     bf2:	bf 91       	pop	r27
     bf4:	af 91       	pop	r26
     bf6:	9f 91       	pop	r25
     bf8:	8f 91       	pop	r24
     bfa:	7f 91       	pop	r23
     bfc:	6f 91       	pop	r22
     bfe:	5f 91       	pop	r21
     c00:	4f 91       	pop	r20
     c02:	3f 91       	pop	r19
     c04:	2f 91       	pop	r18
     c06:	0f 90       	pop	r0
     c08:	0b be       	out	0x3b, r0	; 59
     c0a:	0f 90       	pop	r0
     c0c:	0f be       	out	0x3f, r0	; 63
     c0e:	0f 90       	pop	r0
     c10:	1f 90       	pop	r1
     c12:	18 95       	reti

00000c14 <main>:
     c14:	cf 93       	push	r28

int main(void)
{
     c16:	df 93       	push	r29
     c18:	00 d0       	rcall	.+0      	; 0xc1a <main+0x6>
     c1a:	cd b7       	in	r28, 0x3d	; 61
     c1c:	de b7       	in	r29, 0x3e	; 62
	Fan_init();
     c1e:	55 da       	rcall	.-2902   	; 0xca <Fan_init>
	Timer_init();
     c20:	76 dc       	rcall	.-1812   	; 0x50e <Timer_init>
     c22:	78 94       	sei
	sei();
     c24:	19 82       	std	Y+1, r1	; 0x01

	uint8_t timer_up = 0;
	uint8_t timer_down = 0;
     c26:	1a 82       	std	Y+2, r1	; 0x02


	while (1)
	{
		uint8_t prevDecide_LCD = 0;
		Fan_execute();
     c28:	e7 db       	rcall	.-2098   	; 0x3f8 <Fan_execute>
		if (button_getstate(&btnTimerInc)==ACT_RELEASED)
     c2a:	8d ec       	ldi	r24, 0xCD	; 205
     c2c:	91 e0       	ldi	r25, 0x01	; 1
     c2e:	70 dd       	rcall	.-1312   	; 0x710 <button_getstate>
     c30:	81 30       	cpi	r24, 0x01	; 1
     c32:	11 f4       	brne	.+4      	; 0xc38 <main+0x24>
     c34:	80 93 9b 01 	sts	0x019B, r24	; 0x80019b <timer_state>
		{
			timer_state = 1;
     c38:	80 91 9b 01 	lds	r24, 0x019B	; 0x80019b <timer_state>
		}
	if (timer_state)
     c3c:	88 23       	and	r24, r24
     c3e:	99 f0       	breq	.+38     	; 0xc66 <main+0x52>
	{	
		if (button_getstate(&btnTimerInc)==ACT_RELEASED)
     c40:	8d ec       	ldi	r24, 0xCD	; 205
     c42:	91 e0       	ldi	r25, 0x01	; 1
     c44:	65 dd       	rcall	.-1334   	; 0x710 <button_getstate>
     c46:	81 30       	cpi	r24, 0x01	; 1
     c48:	11 f4       	brne	.+4      	; 0xc4e <main+0x3a>
		{
			timer_up = 1;
     c4a:	89 83       	std	Y+1, r24	; 0x01
     c4c:	06 c0       	rjmp	.+12     	; 0xc5a <main+0x46>
		}
		else if(button_getstate(&btnTimerDic)==ACT_RELEASED)
     c4e:	87 ec       	ldi	r24, 0xC7	; 199
     c50:	91 e0       	ldi	r25, 0x01	; 1
     c52:	5e dd       	rcall	.-1348   	; 0x710 <button_getstate>
     c54:	81 30       	cpi	r24, 0x01	; 1
     c56:	09 f4       	brne	.+2      	; 0xc5a <main+0x46>
     c58:	8a 83       	std	Y+2, r24	; 0x02
		{
			timer_down = 1;
		}
		Timer_run(&timer_up, &timer_down);
     c5a:	be 01       	movw	r22, r28
     c5c:	6e 5f       	subi	r22, 0xFE	; 254
     c5e:	7f 4f       	sbci	r23, 0xFF	; 255
     c60:	ce 01       	movw	r24, r28
     c62:	01 96       	adiw	r24, 0x01	; 1
     c64:	ec dc       	rcall	.-1576   	; 0x63e <Timer_run>
	}
		
		if (decide_LCD != prevDecide_LCD)
     c66:	80 91 9c 01 	lds	r24, 0x019C	; 0x80019c <decide_LCD>
     c6a:	88 23       	and	r24, r24
     c6c:	11 f0       	breq	.+4      	; 0xc72 <main+0x5e>
		{
			Timer_LCDData();
     c6e:	f9 dc       	rcall	.-1550   	; 0x662 <Timer_LCDData>
     c70:	db cf       	rjmp	.-74     	; 0xc28 <main+0x14>
     c72:	cb db       	rcall	.-2154   	; 0x40a <Fan_LCDData>
		}
		else
		{
			Fan_LCDData();
     c74:	d9 cf       	rjmp	.-78     	; 0xc28 <main+0x14>

00000c76 <Gpio_initPin>:
     c76:	61 11       	cpse	r22, r1
     c78:	0c c0       	rjmp	.+24     	; 0xc92 <Gpio_initPin+0x1c>
}

void Gpio_initPin(volatile uint8_t *DDR, uint8_t dir, uint8_t pinNum){
	
	if(dir == OUTPUT){
		*DDR |= (1<<pinNum);
     c7a:	fc 01       	movw	r30, r24
     c7c:	50 81       	ld	r21, Z
     c7e:	21 e0       	ldi	r18, 0x01	; 1
     c80:	30 e0       	ldi	r19, 0x00	; 0
     c82:	02 c0       	rjmp	.+4      	; 0xc88 <Gpio_initPin+0x12>
     c84:	22 0f       	add	r18, r18
     c86:	33 1f       	adc	r19, r19
     c88:	4a 95       	dec	r20
     c8a:	e2 f7       	brpl	.-8      	; 0xc84 <Gpio_initPin+0xe>
     c8c:	25 2b       	or	r18, r21
     c8e:	20 83       	st	Z, r18
     c90:	08 95       	ret
	}
	else{
		*DDR &= ~(1<<pinNum); 
     c92:	fc 01       	movw	r30, r24
     c94:	50 81       	ld	r21, Z
     c96:	21 e0       	ldi	r18, 0x01	; 1
     c98:	30 e0       	ldi	r19, 0x00	; 0
     c9a:	02 c0       	rjmp	.+4      	; 0xca0 <Gpio_initPin+0x2a>
     c9c:	22 0f       	add	r18, r18
     c9e:	33 1f       	adc	r19, r19
     ca0:	4a 95       	dec	r20
     ca2:	e2 f7       	brpl	.-8      	; 0xc9c <Gpio_initPin+0x26>
     ca4:	20 95       	com	r18
     ca6:	25 23       	and	r18, r21
     ca8:	20 83       	st	Z, r18
     caa:	08 95       	ret

00000cac <Gpio_writePort>:
	
}

void Gpio_writePort(volatile uint8_t *PORT, uint8_t data){
	
	*PORT = data;
     cac:	fc 01       	movw	r30, r24
     cae:	60 83       	st	Z, r22
     cb0:	08 95       	ret

00000cb2 <Gpio_writePin>:
	
}

void Gpio_writePin(volatile uint8_t *PORT, uint8_t pinNum, uint8_t State){
     cb2:	fc 01       	movw	r30, r24
	if(State == GPIO_PIN_SET){
     cb4:	41 30       	cpi	r20, 0x01	; 1
     cb6:	59 f4       	brne	.+22     	; 0xcce <Gpio_writePin+0x1c>
		*PORT |=(1<<pinNum);
     cb8:	20 81       	ld	r18, Z
     cba:	81 e0       	ldi	r24, 0x01	; 1
     cbc:	90 e0       	ldi	r25, 0x00	; 0
     cbe:	02 c0       	rjmp	.+4      	; 0xcc4 <Gpio_writePin+0x12>
     cc0:	88 0f       	add	r24, r24
     cc2:	99 1f       	adc	r25, r25
     cc4:	6a 95       	dec	r22
     cc6:	e2 f7       	brpl	.-8      	; 0xcc0 <Gpio_writePin+0xe>
     cc8:	82 2b       	or	r24, r18
     cca:	80 83       	st	Z, r24
     ccc:	08 95       	ret
	}
	else{
		*PORT &= ~(1<<pinNum);
     cce:	90 81       	ld	r25, Z
     cd0:	21 e0       	ldi	r18, 0x01	; 1
     cd2:	30 e0       	ldi	r19, 0x00	; 0
     cd4:	02 c0       	rjmp	.+4      	; 0xcda <Gpio_writePin+0x28>
     cd6:	22 0f       	add	r18, r18
     cd8:	33 1f       	adc	r19, r19
     cda:	6a 95       	dec	r22
     cdc:	e2 f7       	brpl	.-8      	; 0xcd6 <Gpio_writePin+0x24>
     cde:	20 95       	com	r18
     ce0:	29 23       	and	r18, r25
     ce2:	20 83       	st	Z, r18
     ce4:	08 95       	ret

00000ce6 <TIM0_init>:
﻿#include "TIM.h"

void TIM0_init(){
	
	TCCR0 |= ((1<<CS02)|(0<<CS01)|(1<<CS00)); //128 preScaler
     ce6:	83 b7       	in	r24, 0x33	; 51
     ce8:	85 60       	ori	r24, 0x05	; 5
     cea:	83 bf       	out	0x33, r24	; 51
	TIMSK |= (1<<TOIE0);					  //TIMSK Timer/counter
     cec:	87 b7       	in	r24, 0x37	; 55
     cee:	81 60       	ori	r24, 0x01	; 1
     cf0:	87 bf       	out	0x37, r24	; 55
	TCNT0=130;
     cf2:	82 e8       	ldi	r24, 0x82	; 130
     cf4:	82 bf       	out	0x32, r24	; 50
     cf6:	08 95       	ret

00000cf8 <TIM2_init>:
﻿#include "TIM2.h"

void TIM2_init(){
	
		//timer/counter 2 1/64 1ms period interrupt, ctc mode
		TCCR2 |= ((0<<CS22)|(1<<CS21)|(1<<CS20));	// 1/64 prescaler
     cf8:	85 b5       	in	r24, 0x25	; 37
     cfa:	83 60       	ori	r24, 0x03	; 3
     cfc:	85 bd       	out	0x25, r24	; 37
		TIMSK |= (1<<OCIE2);
     cfe:	87 b7       	in	r24, 0x37	; 55
     d00:	80 68       	ori	r24, 0x80	; 128
     d02:	87 bf       	out	0x37, r24	; 55
		
		//CTC MODE
		TCCR2 |= ((1<<WGM21) | (0<<WGM20));
     d04:	85 b5       	in	r24, 0x25	; 37
     d06:	88 60       	ori	r24, 0x08	; 8
     d08:	85 bd       	out	0x25, r24	; 37
		OCR2 = 250-1;
     d0a:	89 ef       	ldi	r24, 0xF9	; 249
     d0c:	83 bd       	out	0x23, r24	; 35
     d0e:	08 95       	ret

00000d10 <UART0_init>:
	uart0RxFlag = 0;
}

void UART0_setRxFlag()
{
	uart0RxFlag = 1;
     d10:	8a b1       	in	r24, 0x0a	; 10
     d12:	88 61       	ori	r24, 0x18	; 24
     d14:	8a b9       	out	0x0a, r24	; 10
     d16:	8b b1       	in	r24, 0x0b	; 11
     d18:	82 60       	ori	r24, 0x02	; 2
     d1a:	8b b9       	out	0x0b, r24	; 11
     d1c:	8a b1       	in	r24, 0x0a	; 10
     d1e:	80 68       	ori	r24, 0x80	; 128
     d20:	8a b9       	out	0x0a, r24	; 10
     d22:	8f ec       	ldi	r24, 0xCF	; 207
     d24:	89 b9       	out	0x09, r24	; 9
     d26:	08 95       	ret

00000d28 <UART0_ISR_Process>:
     d28:	9c b1       	in	r25, 0x0c	; 12
     d2a:	9a 30       	cpi	r25, 0x0A	; 10
     d2c:	91 f4       	brne	.+36     	; 0xd52 <UART0_ISR_Process+0x2a>
     d2e:	e0 91 9d 01 	lds	r30, 0x019D	; 0x80019d <uart0RxTail.1747>
     d32:	ae 2f       	mov	r26, r30
     d34:	b0 e0       	ldi	r27, 0x00	; 0
     d36:	ac 52       	subi	r26, 0x2C	; 44
     d38:	be 4f       	sbci	r27, 0xFE	; 254
     d3a:	9c 93       	st	X, r25
     d3c:	ef 5f       	subi	r30, 0xFF	; 255
     d3e:	f0 e0       	ldi	r31, 0x00	; 0
     d40:	ec 52       	subi	r30, 0x2C	; 44
     d42:	fe 4f       	sbci	r31, 0xFE	; 254
     d44:	10 82       	st	Z, r1
     d46:	10 92 9d 01 	sts	0x019D, r1	; 0x80019d <uart0RxTail.1747>
     d4a:	81 e0       	ldi	r24, 0x01	; 1
     d4c:	80 93 38 02 	sts	0x0238, r24	; 0x800238 <uart0RxFlag>
     d50:	08 95       	ret
     d52:	80 91 9d 01 	lds	r24, 0x019D	; 0x80019d <uart0RxTail.1747>
     d56:	e8 2f       	mov	r30, r24
     d58:	f0 e0       	ldi	r31, 0x00	; 0
     d5a:	ec 52       	subi	r30, 0x2C	; 44
     d5c:	fe 4f       	sbci	r31, 0xFE	; 254
     d5e:	90 83       	st	Z, r25
     d60:	8f 5f       	subi	r24, 0xFF	; 255
     d62:	80 93 9d 01 	sts	0x019D, r24	; 0x80019d <uart0RxTail.1747>
     d66:	08 95       	ret

00000d68 <UART0_Transmit>:
     d68:	5d 9b       	sbis	0x0b, 5	; 11
     d6a:	fe cf       	rjmp	.-4      	; 0xd68 <UART0_Transmit>
     d6c:	8c b9       	out	0x0c, r24	; 12
     d6e:	08 95       	ret

00000d70 <UART0_sendString>:
     d70:	0f 93       	push	r16
     d72:	1f 93       	push	r17
     d74:	cf 93       	push	r28
     d76:	df 93       	push	r29
     d78:	8c 01       	movw	r16, r24
     d7a:	c0 e0       	ldi	r28, 0x00	; 0
     d7c:	d0 e0       	ldi	r29, 0x00	; 0
     d7e:	02 c0       	rjmp	.+4      	; 0xd84 <UART0_sendString+0x14>
     d80:	f3 df       	rcall	.-26     	; 0xd68 <UART0_Transmit>
     d82:	21 96       	adiw	r28, 0x01	; 1
     d84:	f8 01       	movw	r30, r16
     d86:	ec 0f       	add	r30, r28
     d88:	fd 1f       	adc	r31, r29
     d8a:	80 81       	ld	r24, Z
     d8c:	81 11       	cpse	r24, r1
     d8e:	f8 cf       	rjmp	.-16     	; 0xd80 <UART0_sendString+0x10>
     d90:	df 91       	pop	r29
     d92:	cf 91       	pop	r28
     d94:	1f 91       	pop	r17
     d96:	0f 91       	pop	r16
     d98:	08 95       	ret

00000d9a <UART0_clearRxFlag>:
     d9a:	10 92 38 02 	sts	0x0238, r1	; 0x800238 <uart0RxFlag>
     d9e:	08 95       	ret

00000da0 <UART0_getRxFlag>:
}

uint8_t UART0_getRxFlag()
{
	return uart0RxFlag;
}
     da0:	80 91 38 02 	lds	r24, 0x0238	; 0x800238 <uart0RxFlag>
     da4:	08 95       	ret

00000da6 <UART0_readRxBuff>:

uint8_t* UART0_readRxBuff()
{
	return uart0Rxbuff;
     da6:	84 ed       	ldi	r24, 0xD4	; 212
     da8:	91 e0       	ldi	r25, 0x01	; 1
     daa:	08 95       	ret

00000dac <__divmodhi4>:
     dac:	97 fb       	bst	r25, 7
     dae:	07 2e       	mov	r0, r23
     db0:	16 f4       	brtc	.+4      	; 0xdb6 <__divmodhi4+0xa>
     db2:	00 94       	com	r0
     db4:	06 d0       	rcall	.+12     	; 0xdc2 <__divmodhi4_neg1>
     db6:	77 fd       	sbrc	r23, 7
     db8:	08 d0       	rcall	.+16     	; 0xdca <__divmodhi4_neg2>
     dba:	36 d0       	rcall	.+108    	; 0xe28 <__udivmodhi4>
     dbc:	07 fc       	sbrc	r0, 7
     dbe:	05 d0       	rcall	.+10     	; 0xdca <__divmodhi4_neg2>
     dc0:	3e f4       	brtc	.+14     	; 0xdd0 <__divmodhi4_exit>

00000dc2 <__divmodhi4_neg1>:
     dc2:	90 95       	com	r25
     dc4:	81 95       	neg	r24
     dc6:	9f 4f       	sbci	r25, 0xFF	; 255
     dc8:	08 95       	ret

00000dca <__divmodhi4_neg2>:
     dca:	70 95       	com	r23
     dcc:	61 95       	neg	r22
     dce:	7f 4f       	sbci	r23, 0xFF	; 255

00000dd0 <__divmodhi4_exit>:
     dd0:	08 95       	ret

00000dd2 <__divmodsi4>:
     dd2:	05 2e       	mov	r0, r21
     dd4:	97 fb       	bst	r25, 7
     dd6:	16 f4       	brtc	.+4      	; 0xddc <__divmodsi4+0xa>
     dd8:	00 94       	com	r0
     dda:	0f d0       	rcall	.+30     	; 0xdfa <__negsi2>
     ddc:	57 fd       	sbrc	r21, 7
     dde:	05 d0       	rcall	.+10     	; 0xdea <__divmodsi4_neg2>
     de0:	37 d0       	rcall	.+110    	; 0xe50 <__udivmodsi4>
     de2:	07 fc       	sbrc	r0, 7
     de4:	02 d0       	rcall	.+4      	; 0xdea <__divmodsi4_neg2>
     de6:	46 f4       	brtc	.+16     	; 0xdf8 <__divmodsi4_exit>
     de8:	08 c0       	rjmp	.+16     	; 0xdfa <__negsi2>

00000dea <__divmodsi4_neg2>:
     dea:	50 95       	com	r21
     dec:	40 95       	com	r20
     dee:	30 95       	com	r19
     df0:	21 95       	neg	r18
     df2:	3f 4f       	sbci	r19, 0xFF	; 255
     df4:	4f 4f       	sbci	r20, 0xFF	; 255
     df6:	5f 4f       	sbci	r21, 0xFF	; 255

00000df8 <__divmodsi4_exit>:
     df8:	08 95       	ret

00000dfa <__negsi2>:
     dfa:	90 95       	com	r25
     dfc:	80 95       	com	r24
     dfe:	70 95       	com	r23
     e00:	61 95       	neg	r22
     e02:	7f 4f       	sbci	r23, 0xFF	; 255
     e04:	8f 4f       	sbci	r24, 0xFF	; 255
     e06:	9f 4f       	sbci	r25, 0xFF	; 255
     e08:	08 95       	ret

00000e0a <__umulhisi3>:
     e0a:	a2 9f       	mul	r26, r18
     e0c:	b0 01       	movw	r22, r0
     e0e:	b3 9f       	mul	r27, r19
     e10:	c0 01       	movw	r24, r0
     e12:	a3 9f       	mul	r26, r19
     e14:	70 0d       	add	r23, r0
     e16:	81 1d       	adc	r24, r1
     e18:	11 24       	eor	r1, r1
     e1a:	91 1d       	adc	r25, r1
     e1c:	b2 9f       	mul	r27, r18
     e1e:	70 0d       	add	r23, r0
     e20:	81 1d       	adc	r24, r1
     e22:	11 24       	eor	r1, r1
     e24:	91 1d       	adc	r25, r1
     e26:	08 95       	ret

00000e28 <__udivmodhi4>:
     e28:	aa 1b       	sub	r26, r26
     e2a:	bb 1b       	sub	r27, r27
     e2c:	51 e1       	ldi	r21, 0x11	; 17
     e2e:	07 c0       	rjmp	.+14     	; 0xe3e <__udivmodhi4_ep>

00000e30 <__udivmodhi4_loop>:
     e30:	aa 1f       	adc	r26, r26
     e32:	bb 1f       	adc	r27, r27
     e34:	a6 17       	cp	r26, r22
     e36:	b7 07       	cpc	r27, r23
     e38:	10 f0       	brcs	.+4      	; 0xe3e <__udivmodhi4_ep>
     e3a:	a6 1b       	sub	r26, r22
     e3c:	b7 0b       	sbc	r27, r23

00000e3e <__udivmodhi4_ep>:
     e3e:	88 1f       	adc	r24, r24
     e40:	99 1f       	adc	r25, r25
     e42:	5a 95       	dec	r21
     e44:	a9 f7       	brne	.-22     	; 0xe30 <__udivmodhi4_loop>
     e46:	80 95       	com	r24
     e48:	90 95       	com	r25
     e4a:	bc 01       	movw	r22, r24
     e4c:	cd 01       	movw	r24, r26
     e4e:	08 95       	ret

00000e50 <__udivmodsi4>:
     e50:	a1 e2       	ldi	r26, 0x21	; 33
     e52:	1a 2e       	mov	r1, r26
     e54:	aa 1b       	sub	r26, r26
     e56:	bb 1b       	sub	r27, r27
     e58:	fd 01       	movw	r30, r26
     e5a:	0d c0       	rjmp	.+26     	; 0xe76 <__udivmodsi4_ep>

00000e5c <__udivmodsi4_loop>:
     e5c:	aa 1f       	adc	r26, r26
     e5e:	bb 1f       	adc	r27, r27
     e60:	ee 1f       	adc	r30, r30
     e62:	ff 1f       	adc	r31, r31
     e64:	a2 17       	cp	r26, r18
     e66:	b3 07       	cpc	r27, r19
     e68:	e4 07       	cpc	r30, r20
     e6a:	f5 07       	cpc	r31, r21
     e6c:	20 f0       	brcs	.+8      	; 0xe76 <__udivmodsi4_ep>
     e6e:	a2 1b       	sub	r26, r18
     e70:	b3 0b       	sbc	r27, r19
     e72:	e4 0b       	sbc	r30, r20
     e74:	f5 0b       	sbc	r31, r21

00000e76 <__udivmodsi4_ep>:
     e76:	66 1f       	adc	r22, r22
     e78:	77 1f       	adc	r23, r23
     e7a:	88 1f       	adc	r24, r24
     e7c:	99 1f       	adc	r25, r25
     e7e:	1a 94       	dec	r1
     e80:	69 f7       	brne	.-38     	; 0xe5c <__udivmodsi4_loop>
     e82:	60 95       	com	r22
     e84:	70 95       	com	r23
     e86:	80 95       	com	r24
     e88:	90 95       	com	r25
     e8a:	9b 01       	movw	r18, r22
     e8c:	ac 01       	movw	r20, r24
     e8e:	bd 01       	movw	r22, r26
     e90:	cf 01       	movw	r24, r30
     e92:	08 95       	ret

00000e94 <strcmp>:
     e94:	fb 01       	movw	r30, r22
     e96:	dc 01       	movw	r26, r24
     e98:	8d 91       	ld	r24, X+
     e9a:	01 90       	ld	r0, Z+
     e9c:	80 19       	sub	r24, r0
     e9e:	01 10       	cpse	r0, r1
     ea0:	d9 f3       	breq	.-10     	; 0xe98 <strcmp+0x4>
     ea2:	99 0b       	sbc	r25, r25
     ea4:	08 95       	ret

00000ea6 <printf>:
     ea6:	cf 93       	push	r28
     ea8:	df 93       	push	r29
     eaa:	cd b7       	in	r28, 0x3d	; 61
     eac:	de b7       	in	r29, 0x3e	; 62
     eae:	ae 01       	movw	r20, r28
     eb0:	4b 5f       	subi	r20, 0xFB	; 251
     eb2:	5f 4f       	sbci	r21, 0xFF	; 255
     eb4:	fa 01       	movw	r30, r20
     eb6:	61 91       	ld	r22, Z+
     eb8:	71 91       	ld	r23, Z+
     eba:	af 01       	movw	r20, r30
     ebc:	80 91 3b 02 	lds	r24, 0x023B	; 0x80023b <__iob+0x2>
     ec0:	90 91 3c 02 	lds	r25, 0x023C	; 0x80023c <__iob+0x3>
     ec4:	31 d0       	rcall	.+98     	; 0xf28 <vfprintf>
     ec6:	df 91       	pop	r29
     ec8:	cf 91       	pop	r28
     eca:	08 95       	ret

00000ecc <sprintf>:
     ecc:	0f 93       	push	r16
     ece:	1f 93       	push	r17
     ed0:	cf 93       	push	r28
     ed2:	df 93       	push	r29
     ed4:	cd b7       	in	r28, 0x3d	; 61
     ed6:	de b7       	in	r29, 0x3e	; 62
     ed8:	2e 97       	sbiw	r28, 0x0e	; 14
     eda:	0f b6       	in	r0, 0x3f	; 63
     edc:	f8 94       	cli
     ede:	de bf       	out	0x3e, r29	; 62
     ee0:	0f be       	out	0x3f, r0	; 63
     ee2:	cd bf       	out	0x3d, r28	; 61
     ee4:	0d 89       	ldd	r16, Y+21	; 0x15
     ee6:	1e 89       	ldd	r17, Y+22	; 0x16
     ee8:	86 e0       	ldi	r24, 0x06	; 6
     eea:	8c 83       	std	Y+4, r24	; 0x04
     eec:	1a 83       	std	Y+2, r17	; 0x02
     eee:	09 83       	std	Y+1, r16	; 0x01
     ef0:	8f ef       	ldi	r24, 0xFF	; 255
     ef2:	9f e7       	ldi	r25, 0x7F	; 127
     ef4:	9e 83       	std	Y+6, r25	; 0x06
     ef6:	8d 83       	std	Y+5, r24	; 0x05
     ef8:	ae 01       	movw	r20, r28
     efa:	47 5e       	subi	r20, 0xE7	; 231
     efc:	5f 4f       	sbci	r21, 0xFF	; 255
     efe:	6f 89       	ldd	r22, Y+23	; 0x17
     f00:	78 8d       	ldd	r23, Y+24	; 0x18
     f02:	ce 01       	movw	r24, r28
     f04:	01 96       	adiw	r24, 0x01	; 1
     f06:	10 d0       	rcall	.+32     	; 0xf28 <vfprintf>
     f08:	ef 81       	ldd	r30, Y+7	; 0x07
     f0a:	f8 85       	ldd	r31, Y+8	; 0x08
     f0c:	e0 0f       	add	r30, r16
     f0e:	f1 1f       	adc	r31, r17
     f10:	10 82       	st	Z, r1
     f12:	2e 96       	adiw	r28, 0x0e	; 14
     f14:	0f b6       	in	r0, 0x3f	; 63
     f16:	f8 94       	cli
     f18:	de bf       	out	0x3e, r29	; 62
     f1a:	0f be       	out	0x3f, r0	; 63
     f1c:	cd bf       	out	0x3d, r28	; 61
     f1e:	df 91       	pop	r29
     f20:	cf 91       	pop	r28
     f22:	1f 91       	pop	r17
     f24:	0f 91       	pop	r16
     f26:	08 95       	ret

00000f28 <vfprintf>:
     f28:	2f 92       	push	r2
     f2a:	3f 92       	push	r3
     f2c:	4f 92       	push	r4
     f2e:	5f 92       	push	r5
     f30:	6f 92       	push	r6
     f32:	7f 92       	push	r7
     f34:	8f 92       	push	r8
     f36:	9f 92       	push	r9
     f38:	af 92       	push	r10
     f3a:	bf 92       	push	r11
     f3c:	cf 92       	push	r12
     f3e:	df 92       	push	r13
     f40:	ef 92       	push	r14
     f42:	ff 92       	push	r15
     f44:	0f 93       	push	r16
     f46:	1f 93       	push	r17
     f48:	cf 93       	push	r28
     f4a:	df 93       	push	r29
     f4c:	cd b7       	in	r28, 0x3d	; 61
     f4e:	de b7       	in	r29, 0x3e	; 62
     f50:	2b 97       	sbiw	r28, 0x0b	; 11
     f52:	0f b6       	in	r0, 0x3f	; 63
     f54:	f8 94       	cli
     f56:	de bf       	out	0x3e, r29	; 62
     f58:	0f be       	out	0x3f, r0	; 63
     f5a:	cd bf       	out	0x3d, r28	; 61
     f5c:	6c 01       	movw	r12, r24
     f5e:	7b 01       	movw	r14, r22
     f60:	8a 01       	movw	r16, r20
     f62:	fc 01       	movw	r30, r24
     f64:	17 82       	std	Z+7, r1	; 0x07
     f66:	16 82       	std	Z+6, r1	; 0x06
     f68:	83 81       	ldd	r24, Z+3	; 0x03
     f6a:	81 ff       	sbrs	r24, 1
     f6c:	bf c1       	rjmp	.+894    	; 0x12ec <__stack+0x1ed>
     f6e:	ce 01       	movw	r24, r28
     f70:	01 96       	adiw	r24, 0x01	; 1
     f72:	3c 01       	movw	r6, r24
     f74:	f6 01       	movw	r30, r12
     f76:	93 81       	ldd	r25, Z+3	; 0x03
     f78:	f7 01       	movw	r30, r14
     f7a:	93 fd       	sbrc	r25, 3
     f7c:	85 91       	lpm	r24, Z+
     f7e:	93 ff       	sbrs	r25, 3
     f80:	81 91       	ld	r24, Z+
     f82:	7f 01       	movw	r14, r30
     f84:	88 23       	and	r24, r24
     f86:	09 f4       	brne	.+2      	; 0xf8a <vfprintf+0x62>
     f88:	ad c1       	rjmp	.+858    	; 0x12e4 <__stack+0x1e5>
     f8a:	85 32       	cpi	r24, 0x25	; 37
     f8c:	39 f4       	brne	.+14     	; 0xf9c <vfprintf+0x74>
     f8e:	93 fd       	sbrc	r25, 3
     f90:	85 91       	lpm	r24, Z+
     f92:	93 ff       	sbrs	r25, 3
     f94:	81 91       	ld	r24, Z+
     f96:	7f 01       	movw	r14, r30
     f98:	85 32       	cpi	r24, 0x25	; 37
     f9a:	21 f4       	brne	.+8      	; 0xfa4 <vfprintf+0x7c>
     f9c:	b6 01       	movw	r22, r12
     f9e:	90 e0       	ldi	r25, 0x00	; 0
     fa0:	d6 d1       	rcall	.+940    	; 0x134e <fputc>
     fa2:	e8 cf       	rjmp	.-48     	; 0xf74 <vfprintf+0x4c>
     fa4:	91 2c       	mov	r9, r1
     fa6:	21 2c       	mov	r2, r1
     fa8:	31 2c       	mov	r3, r1
     faa:	ff e1       	ldi	r31, 0x1F	; 31
     fac:	f3 15       	cp	r31, r3
     fae:	d8 f0       	brcs	.+54     	; 0xfe6 <vfprintf+0xbe>
     fb0:	8b 32       	cpi	r24, 0x2B	; 43
     fb2:	79 f0       	breq	.+30     	; 0xfd2 <vfprintf+0xaa>
     fb4:	38 f4       	brcc	.+14     	; 0xfc4 <vfprintf+0x9c>
     fb6:	80 32       	cpi	r24, 0x20	; 32
     fb8:	79 f0       	breq	.+30     	; 0xfd8 <vfprintf+0xb0>
     fba:	83 32       	cpi	r24, 0x23	; 35
     fbc:	a1 f4       	brne	.+40     	; 0xfe6 <vfprintf+0xbe>
     fbe:	23 2d       	mov	r18, r3
     fc0:	20 61       	ori	r18, 0x10	; 16
     fc2:	1d c0       	rjmp	.+58     	; 0xffe <vfprintf+0xd6>
     fc4:	8d 32       	cpi	r24, 0x2D	; 45
     fc6:	61 f0       	breq	.+24     	; 0xfe0 <vfprintf+0xb8>
     fc8:	80 33       	cpi	r24, 0x30	; 48
     fca:	69 f4       	brne	.+26     	; 0xfe6 <vfprintf+0xbe>
     fcc:	23 2d       	mov	r18, r3
     fce:	21 60       	ori	r18, 0x01	; 1
     fd0:	16 c0       	rjmp	.+44     	; 0xffe <vfprintf+0xd6>
     fd2:	83 2d       	mov	r24, r3
     fd4:	82 60       	ori	r24, 0x02	; 2
     fd6:	38 2e       	mov	r3, r24
     fd8:	e3 2d       	mov	r30, r3
     fda:	e4 60       	ori	r30, 0x04	; 4
     fdc:	3e 2e       	mov	r3, r30
     fde:	2a c0       	rjmp	.+84     	; 0x1034 <__DATA_REGION_LENGTH__+0x34>
     fe0:	f3 2d       	mov	r31, r3
     fe2:	f8 60       	ori	r31, 0x08	; 8
     fe4:	1d c0       	rjmp	.+58     	; 0x1020 <__DATA_REGION_LENGTH__+0x20>
     fe6:	37 fc       	sbrc	r3, 7
     fe8:	2d c0       	rjmp	.+90     	; 0x1044 <__DATA_REGION_LENGTH__+0x44>
     fea:	20 ed       	ldi	r18, 0xD0	; 208
     fec:	28 0f       	add	r18, r24
     fee:	2a 30       	cpi	r18, 0x0A	; 10
     ff0:	40 f0       	brcs	.+16     	; 0x1002 <__DATA_REGION_LENGTH__+0x2>
     ff2:	8e 32       	cpi	r24, 0x2E	; 46
     ff4:	b9 f4       	brne	.+46     	; 0x1024 <__DATA_REGION_LENGTH__+0x24>
     ff6:	36 fc       	sbrc	r3, 6
     ff8:	75 c1       	rjmp	.+746    	; 0x12e4 <__stack+0x1e5>
     ffa:	23 2d       	mov	r18, r3
     ffc:	20 64       	ori	r18, 0x40	; 64
     ffe:	32 2e       	mov	r3, r18
    1000:	19 c0       	rjmp	.+50     	; 0x1034 <__DATA_REGION_LENGTH__+0x34>
    1002:	36 fe       	sbrs	r3, 6
    1004:	06 c0       	rjmp	.+12     	; 0x1012 <__DATA_REGION_LENGTH__+0x12>
    1006:	8a e0       	ldi	r24, 0x0A	; 10
    1008:	98 9e       	mul	r9, r24
    100a:	20 0d       	add	r18, r0
    100c:	11 24       	eor	r1, r1
    100e:	92 2e       	mov	r9, r18
    1010:	11 c0       	rjmp	.+34     	; 0x1034 <__DATA_REGION_LENGTH__+0x34>
    1012:	ea e0       	ldi	r30, 0x0A	; 10
    1014:	2e 9e       	mul	r2, r30
    1016:	20 0d       	add	r18, r0
    1018:	11 24       	eor	r1, r1
    101a:	22 2e       	mov	r2, r18
    101c:	f3 2d       	mov	r31, r3
    101e:	f0 62       	ori	r31, 0x20	; 32
    1020:	3f 2e       	mov	r3, r31
    1022:	08 c0       	rjmp	.+16     	; 0x1034 <__DATA_REGION_LENGTH__+0x34>
    1024:	8c 36       	cpi	r24, 0x6C	; 108
    1026:	21 f4       	brne	.+8      	; 0x1030 <__DATA_REGION_LENGTH__+0x30>
    1028:	83 2d       	mov	r24, r3
    102a:	80 68       	ori	r24, 0x80	; 128
    102c:	38 2e       	mov	r3, r24
    102e:	02 c0       	rjmp	.+4      	; 0x1034 <__DATA_REGION_LENGTH__+0x34>
    1030:	88 36       	cpi	r24, 0x68	; 104
    1032:	41 f4       	brne	.+16     	; 0x1044 <__DATA_REGION_LENGTH__+0x44>
    1034:	f7 01       	movw	r30, r14
    1036:	93 fd       	sbrc	r25, 3
    1038:	85 91       	lpm	r24, Z+
    103a:	93 ff       	sbrs	r25, 3
    103c:	81 91       	ld	r24, Z+
    103e:	7f 01       	movw	r14, r30
    1040:	81 11       	cpse	r24, r1
    1042:	b3 cf       	rjmp	.-154    	; 0xfaa <vfprintf+0x82>
    1044:	98 2f       	mov	r25, r24
    1046:	9f 7d       	andi	r25, 0xDF	; 223
    1048:	95 54       	subi	r25, 0x45	; 69
    104a:	93 30       	cpi	r25, 0x03	; 3
    104c:	28 f4       	brcc	.+10     	; 0x1058 <__DATA_REGION_LENGTH__+0x58>
    104e:	0c 5f       	subi	r16, 0xFC	; 252
    1050:	1f 4f       	sbci	r17, 0xFF	; 255
    1052:	9f e3       	ldi	r25, 0x3F	; 63
    1054:	99 83       	std	Y+1, r25	; 0x01
    1056:	0d c0       	rjmp	.+26     	; 0x1072 <__DATA_REGION_LENGTH__+0x72>
    1058:	83 36       	cpi	r24, 0x63	; 99
    105a:	31 f0       	breq	.+12     	; 0x1068 <__DATA_REGION_LENGTH__+0x68>
    105c:	83 37       	cpi	r24, 0x73	; 115
    105e:	71 f0       	breq	.+28     	; 0x107c <__DATA_REGION_LENGTH__+0x7c>
    1060:	83 35       	cpi	r24, 0x53	; 83
    1062:	09 f0       	breq	.+2      	; 0x1066 <__DATA_REGION_LENGTH__+0x66>
    1064:	55 c0       	rjmp	.+170    	; 0x1110 <__stack+0x11>
    1066:	20 c0       	rjmp	.+64     	; 0x10a8 <__DATA_REGION_LENGTH__+0xa8>
    1068:	f8 01       	movw	r30, r16
    106a:	80 81       	ld	r24, Z
    106c:	89 83       	std	Y+1, r24	; 0x01
    106e:	0e 5f       	subi	r16, 0xFE	; 254
    1070:	1f 4f       	sbci	r17, 0xFF	; 255
    1072:	88 24       	eor	r8, r8
    1074:	83 94       	inc	r8
    1076:	91 2c       	mov	r9, r1
    1078:	53 01       	movw	r10, r6
    107a:	12 c0       	rjmp	.+36     	; 0x10a0 <__DATA_REGION_LENGTH__+0xa0>
    107c:	28 01       	movw	r4, r16
    107e:	f2 e0       	ldi	r31, 0x02	; 2
    1080:	4f 0e       	add	r4, r31
    1082:	51 1c       	adc	r5, r1
    1084:	f8 01       	movw	r30, r16
    1086:	a0 80       	ld	r10, Z
    1088:	b1 80       	ldd	r11, Z+1	; 0x01
    108a:	36 fe       	sbrs	r3, 6
    108c:	03 c0       	rjmp	.+6      	; 0x1094 <__DATA_REGION_LENGTH__+0x94>
    108e:	69 2d       	mov	r22, r9
    1090:	70 e0       	ldi	r23, 0x00	; 0
    1092:	02 c0       	rjmp	.+4      	; 0x1098 <__DATA_REGION_LENGTH__+0x98>
    1094:	6f ef       	ldi	r22, 0xFF	; 255
    1096:	7f ef       	ldi	r23, 0xFF	; 255
    1098:	c5 01       	movw	r24, r10
    109a:	4e d1       	rcall	.+668    	; 0x1338 <strnlen>
    109c:	4c 01       	movw	r8, r24
    109e:	82 01       	movw	r16, r4
    10a0:	f3 2d       	mov	r31, r3
    10a2:	ff 77       	andi	r31, 0x7F	; 127
    10a4:	3f 2e       	mov	r3, r31
    10a6:	15 c0       	rjmp	.+42     	; 0x10d2 <__DATA_REGION_LENGTH__+0xd2>
    10a8:	28 01       	movw	r4, r16
    10aa:	22 e0       	ldi	r18, 0x02	; 2
    10ac:	42 0e       	add	r4, r18
    10ae:	51 1c       	adc	r5, r1
    10b0:	f8 01       	movw	r30, r16
    10b2:	a0 80       	ld	r10, Z
    10b4:	b1 80       	ldd	r11, Z+1	; 0x01
    10b6:	36 fe       	sbrs	r3, 6
    10b8:	03 c0       	rjmp	.+6      	; 0x10c0 <__DATA_REGION_LENGTH__+0xc0>
    10ba:	69 2d       	mov	r22, r9
    10bc:	70 e0       	ldi	r23, 0x00	; 0
    10be:	02 c0       	rjmp	.+4      	; 0x10c4 <__DATA_REGION_LENGTH__+0xc4>
    10c0:	6f ef       	ldi	r22, 0xFF	; 255
    10c2:	7f ef       	ldi	r23, 0xFF	; 255
    10c4:	c5 01       	movw	r24, r10
    10c6:	2d d1       	rcall	.+602    	; 0x1322 <strnlen_P>
    10c8:	4c 01       	movw	r8, r24
    10ca:	f3 2d       	mov	r31, r3
    10cc:	f0 68       	ori	r31, 0x80	; 128
    10ce:	3f 2e       	mov	r3, r31
    10d0:	82 01       	movw	r16, r4
    10d2:	33 fc       	sbrc	r3, 3
    10d4:	19 c0       	rjmp	.+50     	; 0x1108 <__stack+0x9>
    10d6:	82 2d       	mov	r24, r2
    10d8:	90 e0       	ldi	r25, 0x00	; 0
    10da:	88 16       	cp	r8, r24
    10dc:	99 06       	cpc	r9, r25
    10de:	a0 f4       	brcc	.+40     	; 0x1108 <__stack+0x9>
    10e0:	b6 01       	movw	r22, r12
    10e2:	80 e2       	ldi	r24, 0x20	; 32
    10e4:	90 e0       	ldi	r25, 0x00	; 0
    10e6:	33 d1       	rcall	.+614    	; 0x134e <fputc>
    10e8:	2a 94       	dec	r2
    10ea:	f5 cf       	rjmp	.-22     	; 0x10d6 <__DATA_REGION_LENGTH__+0xd6>
    10ec:	f5 01       	movw	r30, r10
    10ee:	37 fc       	sbrc	r3, 7
    10f0:	85 91       	lpm	r24, Z+
    10f2:	37 fe       	sbrs	r3, 7
    10f4:	81 91       	ld	r24, Z+
    10f6:	5f 01       	movw	r10, r30
    10f8:	b6 01       	movw	r22, r12
    10fa:	90 e0       	ldi	r25, 0x00	; 0
    10fc:	28 d1       	rcall	.+592    	; 0x134e <fputc>
    10fe:	21 10       	cpse	r2, r1
    1100:	2a 94       	dec	r2
    1102:	21 e0       	ldi	r18, 0x01	; 1
    1104:	82 1a       	sub	r8, r18
    1106:	91 08       	sbc	r9, r1
    1108:	81 14       	cp	r8, r1
    110a:	91 04       	cpc	r9, r1
    110c:	79 f7       	brne	.-34     	; 0x10ec <__DATA_REGION_LENGTH__+0xec>
    110e:	e1 c0       	rjmp	.+450    	; 0x12d2 <__stack+0x1d3>
    1110:	84 36       	cpi	r24, 0x64	; 100
    1112:	11 f0       	breq	.+4      	; 0x1118 <__stack+0x19>
    1114:	89 36       	cpi	r24, 0x69	; 105
    1116:	39 f5       	brne	.+78     	; 0x1166 <__stack+0x67>
    1118:	f8 01       	movw	r30, r16
    111a:	37 fe       	sbrs	r3, 7
    111c:	07 c0       	rjmp	.+14     	; 0x112c <__stack+0x2d>
    111e:	60 81       	ld	r22, Z
    1120:	71 81       	ldd	r23, Z+1	; 0x01
    1122:	82 81       	ldd	r24, Z+2	; 0x02
    1124:	93 81       	ldd	r25, Z+3	; 0x03
    1126:	0c 5f       	subi	r16, 0xFC	; 252
    1128:	1f 4f       	sbci	r17, 0xFF	; 255
    112a:	08 c0       	rjmp	.+16     	; 0x113c <__stack+0x3d>
    112c:	60 81       	ld	r22, Z
    112e:	71 81       	ldd	r23, Z+1	; 0x01
    1130:	07 2e       	mov	r0, r23
    1132:	00 0c       	add	r0, r0
    1134:	88 0b       	sbc	r24, r24
    1136:	99 0b       	sbc	r25, r25
    1138:	0e 5f       	subi	r16, 0xFE	; 254
    113a:	1f 4f       	sbci	r17, 0xFF	; 255
    113c:	f3 2d       	mov	r31, r3
    113e:	ff 76       	andi	r31, 0x6F	; 111
    1140:	3f 2e       	mov	r3, r31
    1142:	97 ff       	sbrs	r25, 7
    1144:	09 c0       	rjmp	.+18     	; 0x1158 <__stack+0x59>
    1146:	90 95       	com	r25
    1148:	80 95       	com	r24
    114a:	70 95       	com	r23
    114c:	61 95       	neg	r22
    114e:	7f 4f       	sbci	r23, 0xFF	; 255
    1150:	8f 4f       	sbci	r24, 0xFF	; 255
    1152:	9f 4f       	sbci	r25, 0xFF	; 255
    1154:	f0 68       	ori	r31, 0x80	; 128
    1156:	3f 2e       	mov	r3, r31
    1158:	2a e0       	ldi	r18, 0x0A	; 10
    115a:	30 e0       	ldi	r19, 0x00	; 0
    115c:	a3 01       	movw	r20, r6
    115e:	33 d1       	rcall	.+614    	; 0x13c6 <__ultoa_invert>
    1160:	88 2e       	mov	r8, r24
    1162:	86 18       	sub	r8, r6
    1164:	44 c0       	rjmp	.+136    	; 0x11ee <__stack+0xef>
    1166:	85 37       	cpi	r24, 0x75	; 117
    1168:	31 f4       	brne	.+12     	; 0x1176 <__stack+0x77>
    116a:	23 2d       	mov	r18, r3
    116c:	2f 7e       	andi	r18, 0xEF	; 239
    116e:	b2 2e       	mov	r11, r18
    1170:	2a e0       	ldi	r18, 0x0A	; 10
    1172:	30 e0       	ldi	r19, 0x00	; 0
    1174:	25 c0       	rjmp	.+74     	; 0x11c0 <__stack+0xc1>
    1176:	93 2d       	mov	r25, r3
    1178:	99 7f       	andi	r25, 0xF9	; 249
    117a:	b9 2e       	mov	r11, r25
    117c:	8f 36       	cpi	r24, 0x6F	; 111
    117e:	c1 f0       	breq	.+48     	; 0x11b0 <__stack+0xb1>
    1180:	18 f4       	brcc	.+6      	; 0x1188 <__stack+0x89>
    1182:	88 35       	cpi	r24, 0x58	; 88
    1184:	79 f0       	breq	.+30     	; 0x11a4 <__stack+0xa5>
    1186:	ae c0       	rjmp	.+348    	; 0x12e4 <__stack+0x1e5>
    1188:	80 37       	cpi	r24, 0x70	; 112
    118a:	19 f0       	breq	.+6      	; 0x1192 <__stack+0x93>
    118c:	88 37       	cpi	r24, 0x78	; 120
    118e:	21 f0       	breq	.+8      	; 0x1198 <__stack+0x99>
    1190:	a9 c0       	rjmp	.+338    	; 0x12e4 <__stack+0x1e5>
    1192:	e9 2f       	mov	r30, r25
    1194:	e0 61       	ori	r30, 0x10	; 16
    1196:	be 2e       	mov	r11, r30
    1198:	b4 fe       	sbrs	r11, 4
    119a:	0d c0       	rjmp	.+26     	; 0x11b6 <__stack+0xb7>
    119c:	fb 2d       	mov	r31, r11
    119e:	f4 60       	ori	r31, 0x04	; 4
    11a0:	bf 2e       	mov	r11, r31
    11a2:	09 c0       	rjmp	.+18     	; 0x11b6 <__stack+0xb7>
    11a4:	34 fe       	sbrs	r3, 4
    11a6:	0a c0       	rjmp	.+20     	; 0x11bc <__stack+0xbd>
    11a8:	29 2f       	mov	r18, r25
    11aa:	26 60       	ori	r18, 0x06	; 6
    11ac:	b2 2e       	mov	r11, r18
    11ae:	06 c0       	rjmp	.+12     	; 0x11bc <__stack+0xbd>
    11b0:	28 e0       	ldi	r18, 0x08	; 8
    11b2:	30 e0       	ldi	r19, 0x00	; 0
    11b4:	05 c0       	rjmp	.+10     	; 0x11c0 <__stack+0xc1>
    11b6:	20 e1       	ldi	r18, 0x10	; 16
    11b8:	30 e0       	ldi	r19, 0x00	; 0
    11ba:	02 c0       	rjmp	.+4      	; 0x11c0 <__stack+0xc1>
    11bc:	20 e1       	ldi	r18, 0x10	; 16
    11be:	32 e0       	ldi	r19, 0x02	; 2
    11c0:	f8 01       	movw	r30, r16
    11c2:	b7 fe       	sbrs	r11, 7
    11c4:	07 c0       	rjmp	.+14     	; 0x11d4 <__stack+0xd5>
    11c6:	60 81       	ld	r22, Z
    11c8:	71 81       	ldd	r23, Z+1	; 0x01
    11ca:	82 81       	ldd	r24, Z+2	; 0x02
    11cc:	93 81       	ldd	r25, Z+3	; 0x03
    11ce:	0c 5f       	subi	r16, 0xFC	; 252
    11d0:	1f 4f       	sbci	r17, 0xFF	; 255
    11d2:	06 c0       	rjmp	.+12     	; 0x11e0 <__stack+0xe1>
    11d4:	60 81       	ld	r22, Z
    11d6:	71 81       	ldd	r23, Z+1	; 0x01
    11d8:	80 e0       	ldi	r24, 0x00	; 0
    11da:	90 e0       	ldi	r25, 0x00	; 0
    11dc:	0e 5f       	subi	r16, 0xFE	; 254
    11de:	1f 4f       	sbci	r17, 0xFF	; 255
    11e0:	a3 01       	movw	r20, r6
    11e2:	f1 d0       	rcall	.+482    	; 0x13c6 <__ultoa_invert>
    11e4:	88 2e       	mov	r8, r24
    11e6:	86 18       	sub	r8, r6
    11e8:	fb 2d       	mov	r31, r11
    11ea:	ff 77       	andi	r31, 0x7F	; 127
    11ec:	3f 2e       	mov	r3, r31
    11ee:	36 fe       	sbrs	r3, 6
    11f0:	0d c0       	rjmp	.+26     	; 0x120c <__stack+0x10d>
    11f2:	23 2d       	mov	r18, r3
    11f4:	2e 7f       	andi	r18, 0xFE	; 254
    11f6:	a2 2e       	mov	r10, r18
    11f8:	89 14       	cp	r8, r9
    11fa:	58 f4       	brcc	.+22     	; 0x1212 <__stack+0x113>
    11fc:	34 fe       	sbrs	r3, 4
    11fe:	0b c0       	rjmp	.+22     	; 0x1216 <__stack+0x117>
    1200:	32 fc       	sbrc	r3, 2
    1202:	09 c0       	rjmp	.+18     	; 0x1216 <__stack+0x117>
    1204:	83 2d       	mov	r24, r3
    1206:	8e 7e       	andi	r24, 0xEE	; 238
    1208:	a8 2e       	mov	r10, r24
    120a:	05 c0       	rjmp	.+10     	; 0x1216 <__stack+0x117>
    120c:	b8 2c       	mov	r11, r8
    120e:	a3 2c       	mov	r10, r3
    1210:	03 c0       	rjmp	.+6      	; 0x1218 <__stack+0x119>
    1212:	b8 2c       	mov	r11, r8
    1214:	01 c0       	rjmp	.+2      	; 0x1218 <__stack+0x119>
    1216:	b9 2c       	mov	r11, r9
    1218:	a4 fe       	sbrs	r10, 4
    121a:	0f c0       	rjmp	.+30     	; 0x123a <__stack+0x13b>
    121c:	fe 01       	movw	r30, r28
    121e:	e8 0d       	add	r30, r8
    1220:	f1 1d       	adc	r31, r1
    1222:	80 81       	ld	r24, Z
    1224:	80 33       	cpi	r24, 0x30	; 48
    1226:	21 f4       	brne	.+8      	; 0x1230 <__stack+0x131>
    1228:	9a 2d       	mov	r25, r10
    122a:	99 7e       	andi	r25, 0xE9	; 233
    122c:	a9 2e       	mov	r10, r25
    122e:	09 c0       	rjmp	.+18     	; 0x1242 <__stack+0x143>
    1230:	a2 fe       	sbrs	r10, 2
    1232:	06 c0       	rjmp	.+12     	; 0x1240 <__stack+0x141>
    1234:	b3 94       	inc	r11
    1236:	b3 94       	inc	r11
    1238:	04 c0       	rjmp	.+8      	; 0x1242 <__stack+0x143>
    123a:	8a 2d       	mov	r24, r10
    123c:	86 78       	andi	r24, 0x86	; 134
    123e:	09 f0       	breq	.+2      	; 0x1242 <__stack+0x143>
    1240:	b3 94       	inc	r11
    1242:	a3 fc       	sbrc	r10, 3
    1244:	10 c0       	rjmp	.+32     	; 0x1266 <__stack+0x167>
    1246:	a0 fe       	sbrs	r10, 0
    1248:	06 c0       	rjmp	.+12     	; 0x1256 <__stack+0x157>
    124a:	b2 14       	cp	r11, r2
    124c:	80 f4       	brcc	.+32     	; 0x126e <__stack+0x16f>
    124e:	28 0c       	add	r2, r8
    1250:	92 2c       	mov	r9, r2
    1252:	9b 18       	sub	r9, r11
    1254:	0d c0       	rjmp	.+26     	; 0x1270 <__stack+0x171>
    1256:	b2 14       	cp	r11, r2
    1258:	58 f4       	brcc	.+22     	; 0x1270 <__stack+0x171>
    125a:	b6 01       	movw	r22, r12
    125c:	80 e2       	ldi	r24, 0x20	; 32
    125e:	90 e0       	ldi	r25, 0x00	; 0
    1260:	76 d0       	rcall	.+236    	; 0x134e <fputc>
    1262:	b3 94       	inc	r11
    1264:	f8 cf       	rjmp	.-16     	; 0x1256 <__stack+0x157>
    1266:	b2 14       	cp	r11, r2
    1268:	18 f4       	brcc	.+6      	; 0x1270 <__stack+0x171>
    126a:	2b 18       	sub	r2, r11
    126c:	02 c0       	rjmp	.+4      	; 0x1272 <__stack+0x173>
    126e:	98 2c       	mov	r9, r8
    1270:	21 2c       	mov	r2, r1
    1272:	a4 fe       	sbrs	r10, 4
    1274:	0f c0       	rjmp	.+30     	; 0x1294 <__stack+0x195>
    1276:	b6 01       	movw	r22, r12
    1278:	80 e3       	ldi	r24, 0x30	; 48
    127a:	90 e0       	ldi	r25, 0x00	; 0
    127c:	68 d0       	rcall	.+208    	; 0x134e <fputc>
    127e:	a2 fe       	sbrs	r10, 2
    1280:	16 c0       	rjmp	.+44     	; 0x12ae <__stack+0x1af>
    1282:	a1 fc       	sbrc	r10, 1
    1284:	03 c0       	rjmp	.+6      	; 0x128c <__stack+0x18d>
    1286:	88 e7       	ldi	r24, 0x78	; 120
    1288:	90 e0       	ldi	r25, 0x00	; 0
    128a:	02 c0       	rjmp	.+4      	; 0x1290 <__stack+0x191>
    128c:	88 e5       	ldi	r24, 0x58	; 88
    128e:	90 e0       	ldi	r25, 0x00	; 0
    1290:	b6 01       	movw	r22, r12
    1292:	0c c0       	rjmp	.+24     	; 0x12ac <__stack+0x1ad>
    1294:	8a 2d       	mov	r24, r10
    1296:	86 78       	andi	r24, 0x86	; 134
    1298:	51 f0       	breq	.+20     	; 0x12ae <__stack+0x1af>
    129a:	a1 fe       	sbrs	r10, 1
    129c:	02 c0       	rjmp	.+4      	; 0x12a2 <__stack+0x1a3>
    129e:	8b e2       	ldi	r24, 0x2B	; 43
    12a0:	01 c0       	rjmp	.+2      	; 0x12a4 <__stack+0x1a5>
    12a2:	80 e2       	ldi	r24, 0x20	; 32
    12a4:	a7 fc       	sbrc	r10, 7
    12a6:	8d e2       	ldi	r24, 0x2D	; 45
    12a8:	b6 01       	movw	r22, r12
    12aa:	90 e0       	ldi	r25, 0x00	; 0
    12ac:	50 d0       	rcall	.+160    	; 0x134e <fputc>
    12ae:	89 14       	cp	r8, r9
    12b0:	30 f4       	brcc	.+12     	; 0x12be <__stack+0x1bf>
    12b2:	b6 01       	movw	r22, r12
    12b4:	80 e3       	ldi	r24, 0x30	; 48
    12b6:	90 e0       	ldi	r25, 0x00	; 0
    12b8:	4a d0       	rcall	.+148    	; 0x134e <fputc>
    12ba:	9a 94       	dec	r9
    12bc:	f8 cf       	rjmp	.-16     	; 0x12ae <__stack+0x1af>
    12be:	8a 94       	dec	r8
    12c0:	f3 01       	movw	r30, r6
    12c2:	e8 0d       	add	r30, r8
    12c4:	f1 1d       	adc	r31, r1
    12c6:	80 81       	ld	r24, Z
    12c8:	b6 01       	movw	r22, r12
    12ca:	90 e0       	ldi	r25, 0x00	; 0
    12cc:	40 d0       	rcall	.+128    	; 0x134e <fputc>
    12ce:	81 10       	cpse	r8, r1
    12d0:	f6 cf       	rjmp	.-20     	; 0x12be <__stack+0x1bf>
    12d2:	22 20       	and	r2, r2
    12d4:	09 f4       	brne	.+2      	; 0x12d8 <__stack+0x1d9>
    12d6:	4e ce       	rjmp	.-868    	; 0xf74 <vfprintf+0x4c>
    12d8:	b6 01       	movw	r22, r12
    12da:	80 e2       	ldi	r24, 0x20	; 32
    12dc:	90 e0       	ldi	r25, 0x00	; 0
    12de:	37 d0       	rcall	.+110    	; 0x134e <fputc>
    12e0:	2a 94       	dec	r2
    12e2:	f7 cf       	rjmp	.-18     	; 0x12d2 <__stack+0x1d3>
    12e4:	f6 01       	movw	r30, r12
    12e6:	86 81       	ldd	r24, Z+6	; 0x06
    12e8:	97 81       	ldd	r25, Z+7	; 0x07
    12ea:	02 c0       	rjmp	.+4      	; 0x12f0 <__stack+0x1f1>
    12ec:	8f ef       	ldi	r24, 0xFF	; 255
    12ee:	9f ef       	ldi	r25, 0xFF	; 255
    12f0:	2b 96       	adiw	r28, 0x0b	; 11
    12f2:	0f b6       	in	r0, 0x3f	; 63
    12f4:	f8 94       	cli
    12f6:	de bf       	out	0x3e, r29	; 62
    12f8:	0f be       	out	0x3f, r0	; 63
    12fa:	cd bf       	out	0x3d, r28	; 61
    12fc:	df 91       	pop	r29
    12fe:	cf 91       	pop	r28
    1300:	1f 91       	pop	r17
    1302:	0f 91       	pop	r16
    1304:	ff 90       	pop	r15
    1306:	ef 90       	pop	r14
    1308:	df 90       	pop	r13
    130a:	cf 90       	pop	r12
    130c:	bf 90       	pop	r11
    130e:	af 90       	pop	r10
    1310:	9f 90       	pop	r9
    1312:	8f 90       	pop	r8
    1314:	7f 90       	pop	r7
    1316:	6f 90       	pop	r6
    1318:	5f 90       	pop	r5
    131a:	4f 90       	pop	r4
    131c:	3f 90       	pop	r3
    131e:	2f 90       	pop	r2
    1320:	08 95       	ret

00001322 <strnlen_P>:
    1322:	fc 01       	movw	r30, r24
    1324:	05 90       	lpm	r0, Z+
    1326:	61 50       	subi	r22, 0x01	; 1
    1328:	70 40       	sbci	r23, 0x00	; 0
    132a:	01 10       	cpse	r0, r1
    132c:	d8 f7       	brcc	.-10     	; 0x1324 <strnlen_P+0x2>
    132e:	80 95       	com	r24
    1330:	90 95       	com	r25
    1332:	8e 0f       	add	r24, r30
    1334:	9f 1f       	adc	r25, r31
    1336:	08 95       	ret

00001338 <strnlen>:
    1338:	fc 01       	movw	r30, r24
    133a:	61 50       	subi	r22, 0x01	; 1
    133c:	70 40       	sbci	r23, 0x00	; 0
    133e:	01 90       	ld	r0, Z+
    1340:	01 10       	cpse	r0, r1
    1342:	d8 f7       	brcc	.-10     	; 0x133a <strnlen+0x2>
    1344:	80 95       	com	r24
    1346:	90 95       	com	r25
    1348:	8e 0f       	add	r24, r30
    134a:	9f 1f       	adc	r25, r31
    134c:	08 95       	ret

0000134e <fputc>:
    134e:	0f 93       	push	r16
    1350:	1f 93       	push	r17
    1352:	cf 93       	push	r28
    1354:	df 93       	push	r29
    1356:	fb 01       	movw	r30, r22
    1358:	23 81       	ldd	r18, Z+3	; 0x03
    135a:	21 fd       	sbrc	r18, 1
    135c:	03 c0       	rjmp	.+6      	; 0x1364 <fputc+0x16>
    135e:	8f ef       	ldi	r24, 0xFF	; 255
    1360:	9f ef       	ldi	r25, 0xFF	; 255
    1362:	2c c0       	rjmp	.+88     	; 0x13bc <fputc+0x6e>
    1364:	22 ff       	sbrs	r18, 2
    1366:	16 c0       	rjmp	.+44     	; 0x1394 <fputc+0x46>
    1368:	46 81       	ldd	r20, Z+6	; 0x06
    136a:	57 81       	ldd	r21, Z+7	; 0x07
    136c:	24 81       	ldd	r18, Z+4	; 0x04
    136e:	35 81       	ldd	r19, Z+5	; 0x05
    1370:	42 17       	cp	r20, r18
    1372:	53 07       	cpc	r21, r19
    1374:	44 f4       	brge	.+16     	; 0x1386 <fputc+0x38>
    1376:	a0 81       	ld	r26, Z
    1378:	b1 81       	ldd	r27, Z+1	; 0x01
    137a:	9d 01       	movw	r18, r26
    137c:	2f 5f       	subi	r18, 0xFF	; 255
    137e:	3f 4f       	sbci	r19, 0xFF	; 255
    1380:	31 83       	std	Z+1, r19	; 0x01
    1382:	20 83       	st	Z, r18
    1384:	8c 93       	st	X, r24
    1386:	26 81       	ldd	r18, Z+6	; 0x06
    1388:	37 81       	ldd	r19, Z+7	; 0x07
    138a:	2f 5f       	subi	r18, 0xFF	; 255
    138c:	3f 4f       	sbci	r19, 0xFF	; 255
    138e:	37 83       	std	Z+7, r19	; 0x07
    1390:	26 83       	std	Z+6, r18	; 0x06
    1392:	14 c0       	rjmp	.+40     	; 0x13bc <fputc+0x6e>
    1394:	8b 01       	movw	r16, r22
    1396:	ec 01       	movw	r28, r24
    1398:	fb 01       	movw	r30, r22
    139a:	00 84       	ldd	r0, Z+8	; 0x08
    139c:	f1 85       	ldd	r31, Z+9	; 0x09
    139e:	e0 2d       	mov	r30, r0
    13a0:	09 95       	icall
    13a2:	89 2b       	or	r24, r25
    13a4:	e1 f6       	brne	.-72     	; 0x135e <fputc+0x10>
    13a6:	d8 01       	movw	r26, r16
    13a8:	16 96       	adiw	r26, 0x06	; 6
    13aa:	8d 91       	ld	r24, X+
    13ac:	9c 91       	ld	r25, X
    13ae:	17 97       	sbiw	r26, 0x07	; 7
    13b0:	01 96       	adiw	r24, 0x01	; 1
    13b2:	17 96       	adiw	r26, 0x07	; 7
    13b4:	9c 93       	st	X, r25
    13b6:	8e 93       	st	-X, r24
    13b8:	16 97       	sbiw	r26, 0x06	; 6
    13ba:	ce 01       	movw	r24, r28
    13bc:	df 91       	pop	r29
    13be:	cf 91       	pop	r28
    13c0:	1f 91       	pop	r17
    13c2:	0f 91       	pop	r16
    13c4:	08 95       	ret

000013c6 <__ultoa_invert>:
    13c6:	fa 01       	movw	r30, r20
    13c8:	aa 27       	eor	r26, r26
    13ca:	28 30       	cpi	r18, 0x08	; 8
    13cc:	51 f1       	breq	.+84     	; 0x1422 <__ultoa_invert+0x5c>
    13ce:	20 31       	cpi	r18, 0x10	; 16
    13d0:	81 f1       	breq	.+96     	; 0x1432 <__ultoa_invert+0x6c>
    13d2:	e8 94       	clt
    13d4:	6f 93       	push	r22
    13d6:	6e 7f       	andi	r22, 0xFE	; 254
    13d8:	6e 5f       	subi	r22, 0xFE	; 254
    13da:	7f 4f       	sbci	r23, 0xFF	; 255
    13dc:	8f 4f       	sbci	r24, 0xFF	; 255
    13de:	9f 4f       	sbci	r25, 0xFF	; 255
    13e0:	af 4f       	sbci	r26, 0xFF	; 255
    13e2:	b1 e0       	ldi	r27, 0x01	; 1
    13e4:	3e d0       	rcall	.+124    	; 0x1462 <__ultoa_invert+0x9c>
    13e6:	b4 e0       	ldi	r27, 0x04	; 4
    13e8:	3c d0       	rcall	.+120    	; 0x1462 <__ultoa_invert+0x9c>
    13ea:	67 0f       	add	r22, r23
    13ec:	78 1f       	adc	r23, r24
    13ee:	89 1f       	adc	r24, r25
    13f0:	9a 1f       	adc	r25, r26
    13f2:	a1 1d       	adc	r26, r1
    13f4:	68 0f       	add	r22, r24
    13f6:	79 1f       	adc	r23, r25
    13f8:	8a 1f       	adc	r24, r26
    13fa:	91 1d       	adc	r25, r1
    13fc:	a1 1d       	adc	r26, r1
    13fe:	6a 0f       	add	r22, r26
    1400:	71 1d       	adc	r23, r1
    1402:	81 1d       	adc	r24, r1
    1404:	91 1d       	adc	r25, r1
    1406:	a1 1d       	adc	r26, r1
    1408:	20 d0       	rcall	.+64     	; 0x144a <__ultoa_invert+0x84>
    140a:	09 f4       	brne	.+2      	; 0x140e <__ultoa_invert+0x48>
    140c:	68 94       	set
    140e:	3f 91       	pop	r19
    1410:	2a e0       	ldi	r18, 0x0A	; 10
    1412:	26 9f       	mul	r18, r22
    1414:	11 24       	eor	r1, r1
    1416:	30 19       	sub	r19, r0
    1418:	30 5d       	subi	r19, 0xD0	; 208
    141a:	31 93       	st	Z+, r19
    141c:	de f6       	brtc	.-74     	; 0x13d4 <__ultoa_invert+0xe>
    141e:	cf 01       	movw	r24, r30
    1420:	08 95       	ret
    1422:	46 2f       	mov	r20, r22
    1424:	47 70       	andi	r20, 0x07	; 7
    1426:	40 5d       	subi	r20, 0xD0	; 208
    1428:	41 93       	st	Z+, r20
    142a:	b3 e0       	ldi	r27, 0x03	; 3
    142c:	0f d0       	rcall	.+30     	; 0x144c <__ultoa_invert+0x86>
    142e:	c9 f7       	brne	.-14     	; 0x1422 <__ultoa_invert+0x5c>
    1430:	f6 cf       	rjmp	.-20     	; 0x141e <__ultoa_invert+0x58>
    1432:	46 2f       	mov	r20, r22
    1434:	4f 70       	andi	r20, 0x0F	; 15
    1436:	40 5d       	subi	r20, 0xD0	; 208
    1438:	4a 33       	cpi	r20, 0x3A	; 58
    143a:	18 f0       	brcs	.+6      	; 0x1442 <__ultoa_invert+0x7c>
    143c:	49 5d       	subi	r20, 0xD9	; 217
    143e:	31 fd       	sbrc	r19, 1
    1440:	40 52       	subi	r20, 0x20	; 32
    1442:	41 93       	st	Z+, r20
    1444:	02 d0       	rcall	.+4      	; 0x144a <__ultoa_invert+0x84>
    1446:	a9 f7       	brne	.-22     	; 0x1432 <__ultoa_invert+0x6c>
    1448:	ea cf       	rjmp	.-44     	; 0x141e <__ultoa_invert+0x58>
    144a:	b4 e0       	ldi	r27, 0x04	; 4
    144c:	a6 95       	lsr	r26
    144e:	97 95       	ror	r25
    1450:	87 95       	ror	r24
    1452:	77 95       	ror	r23
    1454:	67 95       	ror	r22
    1456:	ba 95       	dec	r27
    1458:	c9 f7       	brne	.-14     	; 0x144c <__ultoa_invert+0x86>
    145a:	00 97       	sbiw	r24, 0x00	; 0
    145c:	61 05       	cpc	r22, r1
    145e:	71 05       	cpc	r23, r1
    1460:	08 95       	ret
    1462:	9b 01       	movw	r18, r22
    1464:	ac 01       	movw	r20, r24
    1466:	0a 2e       	mov	r0, r26
    1468:	06 94       	lsr	r0
    146a:	57 95       	ror	r21
    146c:	47 95       	ror	r20
    146e:	37 95       	ror	r19
    1470:	27 95       	ror	r18
    1472:	ba 95       	dec	r27
    1474:	c9 f7       	brne	.-14     	; 0x1468 <__ultoa_invert+0xa2>
    1476:	62 0f       	add	r22, r18
    1478:	73 1f       	adc	r23, r19
    147a:	84 1f       	adc	r24, r20
    147c:	95 1f       	adc	r25, r21
    147e:	a0 1d       	adc	r26, r0
    1480:	08 95       	ret

00001482 <_exit>:
    1482:	f8 94       	cli

00001484 <__stop_program>:
    1484:	ff cf       	rjmp	.-2      	; 0x1484 <__stop_program>
